
Timer_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c4  080099c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099cc  080099cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080099d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000009c0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a50  20000a50  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023a73  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004832  00000000  00000000  00043b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  00048368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ab0  00000000  00000000  00049fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002921d  00000000  00000000  0004ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000239fb  00000000  00000000  00074ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebb36  00000000  00000000  000986a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001841d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bc8  00000000  00000000  00184228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009990 	.word	0x08009990

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08009990 	.word	0x08009990

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 f88c 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f81c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa8a 	bl	8000a14 <MX_GPIO_Init>
  MX_CRC_Init();
 8000500:	f000 f882 	bl	8000608 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000504:	f000 f894 	bl	8000630 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000508:	f000 fa34 	bl	8000974 <MX_FMC_Init>
  MX_I2C3_Init();
 800050c:	f000 f8c2 	bl	8000694 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000510:	f000 f900 	bl	8000714 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000514:	f000 f97e 	bl	8000814 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000518:	f000 f9b2 	bl	8000880 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800051c:	f000 fa00 	bl	8000920 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000520:	f008 fde8 	bl	80090f4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <main+0x40>)
 8000526:	f004 fe57 	bl	80051d8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052a:	f008 fe09 	bl	8009140 <MX_USB_HOST_Process>
 800052e:	e7fc      	b.n	800052a <main+0x3a>
 8000530:	20000248 	.word	0x20000248

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f009 f91e 	bl	8009784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ac:	2348      	movs	r3, #72	; 0x48
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fe75 	bl	80042ac <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c8:	f000 fb80 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f8d7 	bl	800479c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f4:	f000 fb6a 	bl	8000ccc <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_CRC_Init+0x20>)
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <MX_CRC_Init+0x24>)
 8000610:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_CRC_Init+0x20>)
 8000614:	f001 f930 	bl	8001878 <HAL_CRC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800061e:	f000 fb55 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000ac 	.word	0x200000ac
 800062c:	40023000 	.word	0x40023000

08000630 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <MX_DMA2D_Init+0x60>)
 8000638:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_DMA2D_Init+0x5c>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_DMA2D_Init+0x5c>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_DMA2D_Init+0x5c>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000666:	f001 f923 	bl	80018b0 <HAL_DMA2D_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000670:	f000 fb2c 	bl	8000ccc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000674:	2101      	movs	r1, #1
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_DMA2D_Init+0x5c>)
 8000678:	f001 fa74 	bl	8001b64 <HAL_DMA2D_ConfigLayer>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000682:	f000 fb23 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000b4 	.word	0x200000b4
 8000690:	4002b000 	.word	0x4002b000

08000694 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C3_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C3_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C3_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C3_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C3_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C3_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C3_Init+0x74>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_I2C3_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C3_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_I2C3_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C3_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_I2C3_Init+0x74>)
 80006d2:	f003 f8c3 	bl	800385c <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 faf6 	bl	8000ccc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_I2C3_Init+0x74>)
 80006e4:	f003 f9fe 	bl	8003ae4 <HAL_I2CEx_ConfigAnalogFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006ee:	f000 faed 	bl	8000ccc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C3_Init+0x74>)
 80006f6:	f003 fa31 	bl	8003b5c <HAL_I2CEx_ConfigDigitalFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fae4 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000f4 	.word	0x200000f4
 800070c:	40005c00 	.word	0x40005c00
 8000710:	000186a0 	.word	0x000186a0

08000714 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2234      	movs	r2, #52	; 0x34
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f009 f82f 	bl	8009784 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <MX_LTDC_Init+0xf8>)
 8000728:	4a39      	ldr	r2, [pc, #228]	; (8000810 <MX_LTDC_Init+0xfc>)
 800072a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800072c:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_LTDC_Init+0xf8>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_LTDC_Init+0xf8>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_LTDC_Init+0xf8>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <MX_LTDC_Init+0xf8>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_LTDC_Init+0xf8>)
 8000746:	2209      	movs	r2, #9
 8000748:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <MX_LTDC_Init+0xf8>)
 800074c:	2201      	movs	r2, #1
 800074e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_LTDC_Init+0xf8>)
 8000752:	221d      	movs	r2, #29
 8000754:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_LTDC_Init+0xf8>)
 8000758:	2203      	movs	r2, #3
 800075a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_LTDC_Init+0xf8>)
 800075e:	f240 120d 	movw	r2, #269	; 0x10d
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_LTDC_Init+0xf8>)
 8000766:	f240 1243 	movw	r2, #323	; 0x143
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_LTDC_Init+0xf8>)
 800076e:	f240 1217 	movw	r2, #279	; 0x117
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_LTDC_Init+0xf8>)
 8000776:	f240 1247 	movw	r2, #327	; 0x147
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_LTDC_Init+0xf8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_LTDC_Init+0xf8>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000794:	481d      	ldr	r0, [pc, #116]	; (800080c <MX_LTDC_Init+0xf8>)
 8000796:	f003 fa21 	bl	8003bdc <HAL_LTDC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 fa94 	bl	8000ccc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007a8:	23f0      	movs	r3, #240	; 0xf0
 80007aa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007b4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007ba:	23ff      	movs	r3, #255	; 0xff
 80007bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80007c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007c6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80007c8:	2307      	movs	r3, #7
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007cc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80007d2:	23f0      	movs	r3, #240	; 0xf0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80007d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_LTDC_Init+0xf8>)
 80007f6:	f003 fb83 	bl	8003f00 <HAL_LTDC_ConfigLayer>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000800:	f000 fa64 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3738      	adds	r7, #56	; 0x38
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000148 	.word	0x20000148
 8000810:	40016800 	.word	0x40016800

08000814 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_SPI5_Init+0x64>)
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <MX_SPI5_Init+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI5_Init+0x64>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI5_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_SPI5_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI5_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI5_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI5_Init+0x64>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI5_Init+0x64>)
 8000848:	2218      	movs	r2, #24
 800084a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_SPI5_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI5_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_SPI5_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI5_Init+0x64>)
 8000860:	220a      	movs	r2, #10
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_SPI5_Init+0x64>)
 8000866:	f004 fbdf 	bl	8005028 <HAL_SPI_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 fa2c 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200001f0 	.word	0x200001f0
 800087c:	40015000 	.word	0x40015000

08000880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_TIM1_Init+0x98>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_TIM1_Init+0x9c>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_TIM1_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM1_Init+0x98>)
 80008b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_TIM1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM1_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_TIM1_Init+0x98>)
 80008ca:	f004 fc36 	bl	800513a <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f9fa 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_TIM1_Init+0x98>)
 80008e6:	f004 fdef 	bl	80054c8 <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008f0:	f000 f9ec 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM1_Init+0x98>)
 8000902:	f005 f80b 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 f9de 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000248 	.word	0x20000248
 800091c:	40010000 	.word	0x40010000

08000920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART1_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000958:	f005 f870 	bl	8005a3c <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f9b3 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000290 	.word	0x20000290
 8000970:	40011000 	.word	0x40011000

08000974 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_FMC_Init+0x98>)
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <MX_FMC_Init+0x9c>)
 8000990:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_FMC_Init+0x98>)
 8000994:	2201      	movs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_FMC_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_FMC_Init+0x98>)
 80009b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009e0:	2307      	movs	r3, #7
 80009e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_FMC_Init+0x98>)
 80009f6:	f004 fae3 	bl	8004fc0 <HAL_SDRAM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a00:	f000 f964 	bl	8000ccc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200002d4 	.word	0x200002d4
 8000a10:	a0000140 	.word	0xa0000140

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
 8000a2e:	4b7b      	ldr	r3, [pc, #492]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a7a      	ldr	r2, [pc, #488]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b78      	ldr	r3, [pc, #480]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
 8000a44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	4b74      	ldr	r3, [pc, #464]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a73      	ldr	r2, [pc, #460]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b6d      	ldr	r3, [pc, #436]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a6c      	ldr	r2, [pc, #432]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b66      	ldr	r3, [pc, #408]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a65      	ldr	r2, [pc, #404]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a5e      	ldr	r2, [pc, #376]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a57      	ldr	r2, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a50      	ldr	r2, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a49      	ldr	r2, [pc, #292]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2116      	movs	r1, #22
 8000b0e:	4844      	ldr	r0, [pc, #272]	; (8000c20 <MX_GPIO_Init+0x20c>)
 8000b10:	f001 fa66 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4842      	ldr	r0, [pc, #264]	; (8000c24 <MX_GPIO_Init+0x210>)
 8000b1a:	f001 fa61 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x214>)
 8000b26:	f001 fa5b 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b30:	483e      	ldr	r0, [pc, #248]	; (8000c2c <MX_GPIO_Init+0x218>)
 8000b32:	f001 fa55 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b36:	2316      	movs	r3, #22
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4834      	ldr	r0, [pc, #208]	; (8000c20 <MX_GPIO_Init+0x20c>)
 8000b4e:	f001 f89b 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b52:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	482e      	ldr	r0, [pc, #184]	; (8000c24 <MX_GPIO_Init+0x210>)
 8000b6a:	f001 f88d 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4827      	ldr	r0, [pc, #156]	; (8000c24 <MX_GPIO_Init+0x210>)
 8000b86:	f001 f87f 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x20c>)
 8000ba0:	f001 f872 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_GPIO_Init+0x21c>)
 8000bb8:	f001 f866 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_GPIO_Init+0x214>)
 8000bd2:	f001 f859 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x214>)
 8000bf0:	f001 f84a 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_GPIO_Init+0x218>)
 8000c0e:	f001 f83b 	bl	8001c88 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	; 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020400 	.word	0x40020400

08000c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

	static uint32_t tempCounter = 0;
  if (htim->Instance == TIM6)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d135      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x7e>
  {
	  ++tempCounter;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c4e:	6013      	str	r3, [r2, #0]
	  if((tempCounter % 250) == 0)
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c56:	fba3 1302 	umull	r1, r3, r3, r2
 8000c5a:	091b      	lsrs	r3, r3, #4
 8000c5c:	21fa      	movs	r1, #250	; 0xfa
 8000c5e:	fb01 f303 	mul.w	r3, r1, r3
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  {
		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c6e:	f001 f9d0 	bl	8002012 <HAL_GPIO_TogglePin>
	  }
	  if((tempCounter % 500) == 0)
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c78:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x62>
	  	  {
	  		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c92:	f001 f9be 	bl	8002012 <HAL_GPIO_TogglePin>
	  	  }
	  if(tempCounter > 750 )
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d907      	bls.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x7e>
	  {
		  tempCounter = 0;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000ca8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cae:	f001 f9b0 	bl	8002012 <HAL_GPIO_TogglePin>
	  }
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40001000 	.word	0x40001000
 8000cc0:	20000308 	.word	0x20000308
 8000cc4:	10624dd3 	.word	0x10624dd3
 8000cc8:	40021800 	.word	0x40021800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_CRC_MspInit+0x3c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10d      	bne.n	8000d56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_CRC_MspInit+0x40>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_CRC_MspInit+0x40>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_CRC_MspInit+0x40>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023000 	.word	0x40023000
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_DMA2D_MspInit+0x48>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d115      	bne.n	8000daa <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_DMA2D_MspInit+0x4c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <HAL_DMA2D_MspInit+0x4c>)
 8000d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_DMA2D_MspInit+0x4c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	205a      	movs	r0, #90	; 0x5a
 8000da0:	f000 fd40 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000da4:	205a      	movs	r0, #90	; 0x5a
 8000da6:	f000 fd59 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	4002b000 	.word	0x4002b000
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <HAL_I2C_MspInit+0xc4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d14b      	bne.n	8000e76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <HAL_I2C_MspInit+0xcc>)
 8000e34:	f000 ff28 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <HAL_I2C_MspInit+0xd0>)
 8000e56:	f000 ff17 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_I2C_MspInit+0xc8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40005c00 	.word	0x40005c00
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	; 0x68
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	2230      	movs	r2, #48	; 0x30
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f008 fc67 	bl	8009784 <memset>
  if(hltdc->Instance==LTDC)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a85      	ldr	r2, [pc, #532]	; (80010d0 <HAL_LTDC_MspInit+0x240>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 8102 	bne.w	80010c6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ec6:	2332      	movs	r3, #50	; 0x32
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 feb2 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ee2:	f7ff fef3 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
 8000eea:	4b7a      	ldr	r3, [pc, #488]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a79      	ldr	r2, [pc, #484]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b77      	ldr	r3, [pc, #476]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000efe:	623b      	str	r3, [r7, #32]
 8000f00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a72      	ldr	r2, [pc, #456]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b70      	ldr	r3, [pc, #448]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a6b      	ldr	r2, [pc, #428]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b69      	ldr	r3, [pc, #420]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	4b65      	ldr	r3, [pc, #404]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a64      	ldr	r2, [pc, #400]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fbc:	230e      	movs	r3, #14
 8000fbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4844      	ldr	r0, [pc, #272]	; (80010d8 <HAL_LTDC_MspInit+0x248>)
 8000fc8:	f000 fe5e 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fcc:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fd0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fde:	230e      	movs	r3, #14
 8000fe0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483c      	ldr	r0, [pc, #240]	; (80010dc <HAL_LTDC_MspInit+0x24c>)
 8000fea:	f000 fe4d 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ffe:	2309      	movs	r3, #9
 8001000:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001006:	4619      	mov	r1, r3
 8001008:	4835      	ldr	r0, [pc, #212]	; (80010e0 <HAL_LTDC_MspInit+0x250>)
 800100a:	f000 fe3d 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800100e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001020:	230e      	movs	r3, #14
 8001022:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001028:	4619      	mov	r1, r3
 800102a:	482d      	ldr	r0, [pc, #180]	; (80010e0 <HAL_LTDC_MspInit+0x250>)
 800102c:	f000 fe2c 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001030:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001034:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001042:	230e      	movs	r3, #14
 8001044:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800104a:	4619      	mov	r1, r3
 800104c:	4825      	ldr	r0, [pc, #148]	; (80010e4 <HAL_LTDC_MspInit+0x254>)
 800104e:	f000 fe1b 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001052:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001064:	230e      	movs	r3, #14
 8001066:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800106c:	4619      	mov	r1, r3
 800106e:	481e      	ldr	r0, [pc, #120]	; (80010e8 <HAL_LTDC_MspInit+0x258>)
 8001070:	f000 fe0a 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001074:	2348      	movs	r3, #72	; 0x48
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001084:	230e      	movs	r3, #14
 8001086:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108c:	4619      	mov	r1, r3
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <HAL_LTDC_MspInit+0x25c>)
 8001090:	f000 fdfa 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001094:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001098:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010a6:	2309      	movs	r3, #9
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_LTDC_MspInit+0x254>)
 80010b2:	f000 fde9 	bl	8001c88 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2105      	movs	r1, #5
 80010ba:	2058      	movs	r0, #88	; 0x58
 80010bc:	f000 fbb2 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010c0:	2058      	movs	r0, #88	; 0x58
 80010c2:	f000 fbcb 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3768      	adds	r7, #104	; 0x68
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40016800 	.word	0x40016800
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00

080010f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_SPI_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12c      	bne.n	800116c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_SPI_MspInit+0x88>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_SPI_MspInit+0x88>)
 800111c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_SPI_MspInit+0x88>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_SPI_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_SPI_MspInit+0x88>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_SPI_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800114a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800115c:	2305      	movs	r3, #5
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_SPI_MspInit+0x8c>)
 8001168:	f000 fd8e 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40015000 	.word	0x40015000
 8001178:	40023800 	.word	0x40023800
 800117c:	40021400 	.word	0x40021400

08001180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_TIM_Base_MspInit+0x3c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10d      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x40>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x40>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_TIM_Base_MspInit+0x40>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x84>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12c      	bne.n	8001240 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x88>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_UART_MspInit+0x88>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_UART_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800121e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001230:	2307      	movs	r3, #7
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0x8c>)
 800123c:	f000 fd24 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40011000 	.word	0x40011000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_FMC_MspInit+0x104>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d16f      	bne.n	8001350 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_FMC_MspInit+0x104>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_FMC_MspInit+0x108>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	4a37      	ldr	r2, [pc, #220]	; (800135c <HAL_FMC_MspInit+0x108>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6393      	str	r3, [r2, #56]	; 0x38
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <HAL_FMC_MspInit+0x108>)
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001292:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001296:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a4:	230c      	movs	r3, #12
 80012a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	482c      	ldr	r0, [pc, #176]	; (8001360 <HAL_FMC_MspInit+0x10c>)
 80012ae:	f000 fceb 	bl	8001c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c2:	230c      	movs	r3, #12
 80012c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4826      	ldr	r0, [pc, #152]	; (8001364 <HAL_FMC_MspInit+0x110>)
 80012cc:	f000 fcdc 	bl	8001c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80012d4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e2:	230c      	movs	r3, #12
 80012e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <HAL_FMC_MspInit+0x114>)
 80012ec:	f000 fccc 	bl	8001c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001302:	230c      	movs	r3, #12
 8001304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <HAL_FMC_MspInit+0x118>)
 800130c:	f000 fcbc 	bl	8001c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001310:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001314:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001322:	230c      	movs	r3, #12
 8001324:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <HAL_FMC_MspInit+0x11c>)
 800132c:	f000 fcac 	bl	8001c88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001340:	230c      	movs	r3, #12
 8001342:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <HAL_FMC_MspInit+0x120>)
 800134a:	f000 fc9d 	bl	8001c88 <HAL_GPIO_Init>
 800134e:	e000      	b.n	8001352 <HAL_FMC_MspInit+0xfe>
    return;
 8001350:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000030c 	.word	0x2000030c
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400
 8001364:	40020800 	.word	0x40020800
 8001368:	40021800 	.word	0x40021800
 800136c:	40021000 	.word	0x40021000
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001380:	f7ff ff68 	bl	8001254 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_InitTick+0xe4>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a32      	ldr	r2, [pc, #200]	; (8001470 <HAL_InitTick+0xe4>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_InitTick+0xe4>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b8:	f107 0210 	add.w	r2, r7, #16
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fc0a 	bl	8004bdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d2:	f003 fbdb 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80013d6:	6378      	str	r0, [r7, #52]	; 0x34
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013da:	f003 fbd7 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80013de:	4603      	mov	r3, r0
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_InitTick+0xe8>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	3b01      	subs	r3, #1
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_InitTick+0xec>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_InitTick+0xf0>)
 80013f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_InitTick+0xec>)
 80013fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_InitTick+0xec>)
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_InitTick+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_InitTick+0xec>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_InitTick+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <HAL_InitTick+0xec>)
 800141a:	f003 fe8e 	bl	800513a <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11b      	bne.n	8001464 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <HAL_InitTick+0xec>)
 800142e:	f003 fed3 	bl	80051d8 <HAL_TIM_Base_Start_IT>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001438:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 fa0b 	bl	800185c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d808      	bhi.n	800145e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2036      	movs	r0, #54	; 0x36
 8001452:	f000 f9e7 	bl	8001824 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_InitTick+0xf4>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e002      	b.n	8001464 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001468:	4618      	mov	r0, r3
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	431bde83 	.word	0x431bde83
 8001478:	20000310 	.word	0x20000310
 800147c:	40001000 	.word	0x40001000
 8001480:	20000004 	.word	0x20000004

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f003 fee9 	bl	80052b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000310 	.word	0x20000310

080014f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <OTG_HS_IRQHandler+0x10>)
 80014f6:	f001 f811 	bl	800251c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000073c 	.word	0x2000073c

08001504 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <LTDC_IRQHandler+0x10>)
 800150a:	f002 fc37 	bl	8003d7c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000148 	.word	0x20000148

08001518 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA2D_IRQHandler+0x10>)
 800151e:	f000 fa10 	bl	8001942 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b4 	.word	0x200000b4

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f008 f8d8 	bl	8009710 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20030000 	.word	0x20030000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000358 	.word	0x20000358
 8001594:	20000a50 	.word	0x20000a50

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e6:	f7ff ffd7 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f008 f897 	bl	800971c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7fe ff7f 	bl	80004f0 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001600:	080099d4 	.word	0x080099d4
  ldr r2, =_sbss
 8001604:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001608:	20000a50 	.word	0x20000a50

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f8e8 	bl	800180e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff fea4 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fb48 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000035c 	.word	0x2000035c

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff4c 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001836:	f7ff ff61 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800183a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	6978      	ldr	r0, [r7, #20]
 8001842:	f7ff ffb1 	bl	80017a8 <NVIC_EncodePriority>
 8001846:	4602      	mov	r2, r0
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff80 	bl	8001754 <__NVIC_SetPriority>
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff54 	bl	8001718 <__NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	795b      	ldrb	r3, [r3, #5]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fa44 	bl	8000d28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e03b      	b.n	800193a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fa48 	bl	8000d6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	f023 0107 	bic.w	r1, r3, #7
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800191a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68d1      	ldr	r1, [r2, #12]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	430b      	orrs	r3, r1
 8001928:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d026      	beq.n	80019b2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d021      	beq.n	80019b2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800197c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2201      	movs	r2, #1
 8001990:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2204      	movs	r2, #4
 8001996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d026      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d021      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2220      	movs	r2, #32
 80019dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d026      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d021      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2208      	movs	r2, #8
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0204 	orr.w	r2, r3, #4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2204      	movs	r2, #4
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00e      	beq.n	8001a94 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a84:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f853 	bl	8001b3a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01f      	beq.n	8001ae8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2202      	movs	r2, #2
 8001abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01f      	beq.n	8001b32 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01a      	beq.n	8001b32 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f80e 	bl	8001b4e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA2D_ConfigLayer+0x20>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e079      	b.n	8001c78 <HAL_DMA2D_ConfigLayer+0x114>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	3318      	adds	r3, #24
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	4313      	orrs	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_DMA2D_ConfigLayer+0x120>)
 8001bb0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b0a      	cmp	r3, #10
 8001bb8:	d003      	beq.n	8001bc2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b09      	cmp	r3, #9
 8001bc0:	d107      	bne.n	8001bd2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e005      	b.n	8001bde <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	061b      	lsls	r3, r3, #24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d120      	bne.n	8001c26 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	ea02 0103 	and.w	r1, r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d003      	beq.n	8001c16 <HAL_DMA2D_ConfigLayer+0xb2>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d127      	bne.n	8001c66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
 8001c24:	e01f      	b.n	8001c66 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	ea02 0103 	and.w	r1, r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b09      	cmp	r3, #9
 8001c56:	d106      	bne.n	8001c66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c64:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	ff03000f 	.word	0xff03000f

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e177      	b.n	8001f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8166 	bne.w	8001f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d005      	beq.n	8001cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d017      	beq.n	8001d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d123      	bne.n	8001dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	08da      	lsrs	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3208      	adds	r2, #8
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80c0 	beq.w	8001f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a61      	ldr	r2, [pc, #388]	; (8001fb0 <HAL_GPIO_Init+0x328>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_GPIO_Init+0x32c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d037      	beq.n	8001ec6 <HAL_GPIO_Init+0x23e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <HAL_GPIO_Init+0x330>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_GPIO_Init+0x23a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <HAL_GPIO_Init+0x236>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a55      	ldr	r2, [pc, #340]	; (8001fc0 <HAL_GPIO_Init+0x338>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x232>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a54      	ldr	r2, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x33c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x22e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a53      	ldr	r2, [pc, #332]	; (8001fc8 <HAL_GPIO_Init+0x340>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x22a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_GPIO_Init+0x344>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x226>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <HAL_GPIO_Init+0x348>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x222>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_GPIO_Init+0x34c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x21e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	e012      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	e010      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	e00e      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eae:	2306      	movs	r3, #6
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed8:	4935      	ldr	r1, [pc, #212]	; (8001fb0 <HAL_GPIO_Init+0x328>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0a:	4a34      	ldr	r2, [pc, #208]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f34:	4a29      	ldr	r2, [pc, #164]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <HAL_GPIO_Init+0x354>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae84 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40021c00 	.word	0x40021c00
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40022400 	.word	0x40022400
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43d9      	mvns	r1, r3
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	400b      	ands	r3, r1
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002048:	b08f      	sub	sp, #60	; 0x3c
 800204a:	af0a      	add	r7, sp, #40	; 0x28
 800204c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e054      	b.n	8002102 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f007 f89c 	bl	80091b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f8ca 	bl	8006230 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	687e      	ldr	r6, [r7, #4]
 80020a4:	466d      	mov	r5, sp
 80020a6:	f106 0410 	add.w	r4, r6, #16
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ba:	1d33      	adds	r3, r6, #4
 80020bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020be:	6838      	ldr	r0, [r7, #0]
 80020c0:	f004 f844 	bl	800614c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 f8c1 	bl	8006252 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	687e      	ldr	r6, [r7, #4]
 80020d8:	466d      	mov	r5, sp
 80020da:	f106 0410 	add.w	r4, r6, #16
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ee:	1d33      	adds	r3, r6, #4
 80020f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f004 fa4a 	bl	800658c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800210a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800210a:	b590      	push	{r4, r7, lr}
 800210c:	b089      	sub	sp, #36	; 0x24
 800210e:	af04      	add	r7, sp, #16
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	4608      	mov	r0, r1
 8002114:	4611      	mov	r1, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4603      	mov	r3, r0
 800211a:	70fb      	strb	r3, [r7, #3]
 800211c:	460b      	mov	r3, r1
 800211e:	70bb      	strb	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_HCD_HC_Init+0x28>
 800212e:	2302      	movs	r3, #2
 8002130:	e076      	b.n	8002220 <HAL_HCD_HC_Init+0x116>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	333d      	adds	r3, #61	; 0x3d
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3338      	adds	r3, #56	; 0x38
 800215a:	787a      	ldrb	r2, [r7, #1]
 800215c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3340      	adds	r3, #64	; 0x40
 800216c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800216e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3339      	adds	r3, #57	; 0x39
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	333f      	adds	r3, #63	; 0x3f
 8002190:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002194:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	78ba      	ldrb	r2, [r7, #2]
 800219a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219e:	b2d0      	uxtb	r0, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	333a      	adds	r3, #58	; 0x3a
 80021ac:	4602      	mov	r2, r0
 80021ae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da09      	bge.n	80021cc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	333b      	adds	r3, #59	; 0x3b
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e008      	b.n	80021de <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	333b      	adds	r3, #59	; 0x3b
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	333c      	adds	r3, #60	; 0x3c
 80021ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	787c      	ldrb	r4, [r7, #1]
 80021f8:	78ba      	ldrb	r2, [r7, #2]
 80021fa:	78f9      	ldrb	r1, [r7, #3]
 80021fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	4623      	mov	r3, r4
 800220e:	f004 fb43 	bl	8006898 <USB_HC_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}

08002228 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_HCD_HC_Halt+0x1e>
 8002242:	2302      	movs	r3, #2
 8002244:	e00f      	b.n	8002266 <HAL_HCD_HC_Halt+0x3e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fd93 	bl	8006d82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	70fb      	strb	r3, [r7, #3]
 8002282:	460b      	mov	r3, r1
 8002284:	70bb      	strb	r3, [r7, #2]
 8002286:	4613      	mov	r3, r2
 8002288:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	333b      	adds	r3, #59	; 0x3b
 8002298:	78ba      	ldrb	r2, [r7, #2]
 800229a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	787a      	ldrb	r2, [r7, #1]
 80022ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022ae:	7c3b      	ldrb	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3342      	adds	r3, #66	; 0x42
 80022c2:	2203      	movs	r2, #3
 80022c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	333d      	adds	r3, #61	; 0x3d
 80022d4:	7f3a      	ldrb	r2, [r7, #28]
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e008      	b.n	80022ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f200 80c6 	bhi.w	8002480 <HAL_HCD_HC_SubmitRequest+0x210>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	0800246d 	.word	0x0800246d
 8002304:	08002371 	.word	0x08002371
 8002308:	080023ef 	.word	0x080023ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800230c:	7c3b      	ldrb	r3, [r7, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	f040 80b8 	bne.w	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
 8002314:	78bb      	ldrb	r3, [r7, #2]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 80b4 	bne.w	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800231c:	8b3b      	ldrh	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3355      	adds	r3, #85	; 0x55
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3355      	adds	r3, #85	; 0x55
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3342      	adds	r3, #66	; 0x42
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800235a:	e093      	b.n	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3342      	adds	r3, #66	; 0x42
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      break;
 800236e:	e089      	b.n	8002484 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002370:	78bb      	ldrb	r3, [r7, #2]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3355      	adds	r3, #85	; 0x55
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3342      	adds	r3, #66	; 0x42
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800239c:	e073      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3342      	adds	r3, #66	; 0x42
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
      break;
 80023b0:	e069      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3354      	adds	r3, #84	; 0x54
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3342      	adds	r3, #66	; 0x42
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
      break;
 80023d8:	e055      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3342      	adds	r3, #66	; 0x42
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e04b      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ee:	78bb      	ldrb	r3, [r7, #2]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11d      	bne.n	8002430 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3355      	adds	r3, #85	; 0x55
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3342      	adds	r3, #66	; 0x42
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800241a:	e034      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3342      	adds	r3, #66	; 0x42
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	e02a      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3354      	adds	r3, #84	; 0x54
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
      break;
 8002456:	e016      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3342      	adds	r3, #66	; 0x42
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
      break;
 800246a:	e00c      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3342      	adds	r3, #66	; 0x42
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
      break;
 800247e:	e002      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002484:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3344      	adds	r3, #68	; 0x44
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	8b3a      	ldrh	r2, [r7, #24]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	202c      	movs	r0, #44	; 0x2c
 80024a0:	fb00 f303 	mul.w	r3, r0, r3
 80024a4:	440b      	add	r3, r1
 80024a6:	334c      	adds	r3, #76	; 0x4c
 80024a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3360      	adds	r3, #96	; 0x60
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3350      	adds	r3, #80	; 0x50
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3339      	adds	r3, #57	; 0x39
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	222c      	movs	r2, #44	; 0x2c
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	3338      	adds	r3, #56	; 0x38
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	18d1      	adds	r1, r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	f004 fae6 	bl	8006adc <USB_HC_StartXfer>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 ffe7 	bl	8006506 <USB_GetMode>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	f040 80f6 	bne.w	800272c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 ffcb 	bl	80064e0 <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80ec 	beq.w	800272a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 ffc2 	bl	80064e0 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002566:	d104      	bne.n	8002572 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002570:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 ffb2 	bl	80064e0 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d104      	bne.n	8002592 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 ffa2 	bl	80064e0 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a6:	d104      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 ff92 	bl	80064e0 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d103      	bne.n	80025ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 ff84 	bl	80064e0 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e2:	d11c      	bne.n	800261e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025fe:	2110      	movs	r1, #16
 8002600:	6938      	ldr	r0, [r7, #16]
 8002602:	f003 fe73 	bl	80062ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002606:	6938      	ldr	r0, [r7, #16]
 8002608:	f003 fea4 	bl	8006354 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f004 f87a 	bl	800670c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f006 fe43 	bl	80092a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f003 ff5c 	bl	80064e0 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002632:	d102      	bne.n	800263a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 f89e 	bl	8003776 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 ff4e 	bl	80064e0 <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d106      	bne.n	800265c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f006 fe0c 	bl	800926c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2208      	movs	r2, #8
 800265a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 ff3d 	bl	80064e0 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d101      	bne.n	8002674 <HAL_HCD_IRQHandler+0x158>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_HCD_IRQHandler+0x15a>
 8002674:	2300      	movs	r3, #0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d012      	beq.n	80026a0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 ffa1 	bl	80035d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0210 	orr.w	r2, r2, #16
 800269e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 ff1b 	bl	80064e0 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026b4:	d13a      	bne.n	800272c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fb50 	bl	8006d60 <USB_HC_ReadInterrupt>
 80026c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e025      	b.n	8002714 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d018      	beq.n	800270e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f2:	d106      	bne.n	8002702 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8ab 	bl	8002856 <HCD_HC_IN_IRQHandler>
 8002700:	e005      	b.n	800270e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fbf9 	bl	8002f00 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3d4      	bcc.n	80026c8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	e000      	b.n	800272c <HAL_HCD_IRQHandler+0x210>
      return;
 800272a:	bf00      	nop
    }
  }
}
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_HCD_Start+0x16>
 8002744:	2302      	movs	r3, #2
 8002746:	e013      	b.n	8002770 <HAL_HCD_Start+0x3e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f83c 	bl	80067d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fd54 	bl	800620e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_HCD_Stop+0x16>
 800278a:	2302      	movs	r3, #2
 800278c:	e00d      	b.n	80027aa <HAL_HCD_Stop+0x32>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fc2a 	bl	8006ff4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 ffde 	bl	8006780 <USB_ResetPort>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3360      	adds	r3, #96	; 0x60
 80027e8:	781b      	ldrb	r3, [r3, #0]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3350      	adds	r3, #80	; 0x50
 8002810:	681b      	ldr	r3, [r3, #0]
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 f822 	bl	8006874 <USB_GetCurrentFrame>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fffd 	bl	8006846 <USB_GetHostSpeed>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d11a      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	2304      	movs	r3, #4
 8002896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	2206      	movs	r2, #6
 80028a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fa64 	bl	8006d82 <USB_HC_Halt>
 80028ba:	e0af      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d11b      	bne.n	800290c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2207      	movs	r2, #7
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fa3c 	bl	8006d82 <USB_HC_Halt>
 800290a:	e087      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b20      	cmp	r3, #32
 8002920:	d109      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	2320      	movs	r3, #32
 8002932:	6093      	str	r3, [r2, #8]
 8002934:	e072      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b08      	cmp	r3, #8
 800294a:	d11a      	bne.n	8002982 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	461a      	mov	r2, r3
 800295a:	2308      	movs	r3, #8
 800295c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3361      	adds	r3, #97	; 0x61
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f004 fa01 	bl	8006d82 <USB_HC_Halt>
 8002980:	e04c      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d11b      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2208      	movs	r2, #8
 80029be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 f9d9 	bl	8006d82 <USB_HC_Halt>
 80029d0:	e024      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d119      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3361      	adds	r3, #97	; 0x61
 8002a08:	2206      	movs	r2, #6
 8002a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f9b3 	bl	8006d82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a32:	d112      	bne.n	8002a5a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 f99f 	bl	8006d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a56:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a58:	e24e      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 80df 	bne.w	8002c30 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a9c:	1ad2      	subs	r2, r2, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	202c      	movs	r0, #44	; 0x2c
 8002aa4:	fb00 f303 	mul.w	r3, r0, r3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3350      	adds	r3, #80	; 0x50
 8002aac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	335c      	adds	r3, #92	; 0x5c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	333f      	adds	r3, #63	; 0x3f
 8002b06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d111      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f933 	bl	8006d82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	e03a      	b.n	8002ba6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	333f      	adds	r3, #63	; 0x3f
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d009      	beq.n	8002b58 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d126      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	0151      	lsls	r1, r2, #5
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b76:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	b2d9      	uxtb	r1, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	202c      	movs	r0, #44	; 0x2c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3360      	adds	r3, #96	; 0x60
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f006 fb8d 	bl	80092c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12b      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3348      	adds	r3, #72	; 0x48
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	fb00 f202 	mul.w	r2, r0, r2
 8002bc8:	440a      	add	r2, r1
 8002bca:	3240      	adds	r2, #64	; 0x40
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 818e 	beq.w	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3354      	adds	r3, #84	; 0x54
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2d8      	uxtb	r0, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3354      	adds	r3, #84	; 0x54
 8002c00:	4602      	mov	r2, r0
 8002c02:	701a      	strb	r2, [r3, #0]
}
 8002c04:	e178      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3354      	adds	r3, #84	; 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3354      	adds	r3, #84	; 0x54
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	701a      	strb	r2, [r3, #0]
}
 8002c2e:	e163      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 80f6 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3361      	adds	r3, #97	; 0x61
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d109      	bne.n	8002c70 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e0c9      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3361      	adds	r3, #97	; 0x61
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d109      	bne.n	8002c98 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	2205      	movs	r2, #5
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e0b5      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d009      	beq.n	8002cc0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d150      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	335c      	adds	r3, #92	; 0x5c
 8002ce0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d912      	bls.n	8002d1c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2204      	movs	r2, #4
 8002d18:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d1a:	e073      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3360      	adds	r3, #96	; 0x60
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d60:	e050      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d122      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e023      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b07      	cmp	r3, #7
 8002dce:	d119      	bne.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	202c      	movs	r0, #44	; 0x2c
 8002de8:	fb00 f303 	mul.w	r3, r0, r3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	2302      	movs	r3, #2
 8002e14:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b2d9      	uxtb	r1, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	202c      	movs	r0, #44	; 0x2c
 8002e20:	fb00 f303 	mul.w	r3, r0, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f006 fa47 	bl	80092c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e32:	e061      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d156      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	333f      	adds	r3, #63	; 0x3f
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d111      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	335c      	adds	r3, #92	; 0x5c
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 ff81 	bl	8006d82 <USB_HC_Halt>
 8002e80:	e031      	b.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	333f      	adds	r3, #63	; 0x3f
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333f      	adds	r3, #63	; 0x3f
 8002ea4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11d      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ff4e 	bl	8006d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d11a      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2304      	movs	r3, #4
 8002f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3361      	adds	r3, #97	; 0x61
 8002f50:	2206      	movs	r2, #6
 8002f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 ff0f 	bl	8006d82 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f64:	e331      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d12e      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 8313 	bne.w	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	333d      	adds	r3, #61	; 0x3d
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3360      	adds	r3, #96	; 0x60
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 fed5 	bl	8006d82 <USB_HC_Halt>
}
 8002fd8:	e2f7      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d112      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003004:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f003 feb6 	bl	8006d82 <USB_HC_Halt>
}
 8003016:	e2d8      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d140      	bne.n	80030b0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d111      	bne.n	800307a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333d      	adds	r3, #61	; 0x3d
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	461a      	mov	r2, r3
 8003088:	2301      	movs	r3, #1
 800308a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fe6a 	bl	8006d82 <USB_HC_Halt>
}
 80030ae:	e28c      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d12c      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	333d      	adds	r3, #61	; 0x3d
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fe3b 	bl	8006d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2340      	movs	r3, #64	; 0x40
 800311c:	6093      	str	r3, [r2, #8]
}
 800311e:	e254      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11a      	bne.n	800316c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	2308      	movs	r3, #8
 8003146:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3361      	adds	r3, #97	; 0x61
 8003156:	2205      	movs	r2, #5
 8003158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fe0c 	bl	8006d82 <USB_HC_Halt>
}
 800316a:	e22e      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b10      	cmp	r3, #16
 8003180:	d140      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	2203      	movs	r2, #3
 80031a4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333d      	adds	r3, #61	; 0x3d
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d112      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333c      	adds	r3, #60	; 0x3c
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	333d      	adds	r3, #61	; 0x3d
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fdc9 	bl	8006d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	2310      	movs	r3, #16
 8003200:	6093      	str	r3, [r2, #8]
}
 8003202:	e1e2      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d164      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d111      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3361      	adds	r3, #97	; 0x61
 8003230:	2206      	movs	r2, #6
 8003232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fd9f 	bl	8006d82 <USB_HC_Halt>
 8003244:	e044      	b.n	80032d0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	335c      	adds	r3, #92	; 0x5c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	202c      	movs	r0, #44	; 0x2c
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	440b      	add	r3, r1
 8003264:	335c      	adds	r3, #92	; 0x5c
 8003266:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	335c      	adds	r3, #92	; 0x5c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d920      	bls.n	80032be <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	335c      	adds	r3, #92	; 0x5c
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3360      	adds	r3, #96	; 0x60
 800329c:	2204      	movs	r2, #4
 800329e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	b2d9      	uxtb	r1, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	202c      	movs	r0, #44	; 0x2c
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	; 0x60
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f006 f802 	bl	80092c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032bc:	e008      	b.n	80032d0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3360      	adds	r3, #96	; 0x60
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	461a      	mov	r2, r3
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	6093      	str	r3, [r2, #8]
}
 80032e2:	e172      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d11b      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	2208      	movs	r2, #8
 800330c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fd32 	bl	8006d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e14a      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	f040 813f 	bne.w	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3361      	adds	r3, #97	; 0x61
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d17d      	bne.n	800345c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3360      	adds	r3, #96	; 0x60
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	333f      	adds	r3, #63	; 0x3f
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d00a      	beq.n	800339c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	333f      	adds	r3, #63	; 0x3f
 8003394:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	f040 8100 	bne.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3355      	adds	r3, #85	; 0x55
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f083 0301 	eor.w	r3, r3, #1
 80033b8:	b2d8      	uxtb	r0, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3355      	adds	r3, #85	; 0x55
 80033c8:	4602      	mov	r2, r0
 80033ca:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 80e3 	bne.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	334c      	adds	r3, #76	; 0x4c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80d8 	beq.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	334c      	adds	r3, #76	; 0x4c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	202c      	movs	r0, #44	; 0x2c
 8003402:	fb00 f202 	mul.w	r2, r0, r2
 8003406:	440a      	add	r2, r1
 8003408:	3240      	adds	r2, #64	; 0x40
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	4413      	add	r3, r2
 800340e:	3b01      	subs	r3, #1
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	202c      	movs	r0, #44	; 0x2c
 8003416:	fb00 f202 	mul.w	r2, r0, r2
 800341a:	440a      	add	r2, r1
 800341c:	3240      	adds	r2, #64	; 0x40
 800341e:	8812      	ldrh	r2, [r2, #0]
 8003420:	fbb3 f3f2 	udiv	r3, r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80b5 	beq.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3355      	adds	r3, #85	; 0x55
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2d8      	uxtb	r0, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3355      	adds	r3, #85	; 0x55
 8003456:	4602      	mov	r2, r0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e09f      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3361      	adds	r3, #97	; 0x61
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d109      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e08b      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3361      	adds	r3, #97	; 0x61
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d109      	bne.n	80034ac <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3360      	adds	r3, #96	; 0x60
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e077      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3361      	adds	r3, #97	; 0x61
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d109      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	2205      	movs	r2, #5
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e063      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3361      	adds	r3, #97	; 0x61
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b06      	cmp	r3, #6
 80034e6:	d009      	beq.n	80034fc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3361      	adds	r3, #97	; 0x61
 80034f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d14f      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	335c      	adds	r3, #92	; 0x5c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	202c      	movs	r0, #44	; 0x2c
 8003514:	fb00 f303 	mul.w	r3, r0, r3
 8003518:	440b      	add	r3, r1
 800351a:	335c      	adds	r3, #92	; 0x5c
 800351c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d912      	bls.n	8003558 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	335c      	adds	r3, #92	; 0x5c
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3360      	adds	r3, #96	; 0x60
 8003552:	2204      	movs	r2, #4
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e021      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003580:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003588:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	2302      	movs	r3, #2
 80035ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	b2d9      	uxtb	r1, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	202c      	movs	r0, #44	; 0x2c
 80035b8:	fb00 f303 	mul.w	r3, r0, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f005 fe7b 	bl	80092c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08a      	sub	sp, #40	; 0x28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003606:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d004      	beq.n	8003618 <HCD_RXQLVL_IRQHandler+0x46>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b05      	cmp	r3, #5
 8003612:	f000 80a9 	beq.w	8003768 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003616:	e0aa      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a6 	beq.w	800376c <HCD_RXQLVL_IRQHandler+0x19a>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3344      	adds	r3, #68	; 0x44
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 809b 	beq.w	800376c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	3350      	adds	r3, #80	; 0x50
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	441a      	add	r2, r3
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	440b      	add	r3, r1
 8003656:	334c      	adds	r3, #76	; 0x4c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d87a      	bhi.n	8003754 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3344      	adds	r3, #68	; 0x44
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	b292      	uxth	r2, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f002 feda 	bl	8006430 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3344      	adds	r3, #68	; 0x44
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	441a      	add	r2, r3
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	202c      	movs	r0, #44	; 0x2c
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	440b      	add	r3, r1
 800369c:	3344      	adds	r3, #68	; 0x44
 800369e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3350      	adds	r3, #80	; 0x50
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	441a      	add	r2, r3
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	202c      	movs	r0, #44	; 0x2c
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	440b      	add	r3, r1
 80036c0:	3350      	adds	r3, #80	; 0x50
 80036c2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	0cdb      	lsrs	r3, r3, #19
 80036d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3340      	adds	r3, #64	; 0x40
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d13c      	bne.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d039      	beq.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003716:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3354      	adds	r3, #84	; 0x54
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3354      	adds	r3, #84	; 0x54
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	e00b      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	2204      	movs	r2, #4
 8003764:	701a      	strb	r2, [r3, #0]
      break;
 8003766:	e001      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800376c:	bf00      	nop
  }
}
 800376e:	bf00      	nop
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d10b      	bne.n	80037c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f005 fd65 	bl	8009288 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d132      	bne.n	8003836 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d126      	bne.n	8003830 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d113      	bne.n	8003812 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f4:	d106      	bne.n	8003804 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 ff85 	bl	800670c <USB_InitFSLSPClkSel>
 8003802:	e011      	b.n	8003828 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f002 ff7e 	bl	800670c <USB_InitFSLSPClkSel>
 8003810:	e00a      	b.n	8003828 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d106      	bne.n	8003828 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003820:	461a      	mov	r2, r3
 8003822:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003826:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f005 fd57 	bl	80092dc <HAL_HCD_PortEnabled_Callback>
 800382e:	e002      	b.n	8003836 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 fd61 	bl	80092f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d103      	bne.n	8003848 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e12b      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fa9a 	bl	8000dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c0:	f001 f964 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a81      	ldr	r2, [pc, #516]	; (8003ad0 <HAL_I2C_Init+0x274>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d807      	bhi.n	80038e0 <HAL_I2C_Init+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_I2C_Init+0x278>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e006      	b.n	80038ee <HAL_I2C_Init+0x92>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a7d      	ldr	r2, [pc, #500]	; (8003ad8 <HAL_I2C_Init+0x27c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0e7      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a78      	ldr	r2, [pc, #480]	; (8003adc <HAL_I2C_Init+0x280>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a6a      	ldr	r2, [pc, #424]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <HAL_I2C_Init+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	e009      	b.n	8003944 <HAL_I2C_Init+0xe8>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a69      	ldr	r2, [pc, #420]	; (8003ae0 <HAL_I2C_Init+0x284>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	495c      	ldr	r1, [pc, #368]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d819      	bhi.n	8003998 <HAL_I2C_Init+0x13c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e59      	subs	r1, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003978:	400b      	ands	r3, r1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_I2C_Init+0x138>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e59      	subs	r1, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fbb1 f3f3 	udiv	r3, r1, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	e051      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003994:	2304      	movs	r3, #4
 8003996:	e04f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <HAL_I2C_Init+0x168>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <HAL_I2C_Init+0x18e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	0099      	lsls	r1, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Init+0x196>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e022      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_I2C_Init+0x1bc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1e58      	subs	r0, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	440b      	add	r3, r1
 8003a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6809      	ldr	r1, [r1, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6911      	ldr	r1, [r2, #16]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	000186a0 	.word	0x000186a0
 8003ad4:	001e847f 	.word	0x001e847f
 8003ad8:	003d08ff 	.word	0x003d08ff
 8003adc:	431bde83 	.word	0x431bde83
 8003ae0:	10624dd3 	.word	0x10624dd3

08003ae4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d129      	bne.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2224      	movs	r2, #36	; 0x24
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0210 	bic.w	r2, r2, #16
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d12a      	bne.n	8003bcc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2224      	movs	r2, #36	; 0x24
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b96:	89fb      	ldrh	r3, [r7, #14]
 8003b98:	f023 030f 	bic.w	r3, r3, #15
 8003b9c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	89fa      	ldrh	r2, [r7, #14]
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0bf      	b.n	8003d6e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f944 	bl	8000e90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c34:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_LTDC_Init+0x19c>)
 8003c50:	400b      	ands	r3, r1
 8003c52:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_LTDC_Init+0x19c>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68d9      	ldr	r1, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6919      	ldr	r1, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <HAL_LTDC_Init+0x19c>)
 8003cac:	400b      	ands	r3, r1
 8003cae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6919      	ldr	r1, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_LTDC_Init+0x19c>)
 8003cda:	400b      	ands	r3, r1
 8003cdc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6959      	ldr	r1, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0206 	orr.w	r2, r2, #6
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	f000f800 	.word	0xf000f800

08003d7c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d023      	beq.n	8003de6 <HAL_LTDC_IRQHandler+0x6a>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01e      	beq.n	8003de6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f86f 	bl	8003ec4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_LTDC_IRQHandler+0xbc>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01e      	beq.n	8003e38 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0202 	bic.w	r2, r2, #2
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2204      	movs	r2, #4
 8003e26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f846 	bl	8003ec4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01b      	beq.n	8003e7a <HAL_LTDC_IRQHandler+0xfe>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d016      	beq.n	8003e7a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f82f 	bl	8003ed8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_LTDC_IRQHandler+0x140>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0208 	bic.w	r2, r2, #8
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f818 	bl	8003eec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_LTDC_ConfigLayer+0x1a>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e02c      	b.n	8003f74 <HAL_LTDC_ConfigLayer+0x74>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2134      	movs	r1, #52	; 0x34
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	461d      	mov	r5, r3
 8003f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f811 	bl	8003f7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bdb0      	pop	{r4, r5, r7, pc}

08003f7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	4413      	add	r3, r2
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	4413      	add	r3, r2
 8003faa:	3384      	adds	r3, #132	; 0x84
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	01d2      	lsls	r2, r2, #7
 8003fb8:	440a      	add	r2, r1
 8003fba:	3284      	adds	r2, #132	; 0x84
 8003fbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fd2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fd4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	01db      	lsls	r3, r3, #7
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3384      	adds	r3, #132	; 0x84
 8003fe4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffa:	4413      	add	r3, r2
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	01db      	lsls	r3, r3, #7
 800400a:	4413      	add	r3, r2
 800400c:	3384      	adds	r3, #132	; 0x84
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4611      	mov	r1, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	01d2      	lsls	r2, r2, #7
 800401a:	440a      	add	r2, r1
 800401c:	3284      	adds	r2, #132	; 0x84
 800401e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004022:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004032:	4413      	add	r3, r2
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	01db      	lsls	r3, r3, #7
 8004040:	440b      	add	r3, r1
 8004042:	3384      	adds	r3, #132	; 0x84
 8004044:	4619      	mov	r1, r3
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	01db      	lsls	r3, r3, #7
 8004056:	4413      	add	r3, r2
 8004058:	3384      	adds	r3, #132	; 0x84
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	4611      	mov	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	01d2      	lsls	r2, r2, #7
 8004066:	440a      	add	r2, r1
 8004068:	3284      	adds	r2, #132	; 0x84
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	01db      	lsls	r3, r3, #7
 800407a:	4413      	add	r3, r2
 800407c:	3384      	adds	r3, #132	; 0x84
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	061b      	lsls	r3, r3, #24
 80040a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	4413      	add	r3, r2
 80040ae:	3384      	adds	r3, #132	; 0x84
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	4413      	add	r3, r2
 80040be:	3384      	adds	r3, #132	; 0x84
 80040c0:	461a      	mov	r2, r3
 80040c2:	2300      	movs	r3, #0
 80040c4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040cc:	461a      	mov	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	01db      	lsls	r3, r3, #7
 80040e0:	440b      	add	r3, r1
 80040e2:	3384      	adds	r3, #132	; 0x84
 80040e4:	4619      	mov	r1, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	4413      	add	r3, r2
 80040f8:	3384      	adds	r3, #132	; 0x84
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	4611      	mov	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	01d2      	lsls	r2, r2, #7
 8004106:	440a      	add	r2, r1
 8004108:	3284      	adds	r2, #132	; 0x84
 800410a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800410e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	01db      	lsls	r3, r3, #7
 800411a:	4413      	add	r3, r2
 800411c:	3384      	adds	r3, #132	; 0x84
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	01db      	lsls	r3, r3, #7
 8004130:	4413      	add	r3, r2
 8004132:	3384      	adds	r3, #132	; 0x84
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	6812      	ldr	r2, [r2, #0]
 800413a:	4611      	mov	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	01d2      	lsls	r2, r2, #7
 8004140:	440a      	add	r2, r1
 8004142:	3284      	adds	r2, #132	; 0x84
 8004144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004148:	f023 0307 	bic.w	r3, r3, #7
 800414c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	68f9      	ldr	r1, [r7, #12]
 8004158:	6809      	ldr	r1, [r1, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	01c9      	lsls	r1, r1, #7
 8004160:	4401      	add	r1, r0
 8004162:	3184      	adds	r1, #132	; 0x84
 8004164:	4313      	orrs	r3, r2
 8004166:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	01db      	lsls	r3, r3, #7
 8004172:	4413      	add	r3, r2
 8004174:	3384      	adds	r3, #132	; 0x84
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	01db      	lsls	r3, r3, #7
 8004182:	4413      	add	r3, r2
 8004184:	3384      	adds	r3, #132	; 0x84
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	01db      	lsls	r3, r3, #7
 8004196:	4413      	add	r3, r2
 8004198:	3384      	adds	r3, #132	; 0x84
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041aa:	2304      	movs	r3, #4
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e01b      	b.n	80041e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041b8:	2303      	movs	r3, #3
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	e014      	b.n	80041e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00b      	beq.n	80041de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d007      	beq.n	80041de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d003      	beq.n	80041de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041da:	2b07      	cmp	r3, #7
 80041dc:	d102      	bne.n	80041e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041de:	2302      	movs	r3, #2
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e001      	b.n	80041e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	01db      	lsls	r3, r3, #7
 80041f2:	4413      	add	r3, r2
 80041f4:	3384      	adds	r3, #132	; 0x84
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	4611      	mov	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	01d2      	lsls	r2, r2, #7
 8004202:	440a      	add	r2, r1
 8004204:	3284      	adds	r2, #132	; 0x84
 8004206:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800420a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1acb      	subs	r3, r1, r3
 8004222:	69f9      	ldr	r1, [r7, #28]
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6809      	ldr	r1, [r1, #0]
 800422e:	4608      	mov	r0, r1
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	01c9      	lsls	r1, r1, #7
 8004234:	4401      	add	r1, r0
 8004236:	3184      	adds	r1, #132	; 0x84
 8004238:	4313      	orrs	r3, r2
 800423a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	4413      	add	r3, r2
 8004248:	3384      	adds	r3, #132	; 0x84
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	4611      	mov	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	01d2      	lsls	r2, r2, #7
 8004256:	440a      	add	r2, r1
 8004258:	3284      	adds	r2, #132	; 0x84
 800425a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	3384      	adds	r3, #132	; 0x84
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	4413      	add	r3, r2
 8004286:	3384      	adds	r3, #132	; 0x84
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	4611      	mov	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	01d2      	lsls	r2, r2, #7
 8004294:	440a      	add	r2, r1
 8004296:	3284      	adds	r2, #132	; 0x84
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6013      	str	r3, [r2, #0]
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e267      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d075      	beq.n	80043b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ca:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d00c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d112      	bne.n	8004308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e2:	4b82      	ldr	r3, [pc, #520]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ee:	d10b      	bne.n	8004308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	4b7e      	ldr	r3, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05b      	beq.n	80043b4 <HAL_RCC_OscConfig+0x108>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d157      	bne.n	80043b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e242      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004310:	d106      	bne.n	8004320 <HAL_RCC_OscConfig+0x74>
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a75      	ldr	r2, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e01d      	b.n	800435c <HAL_RCC_OscConfig+0xb0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004328:	d10c      	bne.n	8004344 <HAL_RCC_OscConfig+0x98>
 800432a:	4b70      	ldr	r3, [pc, #448]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6f      	ldr	r2, [pc, #444]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6c      	ldr	r2, [pc, #432]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e00b      	b.n	800435c <HAL_RCC_OscConfig+0xb0>
 8004344:	4b69      	ldr	r3, [pc, #420]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a68      	ldr	r2, [pc, #416]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800434a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	4b66      	ldr	r3, [pc, #408]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a65      	ldr	r2, [pc, #404]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd f976 	bl	8001654 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fd f972 	bl	8001654 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e207      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	4b5b      	ldr	r3, [pc, #364]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0xc0>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438c:	f7fd f962 	bl	8001654 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004394:	f7fd f95e 	bl	8001654 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e1f3      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	4b51      	ldr	r3, [pc, #324]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0xe8>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d063      	beq.n	800448a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c2:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ce:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d11c      	bne.n	8004414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043da:	4b44      	ldr	r3, [pc, #272]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e6:	4b41      	ldr	r3, [pc, #260]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_RCC_OscConfig+0x152>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d001      	beq.n	80043fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e1c7      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4937      	ldr	r1, [pc, #220]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	e03a      	b.n	800448a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800441c:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x244>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd f917 	bl	8001654 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442a:	f7fd f913 	bl	8001654 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1a8      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4925      	ldr	r1, [pc, #148]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]
 800445c:	e015      	b.n	800448a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <HAL_RCC_OscConfig+0x244>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd f8f6 	bl	8001654 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800446c:	f7fd f8f2 	bl	8001654 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e187      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d036      	beq.n	8004504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x248>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd f8d6 	bl	8001654 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ac:	f7fd f8d2 	bl	8001654 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e167      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_OscConfig+0x240>)
 80044c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x200>
 80044ca:	e01b      	b.n	8004504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_RCC_OscConfig+0x248>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d2:	f7fd f8bf 	bl	8001654 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	e00e      	b.n	80044f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044da:	f7fd f8bb 	bl	8001654 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d907      	bls.n	80044f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e150      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	42470000 	.word	0x42470000
 80044f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ea      	bne.n	80044da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8097 	beq.w	8004640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b81      	ldr	r3, [pc, #516]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	4b7d      	ldr	r3, [pc, #500]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a7c      	ldr	r2, [pc, #496]	; (800471c <HAL_RCC_OscConfig+0x470>)
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
 8004532:	4b7a      	ldr	r3, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b77      	ldr	r3, [pc, #476]	; (8004720 <HAL_RCC_OscConfig+0x474>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d118      	bne.n	8004580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454e:	4b74      	ldr	r3, [pc, #464]	; (8004720 <HAL_RCC_OscConfig+0x474>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a73      	ldr	r2, [pc, #460]	; (8004720 <HAL_RCC_OscConfig+0x474>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455a:	f7fd f87b 	bl	8001654 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fd f877 	bl	8001654 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e10c      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_OscConfig+0x474>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x2ea>
 8004588:	4b64      	ldr	r3, [pc, #400]	; (800471c <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a63      	ldr	r2, [pc, #396]	; (800471c <HAL_RCC_OscConfig+0x470>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	e01c      	b.n	80045d0 <HAL_RCC_OscConfig+0x324>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b05      	cmp	r3, #5
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x30c>
 800459e:	4b5f      	ldr	r3, [pc, #380]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a5e      	ldr	r2, [pc, #376]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	4b5c      	ldr	r3, [pc, #368]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a5b      	ldr	r2, [pc, #364]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	e00b      	b.n	80045d0 <HAL_RCC_OscConfig+0x324>
 80045b8:	4b58      	ldr	r3, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a57      	ldr	r2, [pc, #348]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
 80045c4:	4b55      	ldr	r3, [pc, #340]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a54      	ldr	r2, [pc, #336]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045ca:	f023 0304 	bic.w	r3, r3, #4
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fd f83c 	bl	8001654 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fd f838 	bl	8001654 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e0cb      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0ee      	beq.n	80045e0 <HAL_RCC_OscConfig+0x334>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004604:	f7fd f826 	bl	8001654 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460c:	f7fd f822 	bl	8001654 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e0b5      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	4b3e      	ldr	r3, [pc, #248]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1ee      	bne.n	800460c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d105      	bne.n	8004640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004634:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	4a38      	ldr	r2, [pc, #224]	; (800471c <HAL_RCC_OscConfig+0x470>)
 800463a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a1 	beq.w	800478c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <HAL_RCC_OscConfig+0x470>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b08      	cmp	r3, #8
 8004654:	d05c      	beq.n	8004710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d141      	bne.n	80046e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0x478>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc fff6 	bl	8001654 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fc fff2 	bl	8001654 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e087      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	3b01      	subs	r3, #1
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_RCC_OscConfig+0x478>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fc ffcb 	bl	8001654 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c2:	f7fc ffc7 	bl	8001654 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e05c      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_RCC_OscConfig+0x470>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x416>
 80046e0:	e054      	b.n	800478c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_RCC_OscConfig+0x478>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fc ffb4 	bl	8001654 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc ffb0 	bl	8001654 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e045      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCC_OscConfig+0x470>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x444>
 800470e:	e03d      	b.n	800478c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e038      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x4ec>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d028      	beq.n	8004788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d121      	bne.n	8004788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d11a      	bne.n	8004788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004760:	4293      	cmp	r3, r2
 8004762:	d111      	bne.n	8004788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	3b01      	subs	r3, #1
 8004772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d107      	bne.n	8004788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0cc      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d90c      	bls.n	80047d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0b8      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d020      	beq.n	8004826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f0:	4b59      	ldr	r3, [pc, #356]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004808:	4b53      	ldr	r3, [pc, #332]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a52      	ldr	r2, [pc, #328]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b50      	ldr	r3, [pc, #320]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	494d      	ldr	r1, [pc, #308]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d044      	beq.n	80048bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d119      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e07f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d003      	beq.n	800485a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004856:	2b03      	cmp	r3, #3
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e067      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4934      	ldr	r1, [pc, #208]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800488c:	f7fc fee2 	bl	8001654 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fc fede 	bl	8001654 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e04f      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d20c      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b22      	ldr	r3, [pc, #136]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e032      	b.n	800494a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4916      	ldr	r1, [pc, #88]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004922:	f000 f821 	bl	8004968 <HAL_RCC_GetSysClockFreq>
 8004926:	4602      	mov	r2, r0
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	490a      	ldr	r1, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	5ccb      	ldrb	r3, [r1, r3]
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fc fd22 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00
 8004958:	40023800 	.word	0x40023800
 800495c:	080099ac 	.word	0x080099ac
 8004960:	20000000 	.word	0x20000000
 8004964:	20000004 	.word	0x20000004

08004968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b094      	sub	sp, #80	; 0x50
 800496e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	647b      	str	r3, [r7, #68]	; 0x44
 8004974:	2300      	movs	r3, #0
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	2300      	movs	r3, #0
 800497a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004980:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d00d      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x40>
 800498c:	2b08      	cmp	r3, #8
 800498e:	f200 80e1 	bhi.w	8004b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x34>
 8004996:	2b04      	cmp	r3, #4
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800499a:	e0db      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049a0:	e0db      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a2:	4b73      	ldr	r3, [pc, #460]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80049a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a6:	e0d8      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a8:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b2:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d063      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	2200      	movs	r2, #0
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
 80049d2:	2300      	movs	r3, #0
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
 80049d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0159      	lsls	r1, r3, #5
 80049e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ec:	0150      	lsls	r0, r2, #5
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4621      	mov	r1, r4
 80049f4:	1a51      	subs	r1, r2, r1
 80049f6:	6139      	str	r1, [r7, #16]
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb63 0301 	sbc.w	r3, r3, r1
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	018b      	lsls	r3, r1, #6
 8004a10:	4651      	mov	r1, sl
 8004a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a16:	4651      	mov	r1, sl
 8004a18:	018a      	lsls	r2, r1, #6
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a20:	4659      	mov	r1, fp
 8004a22:	eb63 0901 	sbc.w	r9, r3, r1
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	eb18 0303 	adds.w	r3, r8, r3
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	462b      	mov	r3, r5
 8004a48:	eb49 0303 	adc.w	r3, r9, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	024b      	lsls	r3, r1, #9
 8004a5e:	4621      	mov	r1, r4
 8004a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a64:	4621      	mov	r1, r4
 8004a66:	024a      	lsls	r2, r1, #9
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	2200      	movs	r2, #0
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a78:	f7fb fbb8 	bl	80001ec <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e058      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	4611      	mov	r1, r2
 8004a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	0159      	lsls	r1, r3, #5
 8004aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab2:	0150      	lsls	r0, r2, #5
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8004abe:	4649      	mov	r1, r9
 8004ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8004adc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	00eb      	lsls	r3, r5, #3
 8004aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aee:	00e2      	lsls	r2, r4, #3
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	4643      	mov	r3, r8
 8004af6:	18e3      	adds	r3, r4, r3
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	464b      	mov	r3, r9
 8004afc:	eb45 0303 	adc.w	r3, r5, r3
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	028b      	lsls	r3, r1, #10
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b18:	4621      	mov	r1, r4
 8004b1a:	028a      	lsls	r2, r1, #10
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	61fa      	str	r2, [r7, #28]
 8004b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2c:	f7fb fb5e 	bl	80001ec <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	3301      	adds	r3, #1
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b52:	e002      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3750      	adds	r7, #80	; 0x50
 8004b60:	46bd      	mov	sp, r7
 8004b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	00f42400 	.word	0x00f42400
 8004b70:	007a1200 	.word	0x007a1200

08004b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	20000000 	.word	0x20000000

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b90:	f7ff fff0 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	080099bc 	.word	0x080099bc

08004bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb8:	f7ff ffdc 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	0b5b      	lsrs	r3, r3, #13
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4903      	ldr	r1, [pc, #12]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	080099bc 	.word	0x080099bc

08004bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	220f      	movs	r2, #15
 8004bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0203 	and.w	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_RCC_GetClockConfig+0x5c>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCC_GetClockConfig+0x5c>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	08db      	lsrs	r3, r3, #3
 8004c16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c1e:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_RCC_GetClockConfig+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 020f 	and.w	r2, r3, #15
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40023c00 	.word	0x40023c00

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d075      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c74:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fceb 	bl	8001654 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c82:	f7fc fce7 	bl	8001654 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e189      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c94:	4b8a      	ldr	r3, [pc, #552]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	4981      	ldr	r1, [pc, #516]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01f      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ccc:	4b7c      	ldr	r3, [pc, #496]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	071b      	lsls	r3, r3, #28
 8004cec:	4974      	ldr	r1, [pc, #464]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cf4:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfa:	f023 021f 	bic.w	r2, r3, #31
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	496e      	ldr	r1, [pc, #440]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	019a      	lsls	r2, r3, #6
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	071b      	lsls	r3, r3, #28
 8004d2c:	4964      	ldr	r1, [pc, #400]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fc8b 	bl	8001654 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d42:	f7fc fc87 	bl	8001654 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e129      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d54:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d079      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d78:	4b52      	ldr	r3, [pc, #328]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7e:	f7fc fc69 	bl	8001654 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d86:	f7fc fc65 	bl	8001654 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e107      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d98:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da4:	d0ef      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004db2:	4b43      	ldr	r3, [pc, #268]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	0f1b      	lsrs	r3, r3, #28
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	019a      	lsls	r2, r3, #6
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	493b      	ldr	r1, [pc, #236]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	4934      	ldr	r1, [pc, #208]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01e      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e00:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	019a      	lsls	r2, r3, #6
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	061b      	lsls	r3, r3, #24
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	071b      	lsls	r3, r3, #28
 8004e20:	4927      	ldr	r1, [pc, #156]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e3e:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fc fc06 	bl	8001654 <HAL_GetTick>
 8004e48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e4c:	f7fc fc02 	bl	8001654 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e0a4      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6a:	d1ef      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 808b 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a0b      	ldr	r2, [pc, #44]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc fbd7 	bl	8001654 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea8:	e010      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fc fbd3 	bl	8001654 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d909      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e075      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ebc:	42470068 	.word	0x42470068
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	42470070 	.word	0x42470070
 8004ec8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ecc:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0e8      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02f      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d028      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f0c:	4a29      	ldr	r2, [pc, #164]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f12:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d114      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fb99 	bl	8001654 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fc fb95 	bl	8001654 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e035      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ee      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f54:	d10d      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f56:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6a:	4912      	ldr	r1, [pc, #72]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
 8004f70:	e005      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004fa4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40007000 	.word	0x40007000
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	42470e40 	.word	0x42470e40
 8004fbc:	424711e0 	.word	0x424711e0

08004fc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e025      	b.n	8005020 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7fc f9c5 	bl	8001378 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f000 ffdd 	bl	8005fc0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	461a      	mov	r2, r3
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	f001 f832 	bl	800607a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07b      	b.n	8005132 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d108      	bne.n	8005054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504a:	d009      	beq.n	8005060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	61da      	str	r2, [r3, #28]
 8005052:	e005      	b.n	8005060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc f838 	bl	80010f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005096:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	ea42 0103 	orr.w	r1, r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	f003 0104 	and.w	r1, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	f003 0210 	and.w	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e041      	b.n	80051d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fc f80d 	bl	8001180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fa95 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d001      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e04e      	b.n	800528e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a23      	ldr	r2, [pc, #140]	; (800529c <HAL_TIM_Base_Start_IT+0xc4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d022      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d01d      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d018      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00e      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x80>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d111      	bne.n	800527c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b06      	cmp	r3, #6
 8005268:	d010      	beq.n	800528c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e007      	b.n	800528c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800

080052b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0202 	mvn.w	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9b5 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9a7 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9b8 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0204 	mvn.w	r2, #4
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f98b 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f97d 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f98e 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b08      	cmp	r3, #8
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b08      	cmp	r3, #8
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0208 	mvn.w	r2, #8
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f961 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f953 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f964 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0210 	mvn.w	r2, #16
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2208      	movs	r2, #8
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f937 	bl	800566a <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f929 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f93a 	bl	800567e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10e      	bne.n	800543c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0201 	mvn.w	r2, #1
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb fbfc 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	2b80      	cmp	r3, #128	; 0x80
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fae0 	bl	8005a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8ff 	bl	8005692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0220 	mvn.w	r2, #32
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 faaa 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_ConfigClockSource+0x1c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e0b4      	b.n	800564e <HAL_TIM_ConfigClockSource+0x186>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551c:	d03e      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xd4>
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	f200 8087 	bhi.w	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	f000 8086 	beq.w	800563a <HAL_TIM_ConfigClockSource+0x172>
 800552e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005532:	d87f      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b70      	cmp	r3, #112	; 0x70
 8005536:	d01a      	beq.n	800556e <HAL_TIM_ConfigClockSource+0xa6>
 8005538:	2b70      	cmp	r3, #112	; 0x70
 800553a:	d87b      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b60      	cmp	r3, #96	; 0x60
 800553e:	d050      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005540:	2b60      	cmp	r3, #96	; 0x60
 8005542:	d877      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b50      	cmp	r3, #80	; 0x50
 8005546:	d03c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005548:	2b50      	cmp	r3, #80	; 0x50
 800554a:	d873      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d058      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x13a>
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d86f      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d064      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x15a>
 8005558:	2b30      	cmp	r3, #48	; 0x30
 800555a:	d86b      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d060      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x15a>
 8005560:	2b20      	cmp	r3, #32
 8005562:	d867      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05c      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x15a>
 8005568:	2b10      	cmp	r3, #16
 800556a:	d05a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x15a>
 800556c:	e062      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6899      	ldr	r1, [r3, #8]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f000 f9ad 	bl	80058dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	609a      	str	r2, [r3, #8]
      break;
 800559a:	e04f      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6899      	ldr	r1, [r3, #8]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f000 f996 	bl	80058dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055be:	609a      	str	r2, [r3, #8]
      break;
 80055c0:	e03c      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 f90a 	bl	80057e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2150      	movs	r1, #80	; 0x50
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f963 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e02c      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 f929 	bl	8005846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2160      	movs	r1, #96	; 0x60
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f953 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005600:	e01c      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 f8ea 	bl	80057e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f943 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005620:	e00c      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f000 f93a 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 8005632:	e003      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e000      	b.n	800563c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800563a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3c      	ldr	r2, [pc, #240]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3a      	ldr	r2, [pc, #232]	; (80057cc <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d027      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d023      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <TIM_Base_SetConfig+0x124>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d017      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <TIM_Base_SetConfig+0x128>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <TIM_Base_SetConfig+0x12c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00f      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <TIM_Base_SetConfig+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00b      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <TIM_Base_SetConfig+0x134>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <TIM_Base_SetConfig+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a23      	ldr	r2, [pc, #140]	; (80057e4 <TIM_Base_SetConfig+0x13c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d108      	bne.n	800576c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <TIM_Base_SetConfig+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800
 80057dc:	40001800 	.word	0x40001800
 80057e0:	40001c00 	.word	0x40001c00
 80057e4:	40002000 	.word	0x40002000

080057e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0210 	bic.w	r2, r3, #16
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f043 0307 	orr.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	431a      	orrs	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e05a      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d01d      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e03f      	b.n	8005ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fbae 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f829 	bl	8005ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005adc:	b0c0      	sub	sp, #256	; 0x100
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	68d9      	ldr	r1, [r3, #12]
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	ea40 0301 	orr.w	r3, r0, r1
 8005b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b30:	f021 010c 	bic.w	r1, r1, #12
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	6999      	ldr	r1, [r3, #24]
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	ea40 0301 	orr.w	r3, r0, r1
 8005b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b8f      	ldr	r3, [pc, #572]	; (8005da4 <UART_SetConfig+0x2cc>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d005      	beq.n	8005b78 <UART_SetConfig+0xa0>
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b8d      	ldr	r3, [pc, #564]	; (8005da8 <UART_SetConfig+0x2d0>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d104      	bne.n	8005b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7ff f81c 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b80:	e003      	b.n	8005b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b82:	f7ff f803 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8005b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b94:	f040 810c 	bne.w	8005db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bba:	4621      	mov	r1, r4
 8005bbc:	eb12 0801 	adds.w	r8, r2, r1
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	eb43 0901 	adc.w	r9, r3, r1
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bda:	4690      	mov	r8, r2
 8005bdc:	4699      	mov	r9, r3
 8005bde:	4623      	mov	r3, r4
 8005be0:	eb18 0303 	adds.w	r3, r8, r3
 8005be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be8:	462b      	mov	r3, r5
 8005bea:	eb49 0303 	adc.w	r3, r9, r3
 8005bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c06:	460b      	mov	r3, r1
 8005c08:	18db      	adds	r3, r3, r3
 8005c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	eb42 0303 	adc.w	r3, r2, r3
 8005c12:	657b      	str	r3, [r7, #84]	; 0x54
 8005c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c1c:	f7fa fae6 	bl	80001ec <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4b61      	ldr	r3, [pc, #388]	; (8005dac <UART_SetConfig+0x2d4>)
 8005c26:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	011c      	lsls	r4, r3, #4
 8005c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c50:	4641      	mov	r1, r8
 8005c52:	eb12 0a01 	adds.w	sl, r2, r1
 8005c56:	4649      	mov	r1, r9
 8005c58:	eb43 0b01 	adc.w	fp, r3, r1
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c70:	4692      	mov	sl, r2
 8005c72:	469b      	mov	fp, r3
 8005c74:	4643      	mov	r3, r8
 8005c76:	eb1a 0303 	adds.w	r3, sl, r3
 8005c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	eb4b 0303 	adc.w	r3, fp, r3
 8005c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	18db      	adds	r3, r3, r3
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	eb42 0303 	adc.w	r3, r2, r3
 8005ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8005caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cb2:	f7fa fa9b 	bl	80001ec <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <UART_SetConfig+0x2d4>)
 8005cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2264      	movs	r2, #100	; 0x64
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	1acb      	subs	r3, r1, r3
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <UART_SetConfig+0x2d4>)
 8005cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce0:	441c      	add	r4, r3
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d04:	4641      	mov	r1, r8
 8005d06:	1851      	adds	r1, r2, r1
 8005d08:	6339      	str	r1, [r7, #48]	; 0x30
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	414b      	adcs	r3, r1
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d1c:	4659      	mov	r1, fp
 8005d1e:	00cb      	lsls	r3, r1, #3
 8005d20:	4651      	mov	r1, sl
 8005d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d26:	4651      	mov	r1, sl
 8005d28:	00ca      	lsls	r2, r1, #3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4642      	mov	r2, r8
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d38:	464b      	mov	r3, r9
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d58:	460b      	mov	r3, r1
 8005d5a:	18db      	adds	r3, r3, r3
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	4613      	mov	r3, r2
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d6e:	f7fa fa3d 	bl	80001ec <__aeabi_uldivmod>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <UART_SetConfig+0x2d4>)
 8005d78:	fba3 1302 	umull	r1, r3, r3, r2
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	2164      	movs	r1, #100	; 0x64
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	3332      	adds	r3, #50	; 0x32
 8005d8a:	4a08      	ldr	r2, [pc, #32]	; (8005dac <UART_SetConfig+0x2d4>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	f003 0207 	and.w	r2, r3, #7
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4422      	add	r2, r4
 8005d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005da0:	e105      	b.n	8005fae <UART_SetConfig+0x4d6>
 8005da2:	bf00      	nop
 8005da4:	40011000 	.word	0x40011000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	1891      	adds	r1, r2, r2
 8005dc8:	6239      	str	r1, [r7, #32]
 8005dca:	415b      	adcs	r3, r3
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	1854      	adds	r4, r2, r1
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	eb43 0501 	adc.w	r5, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	00eb      	lsls	r3, r5, #3
 8005de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dea:	00e2      	lsls	r2, r4, #3
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	4643      	mov	r3, r8
 8005df2:	18e3      	adds	r3, r4, r3
 8005df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df8:	464b      	mov	r3, r9
 8005dfa:	eb45 0303 	adc.w	r3, r5, r3
 8005dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e1e:	4629      	mov	r1, r5
 8005e20:	008b      	lsls	r3, r1, #2
 8005e22:	4621      	mov	r1, r4
 8005e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e28:	4621      	mov	r1, r4
 8005e2a:	008a      	lsls	r2, r1, #2
 8005e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e30:	f7fa f9dc 	bl	80001ec <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4b60      	ldr	r3, [pc, #384]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	011c      	lsls	r4, r3, #4
 8005e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	1891      	adds	r1, r2, r2
 8005e5a:	61b9      	str	r1, [r7, #24]
 8005e5c:	415b      	adcs	r3, r3
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e64:	4641      	mov	r1, r8
 8005e66:	1851      	adds	r1, r2, r1
 8005e68:	6139      	str	r1, [r7, #16]
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	414b      	adcs	r3, r1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	00cb      	lsls	r3, r1, #3
 8005e80:	4651      	mov	r1, sl
 8005e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e86:	4651      	mov	r1, sl
 8005e88:	00ca      	lsls	r2, r1, #3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4642      	mov	r2, r8
 8005e92:	189b      	adds	r3, r3, r2
 8005e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e98:	464b      	mov	r3, r9
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	008b      	lsls	r3, r1, #2
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	008a      	lsls	r2, r1, #2
 8005eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ece:	f7fa f98d 	bl	80001ec <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	2164      	movs	r1, #100	; 0x64
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	3332      	adds	r3, #50	; 0x32
 8005eea:	4a34      	ldr	r2, [pc, #208]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef6:	441c      	add	r4, r3
 8005ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efc:	2200      	movs	r2, #0
 8005efe:	673b      	str	r3, [r7, #112]	; 0x70
 8005f00:	677a      	str	r2, [r7, #116]	; 0x74
 8005f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f06:	4642      	mov	r2, r8
 8005f08:	464b      	mov	r3, r9
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f16:	4641      	mov	r1, r8
 8005f18:	1851      	adds	r1, r2, r1
 8005f1a:	6039      	str	r1, [r7, #0]
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	414b      	adcs	r3, r1
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f2e:	4659      	mov	r1, fp
 8005f30:	00cb      	lsls	r3, r1, #3
 8005f32:	4651      	mov	r1, sl
 8005f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f38:	4651      	mov	r1, sl
 8005f3a:	00ca      	lsls	r2, r1, #3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	4642      	mov	r2, r8
 8005f44:	189b      	adds	r3, r3, r2
 8005f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f48:	464b      	mov	r3, r9
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	008b      	lsls	r3, r1, #2
 8005f6e:	4641      	mov	r1, r8
 8005f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f74:	4641      	mov	r1, r8
 8005f76:	008a      	lsls	r2, r1, #2
 8005f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f7c:	f7fa f936 	bl	80001ec <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005f86:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	2164      	movs	r1, #100	; 0x64
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	3332      	adds	r3, #50	; 0x32
 8005f98:	4a08      	ldr	r2, [pc, #32]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4422      	add	r2, r4
 8005fac:	609a      	str	r2, [r3, #8]
}
 8005fae:	bf00      	nop
 8005fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	51eb851f 	.word	0x51eb851f

08005fc0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d123      	bne.n	800601a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	6851      	ldr	r1, [r2, #4]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6892      	ldr	r2, [r2, #8]
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	68d2      	ldr	r2, [r2, #12]
 8005fec:	4311      	orrs	r1, r2
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	6912      	ldr	r2, [r2, #16]
 8005ff2:	4311      	orrs	r1, r2
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	6952      	ldr	r2, [r2, #20]
 8005ff8:	4311      	orrs	r1, r2
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	6992      	ldr	r2, [r2, #24]
 8005ffe:	4311      	orrs	r1, r2
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	69d2      	ldr	r2, [r2, #28]
 8006004:	4311      	orrs	r1, r2
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	6a12      	ldr	r2, [r2, #32]
 800600a:	4311      	orrs	r1, r2
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006010:	430a      	orrs	r2, r1
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e028      	b.n	800606c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	69d9      	ldr	r1, [r3, #28]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4319      	orrs	r1, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	430b      	orrs	r3, r1
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	6851      	ldr	r1, [r2, #4]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	6892      	ldr	r2, [r2, #8]
 800604c:	4311      	orrs	r1, r2
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	68d2      	ldr	r2, [r2, #12]
 8006052:	4311      	orrs	r1, r2
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	6912      	ldr	r2, [r2, #16]
 8006058:	4311      	orrs	r1, r2
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	6952      	ldr	r2, [r2, #20]
 800605e:	4311      	orrs	r1, r2
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	6992      	ldr	r2, [r2, #24]
 8006064:	430a      	orrs	r2, r1
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d128      	bne.n	80060de <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1e59      	subs	r1, r3, #1
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4319      	orrs	r1, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	4319      	orrs	r1, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	4319      	orrs	r1, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	3b01      	subs	r3, #1
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	4319      	orrs	r1, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	051b      	lsls	r3, r3, #20
 80060ca:	4319      	orrs	r1, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	061b      	lsls	r3, r3, #24
 80060d4:	430b      	orrs	r3, r1
 80060d6:	431a      	orrs	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	e02f      	b.n	800613e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	68d2      	ldr	r2, [r2, #12]
 80060ee:	3a01      	subs	r2, #1
 80060f0:	0311      	lsls	r1, r2, #12
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	6952      	ldr	r2, [r2, #20]
 80060f6:	3a01      	subs	r2, #1
 80060f8:	0512      	lsls	r2, r2, #20
 80060fa:	430a      	orrs	r2, r1
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	1e59      	subs	r1, r3, #1
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	3b01      	subs	r3, #1
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4319      	orrs	r1, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	3b01      	subs	r3, #1
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	4319      	orrs	r1, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	4319      	orrs	r1, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	3b01      	subs	r3, #1
 8006134:	061b      	lsls	r3, r3, #24
 8006136:	430b      	orrs	r3, r1
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800614c:	b084      	sub	sp, #16
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	f107 001c 	add.w	r0, r7, #28
 800615a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2b01      	cmp	r3, #1
 8006162:	d122      	bne.n	80061aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	2b01      	cmp	r3, #1
 8006190:	d105      	bne.n	800619e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9c0 	bl	8006524 <USB_CoreReset>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e01a      	b.n	80061e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f9b4 	bl	8006524 <USB_CoreReset>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
 80061d2:	e005      	b.n	80061e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10b      	bne.n	80061fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f043 0206 	orr.w	r2, r3, #6
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f043 0220 	orr.w	r2, r3, #32
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800620a:	b004      	add	sp, #16
 800620c:	4770      	bx	lr

0800620e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f043 0201 	orr.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 0201 	bic.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d115      	bne.n	80062a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006280:	2001      	movs	r0, #1
 8006282:	f7fb f9f3 	bl	800166c <HAL_Delay>
      ms++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f93a 	bl	8006506 <USB_GetMode>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d01e      	beq.n	80062d6 <USB_SetCurrentMode+0x84>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b31      	cmp	r3, #49	; 0x31
 800629c:	d9f0      	bls.n	8006280 <USB_SetCurrentMode+0x2e>
 800629e:	e01a      	b.n	80062d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d115      	bne.n	80062d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062b2:	2001      	movs	r0, #1
 80062b4:	f7fb f9da 	bl	800166c <HAL_Delay>
      ms++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f921 	bl	8006506 <USB_GetMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <USB_SetCurrentMode+0x84>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b31      	cmp	r3, #49	; 0x31
 80062ce:	d9f0      	bls.n	80062b2 <USB_SetCurrentMode+0x60>
 80062d0:	e001      	b.n	80062d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e005      	b.n	80062e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b32      	cmp	r3, #50	; 0x32
 80062da:	d101      	bne.n	80062e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <USB_FlushTxFifo+0x64>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e01b      	b.n	8006344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	daf2      	bge.n	80062fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	019b      	lsls	r3, r3, #6
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <USB_FlushTxFifo+0x64>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e006      	b.n	8006344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b20      	cmp	r3, #32
 8006340:	d0f0      	beq.n	8006324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	00030d40 	.word	0x00030d40

08006354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <USB_FlushRxFifo+0x5c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e018      	b.n	80063a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	daf2      	bge.n	8006360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2210      	movs	r2, #16
 8006382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <USB_FlushRxFifo+0x5c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e006      	b.n	80063a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d0f0      	beq.n	8006384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	00030d40 	.word	0x00030d40

080063b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b089      	sub	sp, #36	; 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	460b      	mov	r3, r1
 80063c4:	71fb      	strb	r3, [r7, #7]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d123      	bne.n	8006422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063da:	88bb      	ldrh	r3, [r7, #4]
 80063dc:	3303      	adds	r3, #3
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e018      	b.n	800641a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	031a      	lsls	r2, r3, #12
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f4:	461a      	mov	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	3301      	adds	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3301      	adds	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	3301      	adds	r3, #1
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	429a      	cmp	r2, r3
 8006420:	d3e2      	bcc.n	80063e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3724      	adds	r7, #36	; 0x24
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006430:	b480      	push	{r7}
 8006432:	b08b      	sub	sp, #44	; 0x2c
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	4613      	mov	r3, r2
 800643c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	b29b      	uxth	r3, r3
 800644c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006456:	2300      	movs	r3, #0
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	e014      	b.n	8006486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	601a      	str	r2, [r3, #0]
    pDest++;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	3301      	adds	r3, #1
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	3301      	adds	r3, #1
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	3301      	adds	r3, #1
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	3301      	adds	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	3301      	adds	r3, #1
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	429a      	cmp	r2, r3
 800648c:	d3e6      	bcc.n	800645c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800648e:	8bfb      	ldrh	r3, [r7, #30]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01e      	beq.n	80064d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649e:	461a      	mov	r2, r3
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	701a      	strb	r2, [r3, #0]
      i++;
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	3301      	adds	r3, #1
 80064be:	623b      	str	r3, [r7, #32]
      pDest++;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	3301      	adds	r3, #1
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064c6:	8bfb      	ldrh	r3, [r7, #30]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064cc:	8bfb      	ldrh	r3, [r7, #30]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1ea      	bne.n	80064a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	372c      	adds	r7, #44	; 0x2c
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a13      	ldr	r2, [pc, #76]	; (8006588 <USB_CoreReset+0x64>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e01b      	b.n	800657a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	daf2      	bge.n	8006530 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f043 0201 	orr.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <USB_CoreReset+0x64>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e006      	b.n	800657a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d0f0      	beq.n	800655a <USB_CoreReset+0x36>

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	00030d40 	.word	0x00030d40

0800658c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800658c:	b084      	sub	sp, #16
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800659a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d018      	beq.n	8006614 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10a      	bne.n	80065fe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e014      	b.n	8006628 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800660c:	f023 0304 	bic.w	r3, r3, #4
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e009      	b.n	8006628 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006622:	f023 0304 	bic.w	r3, r3, #4
 8006626:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006628:	2110      	movs	r1, #16
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fe5e 	bl	80062ec <USB_FlushTxFifo>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fe8a 	bl	8006354 <USB_FlushRxFifo>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	e015      	b.n	800667c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	461a      	mov	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	d3e5      	bcc.n	8006650 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f04f 32ff 	mov.w	r2, #4294967295
 8006690:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <USB_HostInit+0x16c>)
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <USB_HostInit+0x170>)
 80066b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066b4:	e009      	b.n	80066ca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2280      	movs	r2, #128	; 0x80
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <USB_HostInit+0x174>)
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <USB_HostInit+0x178>)
 80066c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	4b09      	ldr	r3, [pc, #36]	; (8006708 <USB_HostInit+0x17c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f4:	b004      	add	sp, #16
 80066f6:	4770      	bx	lr
 80066f8:	01000200 	.word	0x01000200
 80066fc:	00e00300 	.word	0x00e00300
 8006700:	00600080 	.word	0x00600080
 8006704:	004000e0 	.word	0x004000e0
 8006708:	a3200008 	.word	0xa3200008

0800670c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006744:	4313      	orrs	r3, r2
 8006746:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006754:	461a      	mov	r2, r3
 8006756:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	e009      	b.n	8006772 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d106      	bne.n	8006772 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676a:	461a      	mov	r2, r3
 800676c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006770:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067b0:	2064      	movs	r0, #100	; 0x64
 80067b2:	f7fa ff5b 	bl	800166c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067c4:	200a      	movs	r0, #10
 80067c6:	f7fa ff51 	bl	800166c <HAL_Delay>

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <USB_DriveVbus+0x44>
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d106      	bne.n	8006818 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006816:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006822:	d109      	bne.n	8006838 <USB_DriveVbus+0x64>
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006836:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	0c5b      	lsrs	r3, r3, #17
 8006864:	f003 0303 	and.w	r3, r3, #3
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	b29b      	uxth	r3, r3
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	70fb      	strb	r3, [r7, #3]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70bb      	strb	r3, [r7, #2]
 80068ae:	4613      	mov	r3, r2
 80068b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	461a      	mov	r2, r3
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d87e      	bhi.n	80069d4 <USB_HC_Init+0x13c>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <USB_HC_Init+0x44>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	08006997 	.word	0x08006997
 80068e4:	080068ed 	.word	0x080068ed
 80068e8:	08006959 	.word	0x08006959
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f8:	461a      	mov	r2, r3
 80068fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80068fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006900:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006904:	2b00      	cmp	r3, #0
 8006906:	da10      	bge.n	800692a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	440a      	add	r2, r1
 800691e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006926:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006928:	e057      	b.n	80069da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d051      	beq.n	80069da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	440a      	add	r2, r1
 800694c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006950:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006954:	60d3      	str	r3, [r2, #12]
      break;
 8006956:	e040      	b.n	80069da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	f240 639d 	movw	r3, #1693	; 0x69d
 800696a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800696c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006970:	2b00      	cmp	r3, #0
 8006972:	da34      	bge.n	80069de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	440a      	add	r2, r1
 800698a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800698e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006992:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006994:	e023      	b.n	80069de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	f240 2325 	movw	r3, #549	; 0x225
 80069a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da17      	bge.n	80069e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069d2:	e006      	b.n	80069e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	77fb      	strb	r3, [r7, #31]
      break;
 80069d8:	e004      	b.n	80069e4 <USB_HC_Init+0x14c>
      break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <USB_HC_Init+0x14c>
      break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <USB_HC_Init+0x14c>
      break;
 80069e2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	2101      	movs	r1, #1
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	6939      	ldr	r1, [r7, #16]
 8006a1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da03      	bge.n	8006a3e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e001      	b.n	8006a42 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff feff 	bl	8006846 <USB_GetHostSpeed>
 8006a48:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d106      	bne.n	8006a60 <USB_HC_Init+0x1c8>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d003      	beq.n	8006a60 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e001      	b.n	8006a64 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a64:	787b      	ldrb	r3, [r7, #1]
 8006a66:	059b      	lsls	r3, r3, #22
 8006a68:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a6c:	78bb      	ldrb	r3, [r7, #2]
 8006a6e:	02db      	lsls	r3, r3, #11
 8006a70:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a74:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a7a:	049b      	lsls	r3, r3, #18
 8006a7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	0159      	lsls	r1, r3, #5
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	440b      	add	r3, r1
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006aa0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d003      	beq.n	8006ab2 <USB_HC_Init+0x21a>
 8006aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d10f      	bne.n	8006ad2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	; 0x30
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02d      	beq.n	8006b62 <USB_HC_StartXfer+0x86>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d129      	bne.n	8006b62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d117      	bne.n	8006b44 <USB_HC_StartXfer+0x68>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	79db      	ldrb	r3, [r3, #7]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <USB_HC_StartXfer+0x48>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	79db      	ldrb	r3, [r3, #7]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d10f      	bne.n	8006b44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	6a3a      	ldr	r2, [r7, #32]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <USB_HC_StartXfer+0x86>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d107      	bne.n	8006b62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fa0f 	bl	8006f7c <USB_DoPing>
      return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e0f8      	b.n	8006d54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d018      	beq.n	8006b9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	8912      	ldrh	r2, [r2, #8]
 8006b72:	4413      	add	r3, r2
 8006b74:	3b01      	subs	r3, #1
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	8912      	ldrh	r2, [r2, #8]
 8006b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b82:	8b7b      	ldrh	r3, [r7, #26]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d90b      	bls.n	8006ba0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b88:	8b7b      	ldrh	r3, [r7, #26]
 8006b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	8912      	ldrh	r2, [r2, #8]
 8006b92:	fb03 f202 	mul.w	r2, r3, r2
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e001      	b.n	8006ba0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	8912      	ldrh	r2, [r2, #8]
 8006bae:	fb03 f202 	mul.w	r2, r3, r2
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	611a      	str	r2, [r3, #16]
 8006bb6:	e003      	b.n	8006bc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bca:	04d9      	lsls	r1, r3, #19
 8006bcc:	4b63      	ldr	r3, [pc, #396]	; (8006d5c <USB_HC_StartXfer+0x280>)
 8006bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7a9b      	ldrb	r3, [r3, #10]
 8006bd6:	075b      	lsls	r3, r3, #29
 8006bd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	6a39      	ldr	r1, [r7, #32]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c02:	460a      	mov	r2, r1
 8006c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	6a3a      	ldr	r2, [r7, #32]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	7e7b      	ldrb	r3, [r7, #25]
 8006c4e:	075b      	lsls	r3, r3, #29
 8006c50:	69f9      	ldr	r1, [r7, #28]
 8006c52:	0148      	lsls	r0, r1, #5
 8006c54:	6a39      	ldr	r1, [r7, #32]
 8006c56:	4401      	add	r1, r0
 8006c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	78db      	ldrb	r3, [r3, #3]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	e003      	b.n	8006c92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e04e      	b.n	8006d54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	78db      	ldrb	r3, [r3, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d149      	bne.n	8006d52 <USB_HC_StartXfer+0x276>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d045      	beq.n	8006d52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	79db      	ldrb	r3, [r3, #7]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d830      	bhi.n	8006d30 <USB_HC_StartXfer+0x254>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USB_HC_StartXfer+0x1f8>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006ce5 	.word	0x08006ce5
 8006ce0:	08006d09 	.word	0x08006d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	3303      	adds	r3, #3
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cee:	8afa      	ldrh	r2, [r7, #22]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d91c      	bls.n	8006d34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f043 0220 	orr.w	r2, r3, #32
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d06:	e015      	b.n	8006d34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	3303      	adds	r3, #3
 8006d0e:	089b      	lsrs	r3, r3, #2
 8006d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d12:	8afa      	ldrh	r2, [r7, #22]
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d90a      	bls.n	8006d38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d2e:	e003      	b.n	8006d38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <USB_HC_StartXfer+0x25e>
        break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <USB_HC_StartXfer+0x25e>
        break;
 8006d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	68d9      	ldr	r1, [r3, #12]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	785a      	ldrb	r2, [r3, #1]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2000      	movs	r0, #0
 8006d4a:	9000      	str	r0, [sp, #0]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff fb31 	bl	80063b4 <USB_WritePacket>
  }

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3728      	adds	r7, #40	; 0x28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	1ff80000 	.word	0x1ff80000

08006d60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	b29b      	uxth	r3, r3
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b089      	sub	sp, #36	; 0x24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	0c9b      	lsrs	r3, r3, #18
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	0fdb      	lsrs	r3, r3, #31
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d104      	bne.n	8006ddc <USB_HC_Halt+0x5a>
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e0c8      	b.n	8006f6e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <USB_HC_Halt+0x66>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d163      	bne.n	8006eb0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 80ab 	bne.w	8006f6c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d133      	bne.n	8006e8a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e6e:	d81d      	bhi.n	8006eac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e86:	d0ec      	beq.n	8006e62 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e88:	e070      	b.n	8006f6c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ea8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eaa:	e05f      	b.n	8006f6c <USB_HC_Halt+0x1ea>
            break;
 8006eac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eae:	e05d      	b.n	8006f6c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ece:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d133      	bne.n	8006f48 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006efe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2c:	d81d      	bhi.n	8006f6a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f44:	d0ec      	beq.n	8006f20 <USB_HC_Halt+0x19e>
 8006f46:	e011      	b.n	8006f6c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e000      	b.n	8006f6c <USB_HC_Halt+0x1ea>
          break;
 8006f6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	; 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f90:	2301      	movs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	04da      	lsls	r2, r3, #19
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <USB_DoPing+0x74>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	1ff80000 	.word	0x1ff80000

08006ff4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f911 	bl	8006230 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800700e:	2110      	movs	r1, #16
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff f96b 	bl	80062ec <USB_FlushTxFifo>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff f997 	bl	8006354 <USB_FlushRxFifo>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e01f      	b.n	8007076 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4413      	add	r3, r2
 800703e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800705c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	3301      	adds	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b0f      	cmp	r3, #15
 800707a:	d9dc      	bls.n	8007036 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800707c:	2300      	movs	r3, #0
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	e034      	b.n	80070ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007098:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	461a      	mov	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3301      	adds	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c8:	d80c      	bhi.n	80070e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e0:	d0ec      	beq.n	80070bc <USB_StopHost+0xc8>
 80070e2:	e000      	b.n	80070e6 <USB_StopHost+0xf2>
        break;
 80070e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d9c7      	bls.n	8007082 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f8:	461a      	mov	r2, r3
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295
 80070fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f880 	bl	800620e <USB_EnableGlobalInt>

  return ret;
 800710e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af04      	add	r7, sp, #16
 800711e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007120:	2301      	movs	r3, #1
 8007122:	2202      	movs	r2, #2
 8007124:	2102      	movs	r1, #2
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc66 	bl	80079f8 <USBH_FindInterface>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2bff      	cmp	r3, #255	; 0xff
 8007134:	d002      	beq.n	800713c <USBH_CDC_InterfaceInit+0x24>
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d901      	bls.n	8007140 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800713c:	2302      	movs	r3, #2
 800713e:	e13d      	b.n	80073bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fc3b 	bl	80079c0 <USBH_SelectInterface>
 800714a:	4603      	mov	r3, r0
 800714c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	e131      	b.n	80073bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800715e:	2050      	movs	r0, #80	; 0x50
 8007160:	f002 fb00 	bl	8009764 <malloc>
 8007164:	4603      	mov	r3, r0
 8007166:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	e11f      	b.n	80073bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800717c:	2250      	movs	r2, #80	; 0x50
 800717e:	2100      	movs	r1, #0
 8007180:	68b8      	ldr	r0, [r7, #8]
 8007182:	f002 faff 	bl	8009784 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	211a      	movs	r1, #26
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b25b      	sxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	da15      	bge.n	80071ca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	211a      	movs	r1, #26
 80071a4:	fb01 f303 	mul.w	r3, r1, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071ae:	781a      	ldrb	r2, [r3, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	211a      	movs	r1, #26
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	4413      	add	r3, r2
 80071c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071c4:	881a      	ldrh	r2, [r3, #0]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 ff2c 	bl	800902e <USBH_AllocPipe>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	7819      	ldrb	r1, [r3, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	7858      	ldrb	r0, [r3, #1]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	8952      	ldrh	r2, [r2, #10]
 80071f6:	9202      	str	r2, [sp, #8]
 80071f8:	2203      	movs	r2, #3
 80071fa:	9201      	str	r2, [sp, #4]
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	4623      	mov	r3, r4
 8007200:	4602      	mov	r2, r0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fee4 	bl	8008fd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f002 f9f9 	bl	8009608 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	210a      	movs	r1, #10
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fbeb 	bl	80079f8 <USBH_FindInterface>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2bff      	cmp	r3, #255	; 0xff
 800722a:	d002      	beq.n	8007232 <USBH_CDC_InterfaceInit+0x11a>
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d901      	bls.n	8007236 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e0c2      	b.n	80073bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	211a      	movs	r1, #26
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	4413      	add	r3, r2
 8007242:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b25b      	sxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	da16      	bge.n	800727c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	211a      	movs	r1, #26
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	211a      	movs	r1, #26
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	4413      	add	r3, r2
 8007270:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007274:	881a      	ldrh	r2, [r3, #0]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	835a      	strh	r2, [r3, #26]
 800727a:	e015      	b.n	80072a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	211a      	movs	r1, #26
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	4413      	add	r3, r2
 8007288:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800728c:	781a      	ldrb	r2, [r3, #0]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	211a      	movs	r1, #26
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	4413      	add	r3, r2
 800729e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	211a      	movs	r1, #26
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da16      	bge.n	80072ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	211a      	movs	r1, #26
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	211a      	movs	r1, #26
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	835a      	strh	r2, [r3, #26]
 80072ec:	e015      	b.n	800731a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	211a      	movs	r1, #26
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072fe:	781a      	ldrb	r2, [r3, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	211a      	movs	r1, #26
 800730a:	fb01 f303 	mul.w	r3, r1, r3
 800730e:	4413      	add	r3, r2
 8007310:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007314:	881a      	ldrh	r2, [r3, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	7b9b      	ldrb	r3, [r3, #14]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fe84 	bl	800902e <USBH_AllocPipe>
 8007326:	4603      	mov	r3, r0
 8007328:	461a      	mov	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	7bdb      	ldrb	r3, [r3, #15]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 fe7a 	bl	800902e <USBH_AllocPipe>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	7b59      	ldrb	r1, [r3, #13]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	7b98      	ldrb	r0, [r3, #14]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	8b12      	ldrh	r2, [r2, #24]
 800735a:	9202      	str	r2, [sp, #8]
 800735c:	2202      	movs	r2, #2
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4623      	mov	r3, r4
 8007364:	4602      	mov	r2, r0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 fe32 	bl	8008fd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	7b19      	ldrb	r1, [r3, #12]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	7bd8      	ldrb	r0, [r3, #15]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	8b52      	ldrh	r2, [r2, #26]
 8007384:	9202      	str	r2, [sp, #8]
 8007386:	2202      	movs	r2, #2
 8007388:	9201      	str	r2, [sp, #4]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	4623      	mov	r3, r4
 800738e:	4602      	mov	r2, r0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe1d 	bl	8008fd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	7b5b      	ldrb	r3, [r3, #13]
 80073a2:	2200      	movs	r2, #0
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f002 f92e 	bl	8009608 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	7b1b      	ldrb	r3, [r3, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f002 f927 	bl	8009608 <USBH_LL_SetToggle>

  return USBH_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd90      	pop	{r4, r7, pc}

080073c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fe12 	bl	800900e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fe3d 	bl	8009070 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	7b1b      	ldrb	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00e      	beq.n	8007422 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	7b1b      	ldrb	r3, [r3, #12]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fdff 	bl	800900e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	7b1b      	ldrb	r3, [r3, #12]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fe2a 	bl	8009070 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	7b5b      	ldrb	r3, [r3, #13]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00e      	beq.n	8007448 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	7b5b      	ldrb	r3, [r3, #13]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fdec 	bl	800900e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7b5b      	ldrb	r3, [r3, #13]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fe17 	bl	8009070 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	4618      	mov	r0, r3
 800745e:	f002 f989 	bl	8009774 <free>
    phost->pActiveClass->pData = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007468:	2200      	movs	r2, #0
 800746a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3340      	adds	r3, #64	; 0x40
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8b1 	bl	80075f6 <GetLineCoding>
 8007494:	4603      	mov	r3, r0
 8007496:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d105      	bne.n	80074aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a4:	2102      	movs	r1, #2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074aa:	7afb      	ldrb	r3, [r7, #11]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d877      	bhi.n	80075c8 <USBH_CDC_Process+0x114>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBH_CDC_Process+0x2c>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	080074fb 	.word	0x080074fb
 80074e8:	0800752b 	.word	0x0800752b
 80074ec:	0800759f 	.word	0x0800759f
 80074f0:	080075ad 	.word	0x080075ad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]
      break;
 80074f8:	e06d      	b.n	80075d6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f897 	bl	8007634 <SetLineCoding>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007518:	e058      	b.n	80075cc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d055      	beq.n	80075cc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2204      	movs	r2, #4
 8007524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007528:	e050      	b.n	80075cc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	3340      	adds	r3, #64	; 0x40
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f860 	bl	80075f6 <GetLineCoding>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d126      	bne.n	800758e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	791b      	ldrb	r3, [r3, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d13b      	bne.n	80075d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007564:	429a      	cmp	r2, r3
 8007566:	d133      	bne.n	80075d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007574:	429a      	cmp	r2, r3
 8007576:	d12b      	bne.n	80075d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007580:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007582:	429a      	cmp	r2, r3
 8007584:	d124      	bne.n	80075d0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f958 	bl	800783c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800758c:	e020      	b.n	80075d0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d01d      	beq.n	80075d0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2204      	movs	r2, #4
 8007598:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800759c:	e018      	b.n	80075d0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f867 	bl	8007672 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8da 	bl	800775e <CDC_ProcessReception>
      break;
 80075aa:	e014      	b.n	80075d6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 ffef 	bl	8008592 <USBH_ClrFeature>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075c6:	e005      	b.n	80075d4 <USBH_CDC_Process+0x120>

    default:
      break;
 80075c8:	bf00      	nop
 80075ca:	e004      	b.n	80075d6 <USBH_CDC_Process+0x122>
      break;
 80075cc:	bf00      	nop
 80075ce:	e002      	b.n	80075d6 <USBH_CDC_Process+0x122>
      break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <USBH_CDC_Process+0x122>
      break;
 80075d4:	bf00      	nop

  }

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	22a1      	movs	r2, #161	; 0xa1
 8007604:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2221      	movs	r2, #33	; 0x21
 800760a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2207      	movs	r2, #7
 800761c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2207      	movs	r2, #7
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fa81 	bl	8008b2c <USBH_CtlReq>
 800762a:	4603      	mov	r3, r0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2221      	movs	r2, #33	; 0x21
 8007642:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2220      	movs	r2, #32
 8007648:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2207      	movs	r2, #7
 800765a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2207      	movs	r2, #7
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fa62 	bl	8008b2c <USBH_CtlReq>
 8007668:	4603      	mov	r3, r0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af02      	add	r7, sp, #8
 8007678:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007684:	2300      	movs	r3, #0
 8007686:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800768e:	2b01      	cmp	r3, #1
 8007690:	d002      	beq.n	8007698 <CDC_ProcessTransmission+0x26>
 8007692:	2b02      	cmp	r3, #2
 8007694:	d023      	beq.n	80076de <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007696:	e05e      	b.n	8007756 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	8b12      	ldrh	r2, [r2, #24]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d90b      	bls.n	80076bc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	69d9      	ldr	r1, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8b1a      	ldrh	r2, [r3, #24]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	7b5b      	ldrb	r3, [r3, #13]
 80076b0:	2001      	movs	r0, #1
 80076b2:	9000      	str	r0, [sp, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fc48 	bl	8008f4a <USBH_BulkSendData>
 80076ba:	e00b      	b.n	80076d4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	7b5b      	ldrb	r3, [r3, #13]
 80076ca:	2001      	movs	r0, #1
 80076cc:	9000      	str	r0, [sp, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fc3b 	bl	8008f4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076dc:	e03b      	b.n	8007756 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	7b5b      	ldrb	r3, [r3, #13]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 ff65 	bl	80095b4 <USBH_LL_GetURBState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d128      	bne.n	8007746 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	8b12      	ldrh	r2, [r2, #24]
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d90e      	bls.n	800771e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	8b12      	ldrh	r2, [r2, #24]
 8007708:	1a9a      	subs	r2, r3, r2
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	8b12      	ldrh	r2, [r2, #24]
 8007716:	441a      	add	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	61da      	str	r2, [r3, #28]
 800771c:	e002      	b.n	8007724 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007734:	e00e      	b.n	8007754 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f868 	bl	8007814 <USBH_CDC_TransmitCallback>
      break;
 8007744:	e006      	b.n	8007754 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d103      	bne.n	8007754 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007754:	bf00      	nop
  }
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b086      	sub	sp, #24
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007770:	2300      	movs	r3, #0
 8007772:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800777a:	2b03      	cmp	r3, #3
 800777c:	d002      	beq.n	8007784 <CDC_ProcessReception+0x26>
 800777e:	2b04      	cmp	r3, #4
 8007780:	d00e      	beq.n	80077a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007782:	e043      	b.n	800780c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	6a19      	ldr	r1, [r3, #32]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	8b5a      	ldrh	r2, [r3, #26]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	7b1b      	ldrb	r3, [r3, #12]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fbff 	bl	8008f94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2204      	movs	r2, #4
 800779a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800779e:	e035      	b.n	800780c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	7b1b      	ldrb	r3, [r3, #12]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 ff04 	bl	80095b4 <USBH_LL_GetURBState>
 80077ac:	4603      	mov	r3, r0
 80077ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077b0:	7cfb      	ldrb	r3, [r7, #19]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d129      	bne.n	800780a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	7b1b      	ldrb	r3, [r3, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fe67 	bl	8009490 <USBH_LL_GetLastXferSize>
 80077c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d016      	beq.n	80077fc <CDC_ProcessReception+0x9e>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	8b5b      	ldrh	r3, [r3, #26]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d910      	bls.n	80077fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	441a      	add	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2203      	movs	r2, #3
 80077f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077fa:	e006      	b.n	800780a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f80f 	bl	8007828 <USBH_CDC_ReceiveCallback>
      break;
 800780a:	bf00      	nop
  }
}
 800780c:	bf00      	nop
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007864:	2302      	movs	r3, #2
 8007866:	e029      	b.n	80078bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	79fa      	ldrb	r2, [r7, #7]
 800786c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f81f 	bl	80078c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f001 fd2d 	bl	8009314 <USBH_LL_Init>

  return USBH_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e009      	b.n	80078ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	33e0      	adds	r3, #224	; 0xe0
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b0f      	cmp	r3, #15
 80078ee:	d9f2      	bls.n	80078d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e009      	b.n	800790a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007910:	d3f1      	bcc.n	80078f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2240      	movs	r2, #64	; 0x40
 8007936:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d016      	beq.n	80079ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10e      	bne.n	80079a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007990:	1c59      	adds	r1, r3, #1
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	33de      	adds	r3, #222	; 0xde
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	e004      	b.n	80079b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80079a8:	2302      	movs	r3, #2
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e001      	b.n	80079b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80079ae:	2302      	movs	r3, #2
 80079b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d204      	bcs.n	80079e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80079e4:	e001      	b.n	80079ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80079e6:	2302      	movs	r3, #2
 80079e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	70fb      	strb	r3, [r7, #3]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70bb      	strb	r3, [r7, #2]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a22:	e025      	b.n	8007a70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	221a      	movs	r2, #26
 8007a28:	fb02 f303 	mul.w	r3, r2, r3
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	3302      	adds	r3, #2
 8007a34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <USBH_FindInterface+0x4e>
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2bff      	cmp	r3, #255	; 0xff
 8007a44:	d111      	bne.n	8007a6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a4a:	78ba      	ldrb	r2, [r7, #2]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d002      	beq.n	8007a56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a50:	78bb      	ldrb	r3, [r7, #2]
 8007a52:	2bff      	cmp	r3, #255	; 0xff
 8007a54:	d109      	bne.n	8007a6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a5a:	787a      	ldrb	r2, [r7, #1]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d002      	beq.n	8007a66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a60:	787b      	ldrb	r3, [r7, #1]
 8007a62:	2bff      	cmp	r3, #255	; 0xff
 8007a64:	d101      	bne.n	8007a6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	e006      	b.n	8007a78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d9d6      	bls.n	8007a24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a76:	23ff      	movs	r3, #255	; 0xff
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fc87 	bl	80093a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a92:	2101      	movs	r1, #1
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 fda0 	bl	80095da <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007aac:	2302      	movs	r3, #2
 8007aae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d102      	bne.n	8007ac6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	f200 81be 	bhi.w	8007e4e <USBH_Process+0x3aa>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <USBH_Process+0x34>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b3b 	.word	0x08007b3b
 8007ae0:	08007ba3 	.word	0x08007ba3
 8007ae4:	08007de9 	.word	0x08007de9
 8007ae8:	08007e4f 	.word	0x08007e4f
 8007aec:	08007c47 	.word	0x08007c47
 8007af0:	08007d8f 	.word	0x08007d8f
 8007af4:	08007c7d 	.word	0x08007c7d
 8007af8:	08007c9d 	.word	0x08007c9d
 8007afc:	08007cbd 	.word	0x08007cbd
 8007b00:	08007d01 	.word	0x08007d01
 8007b04:	08007dd1 	.word	0x08007dd1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 819e 	beq.w	8007e52 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b1c:	20c8      	movs	r0, #200	; 0xc8
 8007b1e:	f001 fda3 	bl	8009668 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fc99 	bl	800945a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b38:	e18b      	b.n	8007e52 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d107      	bne.n	8007b54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b52:	e18d      	b.n	8007e70 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5e:	d914      	bls.n	8007b8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b66:	3301      	adds	r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d903      	bls.n	8007b82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220d      	movs	r2, #13
 8007b7e:	701a      	strb	r2, [r3, #0]
      break;
 8007b80:	e176      	b.n	8007e70 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
      break;
 8007b88:	e172      	b.n	8007e70 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b90:	f103 020a 	add.w	r2, r3, #10
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b9a:	200a      	movs	r0, #10
 8007b9c:	f001 fd64 	bl	8009668 <USBH_Delay>
      break;
 8007ba0:	e166      	b.n	8007e70 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007bb8:	2064      	movs	r0, #100	; 0x64
 8007bba:	f001 fd55 	bl	8009668 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 fc24 	bl	800940c <USBH_LL_GetSpeed>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fa29 	bl	800902e <USBH_AllocPipe>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fa21 	bl	800902e <USBH_AllocPipe>
 8007bec:	4603      	mov	r3, r0
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7919      	ldrb	r1, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	9202      	str	r2, [sp, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4603      	mov	r3, r0
 8007c14:	2280      	movs	r2, #128	; 0x80
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f9da 	bl	8008fd0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7959      	ldrb	r1, [r3, #5]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c30:	b292      	uxth	r2, r2
 8007c32:	9202      	str	r2, [sp, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	9201      	str	r2, [sp, #4]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f9c6 	bl	8008fd0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c44:	e114      	b.n	8007e70 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f918 	bl	8007e7c <USBH_HandleEnum>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f040 80fe 	bne.w	8007e56 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d103      	bne.n	8007c74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c72:	e0f0      	b.n	8007e56 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2207      	movs	r2, #7
 8007c78:	701a      	strb	r2, [r3, #0]
      break;
 8007c7a:	e0ec      	b.n	8007e56 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80e9 	beq.w	8007e5a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c8e:	2101      	movs	r1, #1
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2208      	movs	r2, #8
 8007c98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c9a:	e0de      	b.n	8007e5a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fc2c 	bl	8008504 <USBH_SetCfg>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 80d5 	bne.w	8007e5e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2209      	movs	r2, #9
 8007cb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cba:	e0d0      	b.n	8007e5e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc3c 	bl	800854a <USBH_SetFeature>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ce4:	e0bd      	b.n	8007e62 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	f040 80b9 	bne.w	8007e62 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	220a      	movs	r2, #10
 8007cf4:	701a      	strb	r2, [r3, #0]
      break;
 8007cf6:	e0b4      	b.n	8007e62 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	220a      	movs	r2, #10
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e0b0      	b.n	8007e62 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80ad 	beq.w	8007e66 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e016      	b.n	8007d48 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32de      	adds	r2, #222	; 0xde
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	791a      	ldrb	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d108      	bne.n	8007d42 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d30:	7bfa      	ldrb	r2, [r7, #15]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	32de      	adds	r2, #222	; 0xde
 8007d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d40:	e005      	b.n	8007d4e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	3301      	adds	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0e5      	beq.n	8007d1a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d016      	beq.n	8007d86 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2206      	movs	r2, #6
 8007d6e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d76:	2103      	movs	r1, #3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d7c:	e073      	b.n	8007e66 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	220d      	movs	r2, #13
 8007d82:	701a      	strb	r2, [r3, #0]
      break;
 8007d84:	e06f      	b.n	8007e66 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220d      	movs	r2, #13
 8007d8a:	701a      	strb	r2, [r3, #0]
      break;
 8007d8c:	e06b      	b.n	8007e66 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
 8007da4:	4603      	mov	r3, r0
 8007da6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	220b      	movs	r2, #11
 8007db4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007db6:	e058      	b.n	8007e6a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d154      	bne.n	8007e6a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	220d      	movs	r2, #13
 8007dc4:	701a      	strb	r2, [r3, #0]
      break;
 8007dc6:	e050      	b.n	8007e6a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	220d      	movs	r2, #13
 8007dcc:	701a      	strb	r2, [r3, #0]
      break;
 8007dce:	e04c      	b.n	8007e6a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d049      	beq.n	8007e6e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
      }
      break;
 8007de6:	e042      	b.n	8007e6e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fd67 	bl	80078c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e24:	2105      	movs	r1, #5
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d107      	bne.n	8007e46 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fe20 	bl	8007a84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e44:	e014      	b.n	8007e70 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 faaa 	bl	80093a0 <USBH_LL_Start>
      break;
 8007e4c:	e010      	b.n	8007e70 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e4e:	bf00      	nop
 8007e50:	e00e      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e52:	bf00      	nop
 8007e54:	e00c      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e56:	bf00      	nop
 8007e58:	e00a      	b.n	8007e70 <USBH_Process+0x3cc>
    break;
 8007e5a:	bf00      	nop
 8007e5c:	e008      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <USBH_Process+0x3cc>
      break;
 8007e6e:	bf00      	nop
  }
  return USBH_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop

08007e7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af04      	add	r7, sp, #16
 8007e82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e84:	2301      	movs	r3, #1
 8007e86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b07      	cmp	r3, #7
 8007e92:	f200 81c1 	bhi.w	8008218 <USBH_HandleEnum+0x39c>
 8007e96:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <USBH_HandleEnum+0x20>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007ebd 	.word	0x08007ebd
 8007ea0:	08007f7b 	.word	0x08007f7b
 8007ea4:	08007fe5 	.word	0x08007fe5
 8007ea8:	08008073 	.word	0x08008073
 8007eac:	080080dd 	.word	0x080080dd
 8007eb0:	0800814d 	.word	0x0800814d
 8007eb4:	08008193 	.word	0x08008193
 8007eb8:	080081d9 	.word	0x080081d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ebc:	2108      	movs	r1, #8
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa50 	bl	8008364 <USBH_Get_DevDesc>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d130      	bne.n	8007f30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7919      	ldrb	r1, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	9202      	str	r2, [sp, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	9201      	str	r2, [sp, #4]
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	4603      	mov	r3, r0
 8007efe:	2280      	movs	r2, #128	; 0x80
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 f865 	bl	8008fd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7959      	ldrb	r1, [r3, #5]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	9202      	str	r2, [sp, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	2200      	movs	r2, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f851 	bl	8008fd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f2e:	e175      	b.n	800821c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	f040 8172 	bne.w	800821c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f3e:	3301      	adds	r3, #1
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d903      	bls.n	8007f5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	220d      	movs	r2, #13
 8007f56:	701a      	strb	r2, [r3, #0]
      break;
 8007f58:	e160      	b.n	800821c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	795b      	ldrb	r3, [r3, #5]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f885 	bl	8009070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f87f 	bl	8009070 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
      break;
 8007f78:	e150      	b.n	800821c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f7a:	2112      	movs	r1, #18
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9f1 	bl	8008364 <USBH_Get_DevDesc>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f92:	e145      	b.n	8008220 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	f040 8142 	bne.w	8008220 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d903      	bls.n	8007fbe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220d      	movs	r2, #13
 8007fba:	701a      	strb	r2, [r3, #0]
      break;
 8007fbc:	e130      	b.n	8008220 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	795b      	ldrb	r3, [r3, #5]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 f853 	bl	8009070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	791b      	ldrb	r3, [r3, #4]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f84d 	bl	8009070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	701a      	strb	r2, [r3, #0]
      break;
 8007fe2:	e11d      	b.n	8008220 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa68 	bl	80084bc <USBH_SetAddress>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d132      	bne.n	800805c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	f001 fb36 	bl	8009668 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2203      	movs	r2, #3
 8008008:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7919      	ldrb	r1, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800801e:	b292      	uxth	r2, r2
 8008020:	9202      	str	r2, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	9201      	str	r2, [sp, #4]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4603      	mov	r3, r0
 800802a:	2280      	movs	r2, #128	; 0x80
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 ffcf 	bl	8008fd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7959      	ldrb	r1, [r3, #5]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008046:	b292      	uxth	r2, r2
 8008048:	9202      	str	r2, [sp, #8]
 800804a:	2200      	movs	r2, #0
 800804c:	9201      	str	r2, [sp, #4]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4603      	mov	r3, r0
 8008052:	2200      	movs	r2, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 ffbb 	bl	8008fd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800805a:	e0e3      	b.n	8008224 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b03      	cmp	r3, #3
 8008060:	f040 80e0 	bne.w	8008224 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	220d      	movs	r2, #13
 8008068:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	705a      	strb	r2, [r3, #1]
      break;
 8008070:	e0d8      	b.n	8008224 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008072:	2109      	movs	r1, #9
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f99d 	bl	80083b4 <USBH_Get_CfgDesc>
 800807a:	4603      	mov	r3, r0
 800807c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2204      	movs	r2, #4
 8008088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800808a:	e0cd      	b.n	8008228 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b03      	cmp	r3, #3
 8008090:	f040 80ca 	bne.w	8008228 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800809a:	3301      	adds	r3, #1
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d903      	bls.n	80080b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	220d      	movs	r2, #13
 80080b2:	701a      	strb	r2, [r3, #0]
      break;
 80080b4:	e0b8      	b.n	8008228 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 ffd7 	bl	8009070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	791b      	ldrb	r3, [r3, #4]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ffd1 	bl	8009070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
      break;
 80080da:	e0a5      	b.n	8008228 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f965 	bl	80083b4 <USBH_Get_CfgDesc>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2205      	movs	r2, #5
 80080f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080fa:	e097      	b.n	800822c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	f040 8094 	bne.w	800822c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800810a:	3301      	adds	r3, #1
 800810c:	b2da      	uxtb	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800811a:	2b03      	cmp	r3, #3
 800811c:	d903      	bls.n	8008126 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	220d      	movs	r2, #13
 8008122:	701a      	strb	r2, [r3, #0]
      break;
 8008124:	e082      	b.n	800822c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	795b      	ldrb	r3, [r3, #5]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 ff9f 	bl	8009070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	791b      	ldrb	r3, [r3, #4]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 ff99 	bl	8009070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
      break;
 800814a:	e06f      	b.n	800822c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008152:	2b00      	cmp	r3, #0
 8008154:	d019      	beq.n	800818a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008162:	23ff      	movs	r3, #255	; 0xff
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f949 	bl	80083fc <USBH_Get_StringDesc>
 800816a:	4603      	mov	r3, r0
 800816c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d103      	bne.n	800817c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2206      	movs	r2, #6
 8008178:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800817a:	e059      	b.n	8008230 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d156      	bne.n	8008230 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2206      	movs	r2, #6
 8008186:	705a      	strb	r2, [r3, #1]
      break;
 8008188:	e052      	b.n	8008230 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2206      	movs	r2, #6
 800818e:	705a      	strb	r2, [r3, #1]
      break;
 8008190:	e04e      	b.n	8008230 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008198:	2b00      	cmp	r3, #0
 800819a:	d019      	beq.n	80081d0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80081a8:	23ff      	movs	r3, #255	; 0xff
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f926 	bl	80083fc <USBH_Get_StringDesc>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2207      	movs	r2, #7
 80081be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081c0:	e038      	b.n	8008234 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d135      	bne.n	8008234 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2207      	movs	r2, #7
 80081cc:	705a      	strb	r2, [r3, #1]
      break;
 80081ce:	e031      	b.n	8008234 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2207      	movs	r2, #7
 80081d4:	705a      	strb	r2, [r3, #1]
      break;
 80081d6:	e02d      	b.n	8008234 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d017      	beq.n	8008212 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081ee:	23ff      	movs	r3, #255	; 0xff
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f903 	bl	80083fc <USBH_Get_StringDesc>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008204:	e018      	b.n	8008238 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d115      	bne.n	8008238 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e012      	b.n	8008238 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
      break;
 8008216:	e00f      	b.n	8008238 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008218:	bf00      	nop
 800821a:	e00e      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 800821c:	bf00      	nop
 800821e:	e00c      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008220:	bf00      	nop
 8008222:	e00a      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008224:	bf00      	nop
 8008226:	e008      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008228:	bf00      	nop
 800822a:	e006      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 800822c:	bf00      	nop
 800822e:	e004      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008230:	bf00      	nop
 8008232:	e002      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008234:	bf00      	nop
 8008236:	e000      	b.n	800823a <USBH_HandleEnum+0x3be>
      break;
 8008238:	bf00      	nop
  }
  return Status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f804 	bl	8008286 <USBH_HandleSof>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b0b      	cmp	r3, #11
 8008296:	d10a      	bne.n	80082ae <USBH_HandleSof+0x28>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
  }
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80082c6:	bf00      	nop
}
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b083      	sub	sp, #12
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80082e2:	bf00      	nop
}
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f84a 	bl	80093d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fe91 	bl	8009070 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fe8b 	bl	8009070 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	b29b      	uxth	r3, r3
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008382:	2100      	movs	r1, #0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f864 	bl	8008452 <USBH_GetDescriptor>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f203 3026 	addw	r0, r3, #806	; 0x326
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	b292      	uxth	r2, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f000 f918 	bl	80085da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	331c      	adds	r3, #28
 80083c4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80083c6:	887b      	ldrh	r3, [r7, #2]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d0:	2100      	movs	r1, #0
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f83d 	bl	8008452 <USBH_GetDescriptor>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80083e2:	887b      	ldrh	r3, [r7, #2]
 80083e4:	461a      	mov	r2, r3
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f987 	bl	80086fc <USBH_ParseCfgDesc>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	72fb      	strb	r3, [r7, #11]
 800840c:	4613      	mov	r3, r2
 800840e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008418:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	460b      	mov	r3, r1
 8008426:	2100      	movs	r1, #0
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f812 	bl	8008452 <USBH_GetDescriptor>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d107      	bne.n	8008448 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800843e:	893a      	ldrh	r2, [r7, #8]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fb24 	bl	8008a90 <USBH_ParseStringDesc>
  }

  return status;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	607b      	str	r3, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	72fb      	strb	r3, [r7, #11]
 8008460:	4613      	mov	r3, r2
 8008462:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	789b      	ldrb	r3, [r3, #2]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d11c      	bne.n	80084a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008472:	b2da      	uxtb	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2206      	movs	r2, #6
 800847c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	893a      	ldrh	r2, [r7, #8]
 8008482:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008484:	893b      	ldrh	r3, [r7, #8]
 8008486:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800848a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848e:	d104      	bne.n	800849a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f240 4209 	movw	r2, #1033	; 0x409
 8008496:	829a      	strh	r2, [r3, #20]
 8008498:	e002      	b.n	80084a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8b3a      	ldrh	r2, [r7, #24]
 80084a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80084a6:	8b3b      	ldrh	r3, [r7, #24]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 fb3d 	bl	8008b2c <USBH_CtlReq>
 80084b2:	4603      	mov	r3, r0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	789b      	ldrb	r3, [r3, #2]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10f      	bne.n	80084f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2205      	movs	r2, #5
 80084da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	b29a      	uxth	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084f0:	2200      	movs	r2, #0
 80084f2:	2100      	movs	r1, #0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb19 	bl	8008b2c <USBH_CtlReq>
 80084fa:	4603      	mov	r3, r0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	789b      	ldrb	r3, [r3, #2]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10e      	bne.n	8008536 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2209      	movs	r2, #9
 8008522:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	887a      	ldrh	r2, [r7, #2]
 8008528:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 faf6 	bl	8008b2c <USBH_CtlReq>
 8008540:	4603      	mov	r3, r0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	789b      	ldrb	r3, [r3, #2]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d10f      	bne.n	800857e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2203      	movs	r2, #3
 8008568:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fad2 	bl	8008b2c <USBH_CtlReq>
 8008588:	4603      	mov	r3, r0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	789b      	ldrb	r3, [r3, #2]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10f      	bne.n	80085c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 faae 	bl	8008b2c <USBH_CtlReq>
 80085d0:	4603      	mov	r3, r0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	785a      	ldrb	r2, [r3, #1]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3302      	adds	r3, #2
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	3303      	adds	r3, #3
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	b29b      	uxth	r3, r3
 800860c:	4313      	orrs	r3, r2
 800860e:	b29a      	uxth	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	791a      	ldrb	r2, [r3, #4]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	795a      	ldrb	r2, [r3, #5]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	799a      	ldrb	r2, [r3, #6]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	79da      	ldrb	r2, [r3, #7]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	79db      	ldrb	r3, [r3, #7]
 8008638:	2b20      	cmp	r3, #32
 800863a:	dc11      	bgt.n	8008660 <USBH_ParseDevDesc+0x86>
 800863c:	2b08      	cmp	r3, #8
 800863e:	db16      	blt.n	800866e <USBH_ParseDevDesc+0x94>
 8008640:	3b08      	subs	r3, #8
 8008642:	2201      	movs	r2, #1
 8008644:	fa02 f303 	lsl.w	r3, r2, r3
 8008648:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800864c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008650:	2b00      	cmp	r3, #0
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <USBH_ParseDevDesc+0x8a>
 800865e:	e006      	b.n	800866e <USBH_ParseDevDesc+0x94>
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d104      	bne.n	800866e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	79da      	ldrb	r2, [r3, #7]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	71da      	strb	r2, [r3, #7]
      break;
 800866c:	e003      	b.n	8008676 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2240      	movs	r2, #64	; 0x40
 8008672:	71da      	strb	r2, [r3, #7]
      break;
 8008674:	bf00      	nop
  }

  if (length > 8U)
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d939      	bls.n	80086f0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3308      	adds	r3, #8
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b29a      	uxth	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	3309      	adds	r3, #9
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	b29b      	uxth	r3, r3
 8008690:	4313      	orrs	r3, r2
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	330a      	adds	r3, #10
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	330b      	adds	r3, #11
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	330c      	adds	r3, #12
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	330d      	adds	r3, #13
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	7b9a      	ldrb	r2, [r3, #14]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	7bda      	ldrb	r2, [r3, #15]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	7c1a      	ldrb	r2, [r3, #16]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	7c5a      	ldrb	r2, [r3, #17]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	745a      	strb	r2, [r3, #17]
  }
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	; 0x30
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008710:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	781a      	ldrb	r2, [r3, #0]
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	785a      	ldrb	r2, [r3, #1]
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	3302      	adds	r3, #2
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	3303      	adds	r3, #3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b29b      	uxth	r3, r3
 8008754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008758:	bf28      	it	cs
 800875a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800875e:	b29a      	uxth	r2, r3
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	791a      	ldrb	r2, [r3, #4]
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	795a      	ldrb	r2, [r3, #5]
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	799a      	ldrb	r2, [r3, #6]
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	79da      	ldrb	r2, [r3, #7]
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	7a1a      	ldrb	r2, [r3, #8]
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b09      	cmp	r3, #9
 8008792:	d002      	beq.n	800879a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	2209      	movs	r2, #9
 8008798:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	2b09      	cmp	r3, #9
 800879e:	f240 809d 	bls.w	80088dc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80087a2:	2309      	movs	r3, #9
 80087a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087aa:	e081      	b.n	80088b0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087ac:	f107 0316 	add.w	r3, r7, #22
 80087b0:	4619      	mov	r1, r3
 80087b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b4:	f000 f99f 	bl	8008af6 <USBH_GetNextDesc>
 80087b8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d176      	bne.n	80088b0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d002      	beq.n	80087d0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2209      	movs	r2, #9
 80087ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80087d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d4:	221a      	movs	r2, #26
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	3308      	adds	r3, #8
 80087dc:	6a3a      	ldr	r2, [r7, #32]
 80087de:	4413      	add	r3, r2
 80087e0:	3302      	adds	r3, #2
 80087e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80087e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e6:	69f8      	ldr	r0, [r7, #28]
 80087e8:	f000 f87e 	bl	80088e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087f6:	e043      	b.n	8008880 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087f8:	f107 0316 	add.w	r3, r7, #22
 80087fc:	4619      	mov	r1, r3
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	f000 f979 	bl	8008af6 <USBH_GetNextDesc>
 8008804:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b05      	cmp	r3, #5
 800880c:	d138      	bne.n	8008880 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	795b      	ldrb	r3, [r3, #5]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d10f      	bne.n	8008836 <USBH_ParseCfgDesc+0x13a>
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	799b      	ldrb	r3, [r3, #6]
 800881a:	2b02      	cmp	r3, #2
 800881c:	d10b      	bne.n	8008836 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	79db      	ldrb	r3, [r3, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10f      	bne.n	8008846 <USBH_ParseCfgDesc+0x14a>
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b09      	cmp	r3, #9
 800882c:	d00b      	beq.n	8008846 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2209      	movs	r2, #9
 8008832:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008834:	e007      	b.n	8008846 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b07      	cmp	r3, #7
 800883c:	d004      	beq.n	8008848 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	2207      	movs	r2, #7
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	e000      	b.n	8008848 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008846:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800884c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008850:	3201      	adds	r2, #1
 8008852:	00d2      	lsls	r2, r2, #3
 8008854:	211a      	movs	r1, #26
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	3308      	adds	r3, #8
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	4413      	add	r3, r2
 8008862:	3304      	adds	r3, #4
 8008864:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008868:	69b9      	ldr	r1, [r7, #24]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f86b 	bl	8008946 <USBH_ParseEPDesc>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800887a:	3301      	adds	r3, #1
 800887c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	791b      	ldrb	r3, [r3, #4]
 8008884:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008888:	429a      	cmp	r2, r3
 800888a:	d204      	bcs.n	8008896 <USBH_ParseCfgDesc+0x19a>
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	885a      	ldrh	r2, [r3, #2]
 8008890:	8afb      	ldrh	r3, [r7, #22]
 8008892:	429a      	cmp	r2, r3
 8008894:	d8b0      	bhi.n	80087f8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	791b      	ldrb	r3, [r3, #4]
 800889a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800889e:	429a      	cmp	r2, r3
 80088a0:	d201      	bcs.n	80088a6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e01c      	b.n	80088e0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80088a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088aa:	3301      	adds	r3, #1
 80088ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d805      	bhi.n	80088c4 <USBH_ParseCfgDesc+0x1c8>
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	885a      	ldrh	r2, [r3, #2]
 80088bc:	8afb      	ldrh	r3, [r7, #22]
 80088be:	429a      	cmp	r2, r3
 80088c0:	f63f af74 	bhi.w	80087ac <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	791b      	ldrb	r3, [r3, #4]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	bf28      	it	cs
 80088cc:	2302      	movcs	r3, #2
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d201      	bcs.n	80088dc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80088d8:	2303      	movs	r3, #3
 80088da:	e001      	b.n	80088e0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80088dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3730      	adds	r7, #48	; 0x30
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	785a      	ldrb	r2, [r3, #1]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	789a      	ldrb	r2, [r3, #2]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	78da      	ldrb	r2, [r3, #3]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	791a      	ldrb	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	795a      	ldrb	r2, [r3, #5]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	799a      	ldrb	r2, [r3, #6]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	79da      	ldrb	r2, [r3, #7]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	7a1a      	ldrb	r2, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	721a      	strb	r2, [r3, #8]
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	785a      	ldrb	r2, [r3, #1]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	789a      	ldrb	r2, [r3, #2]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	78da      	ldrb	r2, [r3, #3]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3304      	adds	r3, #4
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3305      	adds	r3, #5
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	799a      	ldrb	r2, [r3, #6]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	889b      	ldrh	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80089a2:	2303      	movs	r3, #3
 80089a4:	75fb      	strb	r3, [r7, #23]
 80089a6:	e033      	b.n	8008a10 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	889b      	ldrh	r3, [r3, #4]
 80089ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80089b0:	f023 0307 	bic.w	r3, r3, #7
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	889b      	ldrh	r3, [r3, #4]
 80089be:	b21a      	sxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b299      	uxth	r1, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3305      	adds	r3, #5
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	430b      	orrs	r3, r1
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d110      	bne.n	8008a02 <USBH_ParseEPDesc+0xbc>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	b299      	uxth	r1, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3305      	adds	r3, #5
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	021b      	lsls	r3, r3, #8
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	430b      	orrs	r3, r1
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089fe:	b21b      	sxth	r3, r3
 8008a00:	e001      	b.n	8008a06 <USBH_ParseEPDesc+0xc0>
 8008a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d116      	bne.n	8008a48 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d005      	beq.n	8008a32 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d127      	bne.n	8008a82 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	799b      	ldrb	r3, [r3, #6]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <USBH_ParseEPDesc+0xfc>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	799b      	ldrb	r3, [r3, #6]
 8008a3e:	2b10      	cmp	r3, #16
 8008a40:	d91f      	bls.n	8008a82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a42:	2303      	movs	r3, #3
 8008a44:	75fb      	strb	r3, [r7, #23]
 8008a46:	e01c      	b.n	8008a82 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	78db      	ldrb	r3, [r3, #3]
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d10a      	bne.n	8008a6a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	799b      	ldrb	r3, [r3, #6]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <USBH_ParseEPDesc+0x11e>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	799b      	ldrb	r3, [r3, #6]
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d90e      	bls.n	8008a82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a64:	2303      	movs	r3, #3
 8008a66:	75fb      	strb	r3, [r7, #23]
 8008a68:	e00b      	b.n	8008a82 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	78db      	ldrb	r3, [r3, #3]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d105      	bne.n	8008a82 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	799b      	ldrb	r3, [r3, #6]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d120      	bne.n	8008aea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	1e9a      	subs	r2, r3, #2
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	bf28      	it	cs
 8008ab4:	4613      	movcs	r3, r2
 8008ab6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3302      	adds	r3, #2
 8008abc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008abe:	2300      	movs	r3, #0
 8008ac0:	82fb      	strh	r3, [r7, #22]
 8008ac2:	e00b      	b.n	8008adc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008ac4:	8afb      	ldrh	r3, [r7, #22]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ad6:	8afb      	ldrh	r3, [r7, #22]
 8008ad8:	3302      	adds	r3, #2
 8008ada:	82fb      	strh	r3, [r7, #22]
 8008adc:	8afa      	ldrh	r2, [r7, #22]
 8008ade:	8abb      	ldrh	r3, [r7, #20]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d3ef      	bcc.n	8008ac4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
  }
}
 8008aea:	bf00      	nop
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	881a      	ldrh	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	789b      	ldrb	r3, [r3, #2]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d002      	beq.n	8008b4c <USBH_CtlReq+0x20>
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d00f      	beq.n	8008b6a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008b4a:	e027      	b.n	8008b9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2202      	movs	r2, #2
 8008b62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
      break;
 8008b68:	e018      	b.n	8008b9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f81c 	bl	8008ba8 <USBH_HandleControl>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <USBH_CtlReq+0x54>
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d106      	bne.n	8008b8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	761a      	strb	r2, [r3, #24]
      break;
 8008b8c:	e005      	b.n	8008b9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d102      	bne.n	8008b9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	709a      	strb	r2, [r3, #2]
      break;
 8008b9a:	bf00      	nop
  }
  return status;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7e1b      	ldrb	r3, [r3, #24]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2b0a      	cmp	r3, #10
 8008bc0:	f200 8156 	bhi.w	8008e70 <USBH_HandleControl+0x2c8>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <USBH_HandleControl+0x24>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008c13 	.word	0x08008c13
 8008bd4:	08008c7d 	.word	0x08008c7d
 8008bd8:	08008ca3 	.word	0x08008ca3
 8008bdc:	08008cdb 	.word	0x08008cdb
 8008be0:	08008d05 	.word	0x08008d05
 8008be4:	08008d57 	.word	0x08008d57
 8008be8:	08008d79 	.word	0x08008d79
 8008bec:	08008db5 	.word	0x08008db5
 8008bf0:	08008ddb 	.word	0x08008ddb
 8008bf4:	08008e19 	.word	0x08008e19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f103 0110 	add.w	r1, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	795b      	ldrb	r3, [r3, #5]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f943 	bl	8008e90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	761a      	strb	r2, [r3, #24]
      break;
 8008c10:	e139      	b.n	8008e86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	795b      	ldrb	r3, [r3, #5]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fccb 	bl	80095b4 <USBH_LL_GetURBState>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d11e      	bne.n	8008c66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	7c1b      	ldrb	r3, [r3, #16]
 8008c2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8adb      	ldrh	r3, [r3, #22]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008c3a:	7b7b      	ldrb	r3, [r7, #13]
 8008c3c:	2b80      	cmp	r3, #128	; 0x80
 8008c3e:	d103      	bne.n	8008c48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2203      	movs	r2, #3
 8008c44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c46:	e115      	b.n	8008e74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2205      	movs	r2, #5
 8008c4c:	761a      	strb	r2, [r3, #24]
      break;
 8008c4e:	e111      	b.n	8008e74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008c50:	7b7b      	ldrb	r3, [r7, #13]
 8008c52:	2b80      	cmp	r3, #128	; 0x80
 8008c54:	d103      	bne.n	8008c5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2209      	movs	r2, #9
 8008c5a:	761a      	strb	r2, [r3, #24]
      break;
 8008c5c:	e10a      	b.n	8008e74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2207      	movs	r2, #7
 8008c62:	761a      	strb	r2, [r3, #24]
      break;
 8008c64:	e106      	b.n	8008e74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d003      	beq.n	8008c74 <USBH_HandleControl+0xcc>
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	f040 8100 	bne.w	8008e74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	220b      	movs	r2, #11
 8008c78:	761a      	strb	r2, [r3, #24]
      break;
 8008c7a:	e0fb      	b.n	8008e74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6899      	ldr	r1, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	899a      	ldrh	r2, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	791b      	ldrb	r3, [r3, #4]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f93a 	bl	8008f0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ca0:	e0f1      	b.n	8008e86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	791b      	ldrb	r3, [r3, #4]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fc83 	bl	80095b4 <USBH_LL_GetURBState>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d102      	bne.n	8008cbe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2209      	movs	r2, #9
 8008cbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	d102      	bne.n	8008cca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cc8:	e0d6      	b.n	8008e78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	f040 80d3 	bne.w	8008e78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	220b      	movs	r2, #11
 8008cd6:	761a      	strb	r2, [r3, #24]
      break;
 8008cd8:	e0ce      	b.n	8008e78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6899      	ldr	r1, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	899a      	ldrh	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	2001      	movs	r0, #1
 8008ce8:	9000      	str	r0, [sp, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8ea 	bl	8008ec4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2206      	movs	r2, #6
 8008d00:	761a      	strb	r2, [r3, #24]
      break;
 8008d02:	e0c0      	b.n	8008e86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	795b      	ldrb	r3, [r3, #5]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fc52 	bl	80095b4 <USBH_LL_GetURBState>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d103      	bne.n	8008d22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2207      	movs	r2, #7
 8008d1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d20:	e0ac      	b.n	8008e7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	d105      	bne.n	8008d34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	220c      	movs	r2, #12
 8008d2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	73fb      	strb	r3, [r7, #15]
      break;
 8008d32:	e0a3      	b.n	8008e7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	761a      	strb	r2, [r3, #24]
      break;
 8008d40:	e09c      	b.n	8008e7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	f040 8099 	bne.w	8008e7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	220b      	movs	r2, #11
 8008d4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008d50:	2302      	movs	r3, #2
 8008d52:	73fb      	strb	r3, [r7, #15]
      break;
 8008d54:	e092      	b.n	8008e7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	791b      	ldrb	r3, [r3, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8d5 	bl	8008f0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2208      	movs	r2, #8
 8008d74:	761a      	strb	r2, [r3, #24]

      break;
 8008d76:	e086      	b.n	8008e86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	791b      	ldrb	r3, [r3, #4]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fc18 	bl	80095b4 <USBH_LL_GetURBState>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d105      	bne.n	8008d9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	220d      	movs	r2, #13
 8008d92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d98:	e072      	b.n	8008e80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d103      	bne.n	8008da8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220b      	movs	r2, #11
 8008da4:	761a      	strb	r2, [r3, #24]
      break;
 8008da6:	e06b      	b.n	8008e80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d168      	bne.n	8008e80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008dae:	2303      	movs	r3, #3
 8008db0:	73fb      	strb	r3, [r7, #15]
      break;
 8008db2:	e065      	b.n	8008e80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	795b      	ldrb	r3, [r3, #5]
 8008db8:	2201      	movs	r2, #1
 8008dba:	9200      	str	r2, [sp, #0]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f87f 	bl	8008ec4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	220a      	movs	r2, #10
 8008dd6:	761a      	strb	r2, [r3, #24]
      break;
 8008dd8:	e055      	b.n	8008e86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	795b      	ldrb	r3, [r3, #5]
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fbe7 	bl	80095b4 <USBH_LL_GetURBState>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	220d      	movs	r2, #13
 8008df8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dfa:	e043      	b.n	8008e84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d103      	bne.n	8008e0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2209      	movs	r2, #9
 8008e06:	761a      	strb	r2, [r3, #24]
      break;
 8008e08:	e03c      	b.n	8008e84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d139      	bne.n	8008e84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	220b      	movs	r2, #11
 8008e14:	761a      	strb	r2, [r3, #24]
      break;
 8008e16:	e035      	b.n	8008e84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7e5b      	ldrb	r3, [r3, #25]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	765a      	strb	r2, [r3, #25]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7e5b      	ldrb	r3, [r3, #25]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d806      	bhi.n	8008e3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e38:	e025      	b.n	8008e86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e40:	2106      	movs	r1, #6
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	795b      	ldrb	r3, [r3, #5]
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f90c 	bl	8009070 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	791b      	ldrb	r3, [r3, #4]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f906 	bl	8009070 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6e:	e00a      	b.n	8008e86 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e70:	bf00      	nop
 8008e72:	e008      	b.n	8008e86 <USBH_HandleControl+0x2de>
      break;
 8008e74:	bf00      	nop
 8008e76:	e006      	b.n	8008e86 <USBH_HandleControl+0x2de>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <USBH_HandleControl+0x2de>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <USBH_HandleControl+0x2de>
      break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <USBH_HandleControl+0x2de>
      break;
 8008e84:	bf00      	nop
  }

  return status;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e9e:	79f9      	ldrb	r1, [r7, #7]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	9302      	str	r3, [sp, #8]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fb4c 	bl	8009552 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af04      	add	r7, sp, #16
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ee8:	7979      	ldrb	r1, [r7, #5]
 8008eea:	7e3b      	ldrb	r3, [r7, #24]
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	2200      	movs	r2, #0
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fb27 	bl	8009552 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	af04      	add	r7, sp, #16
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	80fb      	strh	r3, [r7, #6]
 8008f20:	4613      	mov	r3, r2
 8008f22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f24:	7979      	ldrb	r1, [r7, #5]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	9302      	str	r3, [sp, #8]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	2301      	movs	r3, #1
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	2300      	movs	r3, #0
 8008f38:	2201      	movs	r2, #1
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 fb09 	bl	8009552 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f40:	2300      	movs	r3, #0

}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	af04      	add	r7, sp, #16
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	4611      	mov	r1, r2
 8008f56:	461a      	mov	r2, r3
 8008f58:	460b      	mov	r3, r1
 8008f5a:	80fb      	strh	r3, [r7, #6]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f6e:	7979      	ldrb	r1, [r7, #5]
 8008f70:	7e3b      	ldrb	r3, [r7, #24]
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2302      	movs	r3, #2
 8008f82:	2200      	movs	r2, #0
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 fae4 	bl	8009552 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	80fb      	strh	r3, [r7, #6]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008faa:	7979      	ldrb	r1, [r7, #5]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fac6 	bl	8009552 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af04      	add	r7, sp, #16
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	4608      	mov	r0, r1
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4603      	mov	r3, r0
 8008fe0:	70fb      	strb	r3, [r7, #3]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70bb      	strb	r3, [r7, #2]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008fea:	7878      	ldrb	r0, [r7, #1]
 8008fec:	78ba      	ldrb	r2, [r7, #2]
 8008fee:	78f9      	ldrb	r1, [r7, #3]
 8008ff0:	8b3b      	ldrh	r3, [r7, #24]
 8008ff2:	9302      	str	r3, [sp, #8]
 8008ff4:	7d3b      	ldrb	r3, [r7, #20]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	7c3b      	ldrb	r3, [r7, #16]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa59 	bl	80094b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa78 	bl	8009514 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f836 	bl	80090ac <USBH_GetFreePipe>
 8009040:	4603      	mov	r3, r0
 8009042:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009044:	89fb      	ldrh	r3, [r7, #14]
 8009046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800904a:	4293      	cmp	r3, r2
 800904c:	d00a      	beq.n	8009064 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	89fb      	ldrh	r3, [r7, #14]
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	33e0      	adds	r3, #224	; 0xe0
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009064:	89fb      	ldrh	r3, [r7, #14]
 8009066:	b2db      	uxtb	r3, r3
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	2b0f      	cmp	r3, #15
 8009080:	d80d      	bhi.n	800909e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	33e0      	adds	r3, #224	; 0xe0
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	33e0      	adds	r3, #224	; 0xe0
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
 80090bc:	e00f      	b.n	80090de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	33e0      	adds	r3, #224	; 0xe0
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	e007      	b.n	80090e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	3301      	adds	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	2b0f      	cmp	r3, #15
 80090e2:	d9ec      	bls.n	80090be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80090e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80090f8:	2200      	movs	r2, #0
 80090fa:	490e      	ldr	r1, [pc, #56]	; (8009134 <MX_USB_HOST_Init+0x40>)
 80090fc:	480e      	ldr	r0, [pc, #56]	; (8009138 <MX_USB_HOST_Init+0x44>)
 80090fe:	f7fe fba7 	bl	8007850 <USBH_Init>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009108:	f7f7 fde0 	bl	8000ccc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800910c:	490b      	ldr	r1, [pc, #44]	; (800913c <MX_USB_HOST_Init+0x48>)
 800910e:	480a      	ldr	r0, [pc, #40]	; (8009138 <MX_USB_HOST_Init+0x44>)
 8009110:	f7fe fc2c 	bl	800796c <USBH_RegisterClass>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800911a:	f7f7 fdd7 	bl	8000ccc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800911e:	4806      	ldr	r0, [pc, #24]	; (8009138 <MX_USB_HOST_Init+0x44>)
 8009120:	f7fe fcb0 	bl	8007a84 <USBH_Start>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800912a:	f7f7 fdcf 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	08009155 	.word	0x08009155
 8009138:	20000360 	.word	0x20000360
 800913c:	2000000c 	.word	0x2000000c

08009140 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009144:	4802      	ldr	r0, [pc, #8]	; (8009150 <MX_USB_HOST_Process+0x10>)
 8009146:	f7fe fcad 	bl	8007aa4 <USBH_Process>
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000360 	.word	0x20000360

08009154 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	3b01      	subs	r3, #1
 8009164:	2b04      	cmp	r3, #4
 8009166:	d819      	bhi.n	800919c <USBH_UserProcess+0x48>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <USBH_UserProcess+0x1c>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	0800919d 	.word	0x0800919d
 8009174:	0800918d 	.word	0x0800918d
 8009178:	0800919d 	.word	0x0800919d
 800917c:	08009195 	.word	0x08009195
 8009180:	08009185 	.word	0x08009185
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <USBH_UserProcess+0x58>)
 8009186:	2203      	movs	r2, #3
 8009188:	701a      	strb	r2, [r3, #0]
  break;
 800918a:	e008      	b.n	800919e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <USBH_UserProcess+0x58>)
 800918e:	2202      	movs	r2, #2
 8009190:	701a      	strb	r2, [r3, #0]
  break;
 8009192:	e004      	b.n	800919e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <USBH_UserProcess+0x58>)
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
  break;
 800919a:	e000      	b.n	800919e <USBH_UserProcess+0x4a>

  default:
  break;
 800919c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	20000738 	.word	0x20000738

080091b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	; 0x28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091b8:	f107 0314 	add.w	r3, r7, #20
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	605a      	str	r2, [r3, #4]
 80091c2:	609a      	str	r2, [r3, #8]
 80091c4:	60da      	str	r2, [r3, #12]
 80091c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a24      	ldr	r2, [pc, #144]	; (8009260 <HAL_HCD_MspInit+0xb0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d141      	bne.n	8009256 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	4b23      	ldr	r3, [pc, #140]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	4a22      	ldr	r2, [pc, #136]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 80091dc:	f043 0302 	orr.w	r3, r3, #2
 80091e0:	6313      	str	r3, [r2, #48]	; 0x30
 80091e2:	4b20      	ldr	r3, [pc, #128]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	613b      	str	r3, [r7, #16]
 80091ec:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80091ee:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80091f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f4:	2302      	movs	r3, #2
 80091f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091fc:	2300      	movs	r3, #0
 80091fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009200:	230c      	movs	r3, #12
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	4619      	mov	r1, r3
 800920a:	4817      	ldr	r0, [pc, #92]	; (8009268 <HAL_HCD_MspInit+0xb8>)
 800920c:	f7f8 fd3c 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8009210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921a:	2300      	movs	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800921e:	f107 0314 	add.w	r3, r7, #20
 8009222:	4619      	mov	r1, r3
 8009224:	4810      	ldr	r0, [pc, #64]	; (8009268 <HAL_HCD_MspInit+0xb8>)
 8009226:	f7f8 fd2f 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	4a0c      	ldr	r2, [pc, #48]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 8009234:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009238:	6313      	str	r3, [r2, #48]	; 0x30
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <HAL_HCD_MspInit+0xb4>)
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	204d      	movs	r0, #77	; 0x4d
 800924c:	f7f8 faea 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009250:	204d      	movs	r0, #77	; 0x4d
 8009252:	f7f8 fb03 	bl	800185c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009256:	bf00      	nop
 8009258:	3728      	adds	r7, #40	; 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	40040000 	.word	0x40040000
 8009264:	40023800 	.word	0x40023800
 8009268:	40020400 	.word	0x40020400

0800926c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fff1 	bl	8008262 <USBH_LL_IncTimer>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff f829 	bl	80082ee <USBH_LL_Connect>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff f832 	bl	800831c <USBH_LL_Disconnect>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
 80092cc:	4613      	mov	r3, r2
 80092ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe ffe3 	bl	80082b6 <USBH_LL_PortEnabled>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe ffe3 	bl	80082d2 <USBH_LL_PortDisabled>
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009322:	2b00      	cmp	r3, #0
 8009324:	d132      	bne.n	800938c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8009326:	4a1c      	ldr	r2, [pc, #112]	; (8009398 <USBH_LL_Init+0x84>)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a19      	ldr	r2, [pc, #100]	; (8009398 <USBH_LL_Init+0x84>)
 8009332:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <USBH_LL_Init+0x84>)
 8009338:	4a18      	ldr	r2, [pc, #96]	; (800939c <USBH_LL_Init+0x88>)
 800933a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800933c:	4b16      	ldr	r3, [pc, #88]	; (8009398 <USBH_LL_Init+0x84>)
 800933e:	220c      	movs	r2, #12
 8009340:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <USBH_LL_Init+0x84>)
 8009344:	2201      	movs	r2, #1
 8009346:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009348:	4b13      	ldr	r3, [pc, #76]	; (8009398 <USBH_LL_Init+0x84>)
 800934a:	2200      	movs	r2, #0
 800934c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <USBH_LL_Init+0x84>)
 8009350:	2202      	movs	r2, #2
 8009352:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009354:	4b10      	ldr	r3, [pc, #64]	; (8009398 <USBH_LL_Init+0x84>)
 8009356:	2200      	movs	r2, #0
 8009358:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800935a:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <USBH_LL_Init+0x84>)
 800935c:	2200      	movs	r2, #0
 800935e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009360:	4b0d      	ldr	r3, [pc, #52]	; (8009398 <USBH_LL_Init+0x84>)
 8009362:	2200      	movs	r2, #0
 8009364:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <USBH_LL_Init+0x84>)
 8009368:	2200      	movs	r2, #0
 800936a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800936c:	480a      	ldr	r0, [pc, #40]	; (8009398 <USBH_LL_Init+0x84>)
 800936e:	f7f8 fe6a 	bl	8002046 <HAL_HCD_Init>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009378:	f7f7 fca8 	bl	8000ccc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800937c:	4806      	ldr	r0, [pc, #24]	; (8009398 <USBH_LL_Init+0x84>)
 800937e:	f7f9 fa4e 	bl	800281e <HAL_HCD_GetCurrentFrame>
 8009382:	4603      	mov	r3, r0
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7fe ff5c 	bl	8008244 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000073c 	.word	0x2000073c
 800939c:	40040000 	.word	0x40040000

080093a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7f9 f9bb 	bl	8002732 <HAL_HCD_Start>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f95c 	bl	8009680 <USBH_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f9 f9c3 	bl	8002778 <HAL_HCD_Stop>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f941 	bl	8009680 <USBH_Get_USB_Status>
 80093fe:	4603      	mov	r3, r0
 8009400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009402:	7bbb      	ldrb	r3, [r7, #14]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800941e:	4618      	mov	r0, r3
 8009420:	f7f9 fa0b 	bl	800283a <HAL_HCD_GetCurrentSpeed>
 8009424:	4603      	mov	r3, r0
 8009426:	2b02      	cmp	r3, #2
 8009428:	d00c      	beq.n	8009444 <USBH_LL_GetSpeed+0x38>
 800942a:	2b02      	cmp	r3, #2
 800942c:	d80d      	bhi.n	800944a <USBH_LL_GetSpeed+0x3e>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <USBH_LL_GetSpeed+0x2c>
 8009432:	2b01      	cmp	r3, #1
 8009434:	d003      	beq.n	800943e <USBH_LL_GetSpeed+0x32>
 8009436:	e008      	b.n	800944a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
    break;
 800943c:	e008      	b.n	8009450 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800943e:	2301      	movs	r3, #1
 8009440:	73fb      	strb	r3, [r7, #15]
    break;
 8009442:	e005      	b.n	8009450 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009444:	2302      	movs	r3, #2
 8009446:	73fb      	strb	r3, [r7, #15]
    break;
 8009448:	e002      	b.n	8009450 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800944a:	2301      	movs	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]
    break;
 800944e:	bf00      	nop
  }
  return  speed;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009470:	4618      	mov	r0, r3
 8009472:	f7f9 f99e 	bl	80027b2 <HAL_HCD_ResetPort>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 f8ff 	bl	8009680 <USBH_Get_USB_Status>
 8009482:	4603      	mov	r3, r0
 8009484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009486:	7bbb      	ldrb	r3, [r7, #14]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f9 f9a5 	bl	80027f6 <HAL_HCD_HC_GetXferCount>
 80094ac:	4603      	mov	r3, r0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094b6:	b590      	push	{r4, r7, lr}
 80094b8:	b089      	sub	sp, #36	; 0x24
 80094ba:	af04      	add	r7, sp, #16
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	4608      	mov	r0, r1
 80094c0:	4611      	mov	r1, r2
 80094c2:	461a      	mov	r2, r3
 80094c4:	4603      	mov	r3, r0
 80094c6:	70fb      	strb	r3, [r7, #3]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70bb      	strb	r3, [r7, #2]
 80094cc:	4613      	mov	r3, r2
 80094ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094de:	787c      	ldrb	r4, [r7, #1]
 80094e0:	78ba      	ldrb	r2, [r7, #2]
 80094e2:	78f9      	ldrb	r1, [r7, #3]
 80094e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	4623      	mov	r3, r4
 80094f6:	f7f8 fe08 	bl	800210a <HAL_HCD_HC_Init>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 f8bd 	bl	8009680 <USBH_Get_USB_Status>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950a:	7bbb      	ldrb	r3, [r7, #14]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	bd90      	pop	{r4, r7, pc}

08009514 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7f8 fe78 	bl	8002228 <HAL_HCD_HC_Halt>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f89e 	bl	8009680 <USBH_Get_USB_Status>
 8009544:	4603      	mov	r3, r0
 8009546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009548:	7bbb      	ldrb	r3, [r7, #14]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009552:	b590      	push	{r4, r7, lr}
 8009554:	b089      	sub	sp, #36	; 0x24
 8009556:	af04      	add	r7, sp, #16
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	461a      	mov	r2, r3
 8009560:	4603      	mov	r3, r0
 8009562:	70fb      	strb	r3, [r7, #3]
 8009564:	460b      	mov	r3, r1
 8009566:	70bb      	strb	r3, [r7, #2]
 8009568:	4613      	mov	r3, r2
 800956a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800957a:	787c      	ldrb	r4, [r7, #1]
 800957c:	78ba      	ldrb	r2, [r7, #2]
 800957e:	78f9      	ldrb	r1, [r7, #3]
 8009580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	4623      	mov	r3, r4
 8009596:	f7f8 fe6b 	bl	8002270 <HAL_HCD_HC_SubmitRequest>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f86d 	bl	8009680 <USBH_Get_USB_Status>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd90      	pop	{r4, r7, pc}

080095b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7f9 f8ff 	bl	80027ce <HAL_HCD_HC_GetURBState>
 80095d0:	4603      	mov	r3, r0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f870 	bl	80096d8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80095f8:	20c8      	movs	r0, #200	; 0xc8
 80095fa:	f7f8 f837 	bl	800166c <HAL_Delay>
  return USBH_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
 8009614:	4613      	mov	r3, r2
 8009616:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800961e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	212c      	movs	r1, #44	; 0x2c
 8009626:	fb01 f303 	mul.w	r3, r1, r3
 800962a:	4413      	add	r3, r2
 800962c:	333b      	adds	r3, #59	; 0x3b
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	212c      	movs	r1, #44	; 0x2c
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	4413      	add	r3, r2
 8009640:	3354      	adds	r3, #84	; 0x54
 8009642:	78ba      	ldrb	r2, [r7, #2]
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e008      	b.n	800965a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	212c      	movs	r1, #44	; 0x2c
 800964e:	fb01 f303 	mul.w	r3, r1, r3
 8009652:	4413      	add	r3, r2
 8009654:	3355      	adds	r3, #85	; 0x55
 8009656:	78ba      	ldrb	r2, [r7, #2]
 8009658:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7f7 fffb 	bl	800166c <HAL_Delay>
}
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b03      	cmp	r3, #3
 8009692:	d817      	bhi.n	80096c4 <USBH_Get_USB_Status+0x44>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USBH_Get_USB_Status+0x1c>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096b3 	.word	0x080096b3
 80096a4:	080096b9 	.word	0x080096b9
 80096a8:	080096bf 	.word	0x080096bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
    break;
 80096b0:	e00b      	b.n	80096ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80096b2:	2302      	movs	r3, #2
 80096b4:	73fb      	strb	r3, [r7, #15]
    break;
 80096b6:	e008      	b.n	80096ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80096b8:	2301      	movs	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]
    break;
 80096bc:	e005      	b.n	80096ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80096be:	2302      	movs	r3, #2
 80096c0:	73fb      	strb	r3, [r7, #15]
    break;
 80096c2:	e002      	b.n	80096ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80096c4:	2302      	movs	r3, #2
 80096c6:	73fb      	strb	r3, [r7, #15]
    break;
 80096c8:	bf00      	nop
  }
  return usb_status;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
 80096f0:	e001      	b.n	80096f6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	461a      	mov	r2, r3
 80096fa:	2110      	movs	r1, #16
 80096fc:	4803      	ldr	r0, [pc, #12]	; (800970c <MX_DriverVbusHS+0x34>)
 80096fe:	f7f8 fc6f 	bl	8001fe0 <HAL_GPIO_WritePin>
}
 8009702:	bf00      	nop
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40020800 	.word	0x40020800

08009710 <__errno>:
 8009710:	4b01      	ldr	r3, [pc, #4]	; (8009718 <__errno+0x8>)
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	2000002c 	.word	0x2000002c

0800971c <__libc_init_array>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	4d0d      	ldr	r5, [pc, #52]	; (8009754 <__libc_init_array+0x38>)
 8009720:	4c0d      	ldr	r4, [pc, #52]	; (8009758 <__libc_init_array+0x3c>)
 8009722:	1b64      	subs	r4, r4, r5
 8009724:	10a4      	asrs	r4, r4, #2
 8009726:	2600      	movs	r6, #0
 8009728:	42a6      	cmp	r6, r4
 800972a:	d109      	bne.n	8009740 <__libc_init_array+0x24>
 800972c:	4d0b      	ldr	r5, [pc, #44]	; (800975c <__libc_init_array+0x40>)
 800972e:	4c0c      	ldr	r4, [pc, #48]	; (8009760 <__libc_init_array+0x44>)
 8009730:	f000 f92e 	bl	8009990 <_init>
 8009734:	1b64      	subs	r4, r4, r5
 8009736:	10a4      	asrs	r4, r4, #2
 8009738:	2600      	movs	r6, #0
 800973a:	42a6      	cmp	r6, r4
 800973c:	d105      	bne.n	800974a <__libc_init_array+0x2e>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	f855 3b04 	ldr.w	r3, [r5], #4
 8009744:	4798      	blx	r3
 8009746:	3601      	adds	r6, #1
 8009748:	e7ee      	b.n	8009728 <__libc_init_array+0xc>
 800974a:	f855 3b04 	ldr.w	r3, [r5], #4
 800974e:	4798      	blx	r3
 8009750:	3601      	adds	r6, #1
 8009752:	e7f2      	b.n	800973a <__libc_init_array+0x1e>
 8009754:	080099cc 	.word	0x080099cc
 8009758:	080099cc 	.word	0x080099cc
 800975c:	080099cc 	.word	0x080099cc
 8009760:	080099d0 	.word	0x080099d0

08009764 <malloc>:
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <malloc+0xc>)
 8009766:	4601      	mov	r1, r0
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f000 b87f 	b.w	800986c <_malloc_r>
 800976e:	bf00      	nop
 8009770:	2000002c 	.word	0x2000002c

08009774 <free>:
 8009774:	4b02      	ldr	r3, [pc, #8]	; (8009780 <free+0xc>)
 8009776:	4601      	mov	r1, r0
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	f000 b80b 	b.w	8009794 <_free_r>
 800977e:	bf00      	nop
 8009780:	2000002c 	.word	0x2000002c

08009784 <memset>:
 8009784:	4402      	add	r2, r0
 8009786:	4603      	mov	r3, r0
 8009788:	4293      	cmp	r3, r2
 800978a:	d100      	bne.n	800978e <memset+0xa>
 800978c:	4770      	bx	lr
 800978e:	f803 1b01 	strb.w	r1, [r3], #1
 8009792:	e7f9      	b.n	8009788 <memset+0x4>

08009794 <_free_r>:
 8009794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009796:	2900      	cmp	r1, #0
 8009798:	d044      	beq.n	8009824 <_free_r+0x90>
 800979a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800979e:	9001      	str	r0, [sp, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f1a1 0404 	sub.w	r4, r1, #4
 80097a6:	bfb8      	it	lt
 80097a8:	18e4      	addlt	r4, r4, r3
 80097aa:	f000 f8e3 	bl	8009974 <__malloc_lock>
 80097ae:	4a1e      	ldr	r2, [pc, #120]	; (8009828 <_free_r+0x94>)
 80097b0:	9801      	ldr	r0, [sp, #4]
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	b933      	cbnz	r3, 80097c4 <_free_r+0x30>
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	6014      	str	r4, [r2, #0]
 80097ba:	b003      	add	sp, #12
 80097bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097c0:	f000 b8de 	b.w	8009980 <__malloc_unlock>
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	d908      	bls.n	80097da <_free_r+0x46>
 80097c8:	6825      	ldr	r5, [r4, #0]
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf01      	itttt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	1949      	addeq	r1, r1, r5
 80097d6:	6021      	streq	r1, [r4, #0]
 80097d8:	e7ed      	b.n	80097b6 <_free_r+0x22>
 80097da:	461a      	mov	r2, r3
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	b10b      	cbz	r3, 80097e4 <_free_r+0x50>
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	d9fa      	bls.n	80097da <_free_r+0x46>
 80097e4:	6811      	ldr	r1, [r2, #0]
 80097e6:	1855      	adds	r5, r2, r1
 80097e8:	42a5      	cmp	r5, r4
 80097ea:	d10b      	bne.n	8009804 <_free_r+0x70>
 80097ec:	6824      	ldr	r4, [r4, #0]
 80097ee:	4421      	add	r1, r4
 80097f0:	1854      	adds	r4, r2, r1
 80097f2:	42a3      	cmp	r3, r4
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	d1e0      	bne.n	80097ba <_free_r+0x26>
 80097f8:	681c      	ldr	r4, [r3, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	6053      	str	r3, [r2, #4]
 80097fe:	4421      	add	r1, r4
 8009800:	6011      	str	r1, [r2, #0]
 8009802:	e7da      	b.n	80097ba <_free_r+0x26>
 8009804:	d902      	bls.n	800980c <_free_r+0x78>
 8009806:	230c      	movs	r3, #12
 8009808:	6003      	str	r3, [r0, #0]
 800980a:	e7d6      	b.n	80097ba <_free_r+0x26>
 800980c:	6825      	ldr	r5, [r4, #0]
 800980e:	1961      	adds	r1, r4, r5
 8009810:	428b      	cmp	r3, r1
 8009812:	bf04      	itt	eq
 8009814:	6819      	ldreq	r1, [r3, #0]
 8009816:	685b      	ldreq	r3, [r3, #4]
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	bf04      	itt	eq
 800981c:	1949      	addeq	r1, r1, r5
 800981e:	6021      	streq	r1, [r4, #0]
 8009820:	6054      	str	r4, [r2, #4]
 8009822:	e7ca      	b.n	80097ba <_free_r+0x26>
 8009824:	b003      	add	sp, #12
 8009826:	bd30      	pop	{r4, r5, pc}
 8009828:	20000a40 	.word	0x20000a40

0800982c <sbrk_aligned>:
 800982c:	b570      	push	{r4, r5, r6, lr}
 800982e:	4e0e      	ldr	r6, [pc, #56]	; (8009868 <sbrk_aligned+0x3c>)
 8009830:	460c      	mov	r4, r1
 8009832:	6831      	ldr	r1, [r6, #0]
 8009834:	4605      	mov	r5, r0
 8009836:	b911      	cbnz	r1, 800983e <sbrk_aligned+0x12>
 8009838:	f000 f88c 	bl	8009954 <_sbrk_r>
 800983c:	6030      	str	r0, [r6, #0]
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f887 	bl	8009954 <_sbrk_r>
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	d00a      	beq.n	8009860 <sbrk_aligned+0x34>
 800984a:	1cc4      	adds	r4, r0, #3
 800984c:	f024 0403 	bic.w	r4, r4, #3
 8009850:	42a0      	cmp	r0, r4
 8009852:	d007      	beq.n	8009864 <sbrk_aligned+0x38>
 8009854:	1a21      	subs	r1, r4, r0
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f87c 	bl	8009954 <_sbrk_r>
 800985c:	3001      	adds	r0, #1
 800985e:	d101      	bne.n	8009864 <sbrk_aligned+0x38>
 8009860:	f04f 34ff 	mov.w	r4, #4294967295
 8009864:	4620      	mov	r0, r4
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	20000a44 	.word	0x20000a44

0800986c <_malloc_r>:
 800986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009870:	1ccd      	adds	r5, r1, #3
 8009872:	f025 0503 	bic.w	r5, r5, #3
 8009876:	3508      	adds	r5, #8
 8009878:	2d0c      	cmp	r5, #12
 800987a:	bf38      	it	cc
 800987c:	250c      	movcc	r5, #12
 800987e:	2d00      	cmp	r5, #0
 8009880:	4607      	mov	r7, r0
 8009882:	db01      	blt.n	8009888 <_malloc_r+0x1c>
 8009884:	42a9      	cmp	r1, r5
 8009886:	d905      	bls.n	8009894 <_malloc_r+0x28>
 8009888:	230c      	movs	r3, #12
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	2600      	movs	r6, #0
 800988e:	4630      	mov	r0, r6
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009894:	4e2e      	ldr	r6, [pc, #184]	; (8009950 <_malloc_r+0xe4>)
 8009896:	f000 f86d 	bl	8009974 <__malloc_lock>
 800989a:	6833      	ldr	r3, [r6, #0]
 800989c:	461c      	mov	r4, r3
 800989e:	bb34      	cbnz	r4, 80098ee <_malloc_r+0x82>
 80098a0:	4629      	mov	r1, r5
 80098a2:	4638      	mov	r0, r7
 80098a4:	f7ff ffc2 	bl	800982c <sbrk_aligned>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	4604      	mov	r4, r0
 80098ac:	d14d      	bne.n	800994a <_malloc_r+0xde>
 80098ae:	6834      	ldr	r4, [r6, #0]
 80098b0:	4626      	mov	r6, r4
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	d140      	bne.n	8009938 <_malloc_r+0xcc>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	4631      	mov	r1, r6
 80098ba:	4638      	mov	r0, r7
 80098bc:	eb04 0803 	add.w	r8, r4, r3
 80098c0:	f000 f848 	bl	8009954 <_sbrk_r>
 80098c4:	4580      	cmp	r8, r0
 80098c6:	d13a      	bne.n	800993e <_malloc_r+0xd2>
 80098c8:	6821      	ldr	r1, [r4, #0]
 80098ca:	3503      	adds	r5, #3
 80098cc:	1a6d      	subs	r5, r5, r1
 80098ce:	f025 0503 	bic.w	r5, r5, #3
 80098d2:	3508      	adds	r5, #8
 80098d4:	2d0c      	cmp	r5, #12
 80098d6:	bf38      	it	cc
 80098d8:	250c      	movcc	r5, #12
 80098da:	4629      	mov	r1, r5
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff ffa5 	bl	800982c <sbrk_aligned>
 80098e2:	3001      	adds	r0, #1
 80098e4:	d02b      	beq.n	800993e <_malloc_r+0xd2>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	442b      	add	r3, r5
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	e00e      	b.n	800990c <_malloc_r+0xa0>
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	1b52      	subs	r2, r2, r5
 80098f2:	d41e      	bmi.n	8009932 <_malloc_r+0xc6>
 80098f4:	2a0b      	cmp	r2, #11
 80098f6:	d916      	bls.n	8009926 <_malloc_r+0xba>
 80098f8:	1961      	adds	r1, r4, r5
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	6025      	str	r5, [r4, #0]
 80098fe:	bf18      	it	ne
 8009900:	6059      	strne	r1, [r3, #4]
 8009902:	6863      	ldr	r3, [r4, #4]
 8009904:	bf08      	it	eq
 8009906:	6031      	streq	r1, [r6, #0]
 8009908:	5162      	str	r2, [r4, r5]
 800990a:	604b      	str	r3, [r1, #4]
 800990c:	4638      	mov	r0, r7
 800990e:	f104 060b 	add.w	r6, r4, #11
 8009912:	f000 f835 	bl	8009980 <__malloc_unlock>
 8009916:	f026 0607 	bic.w	r6, r6, #7
 800991a:	1d23      	adds	r3, r4, #4
 800991c:	1af2      	subs	r2, r6, r3
 800991e:	d0b6      	beq.n	800988e <_malloc_r+0x22>
 8009920:	1b9b      	subs	r3, r3, r6
 8009922:	50a3      	str	r3, [r4, r2]
 8009924:	e7b3      	b.n	800988e <_malloc_r+0x22>
 8009926:	6862      	ldr	r2, [r4, #4]
 8009928:	42a3      	cmp	r3, r4
 800992a:	bf0c      	ite	eq
 800992c:	6032      	streq	r2, [r6, #0]
 800992e:	605a      	strne	r2, [r3, #4]
 8009930:	e7ec      	b.n	800990c <_malloc_r+0xa0>
 8009932:	4623      	mov	r3, r4
 8009934:	6864      	ldr	r4, [r4, #4]
 8009936:	e7b2      	b.n	800989e <_malloc_r+0x32>
 8009938:	4634      	mov	r4, r6
 800993a:	6876      	ldr	r6, [r6, #4]
 800993c:	e7b9      	b.n	80098b2 <_malloc_r+0x46>
 800993e:	230c      	movs	r3, #12
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	4638      	mov	r0, r7
 8009944:	f000 f81c 	bl	8009980 <__malloc_unlock>
 8009948:	e7a1      	b.n	800988e <_malloc_r+0x22>
 800994a:	6025      	str	r5, [r4, #0]
 800994c:	e7de      	b.n	800990c <_malloc_r+0xa0>
 800994e:	bf00      	nop
 8009950:	20000a40 	.word	0x20000a40

08009954 <_sbrk_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d06      	ldr	r5, [pc, #24]	; (8009970 <_sbrk_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f7 fde4 	bl	800152c <_sbrk>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_sbrk_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_sbrk_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20000a48 	.word	0x20000a48

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_lock+0x8>)
 8009976:	f000 b809 	b.w	800998c <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20000a4c 	.word	0x20000a4c

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_unlock+0x8>)
 8009982:	f000 b804 	b.w	800998e <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20000a4c 	.word	0x20000a4c

0800998c <__retarget_lock_acquire_recursive>:
 800998c:	4770      	bx	lr

0800998e <__retarget_lock_release_recursive>:
 800998e:	4770      	bx	lr

08009990 <_init>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr

0800999c <_fini>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr
