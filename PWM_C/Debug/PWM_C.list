
PWM_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000914c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009314  08009314  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800931c  0800931c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000924  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009b4  200009b4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f387  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004049  00000000  00000000  0003f447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  00043490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001740  00000000  00000000  00044d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a59  00000000  00000000  00046490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef49  00000000  00000000  0006dee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e549c  00000000  00000000  0008ce32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001722ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb0  00000000  00000000  00172320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080092e0 	.word	0x080092e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	080092e0 	.word	0x080092e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint16_t duty =0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	83fb      	strh	r3, [r7, #30]
TIM_OC_InitTypeDef sConfigOC = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 ffa0 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f83a 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa5a 	bl	80009cc <MX_GPIO_Init>
  MX_CRC_Init();
 8000518:	f000 f8a0 	bl	800065c <MX_CRC_Init>
  MX_DMA2D_Init();
 800051c:	f000 f8b2 	bl	8000684 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8000520:	f000 f8e2 	bl	80006e8 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000524:	f000 f920 	bl	8000768 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000528:	f000 f954 	bl	80007d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800052c:	f000 fa24 	bl	8000978 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000530:	f008 fa88 	bl	8008a44 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8000534:	f000 f99e 	bl	8000874 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000538:	2100      	movs	r1, #0
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0x94>)
 800053c:	f004 f8ca 	bl	80046d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  duty +=100;
 8000540:	8bfb      	ldrh	r3, [r7, #30]
 8000542:	3364      	adds	r3, #100	; 0x64
 8000544:	83fb      	strh	r3, [r7, #30]

	  if (duty > 999)
 8000546:	8bfb      	ldrh	r3, [r7, #30]
 8000548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054c:	d301      	bcc.n	8000552 <main+0x62>
	  {
		  duty = 100;
 800054e:	2364      	movs	r3, #100	; 0x64
 8000550:	83fb      	strh	r3, [r7, #30]
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000552:	2360      	movs	r3, #96	; 0x60
 8000554:	603b      	str	r3, [r7, #0]
	  sConfigOC.Pulse=duty;
 8000556:	8bfb      	ldrh	r3, [r7, #30]
 8000558:	607b      	str	r3, [r7, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
	  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x94>)
 800056a:	f004 fa83 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>

	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <main+0x94>)
 8000572:	f004 f8af 	bl	80046d4 <HAL_TIM_PWM_Start>
	  HAL_Delay(250);
 8000576:	20fa      	movs	r0, #250	; 0xfa
 8000578:	f000 ffac 	bl	80014d4 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057c:	f008 fa88 	bl	8008a90 <MX_USB_HOST_Process>
	  duty +=100;
 8000580:	e7de      	b.n	8000540 <main+0x50>
 8000582:	bf00      	nop
 8000584:	200001e8 	.word	0x200001e8

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f008 fd9c 	bl	80090d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000600:	2348      	movs	r3, #72	; 0x48
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f003 f9fd 	bl	8003a10 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 fbf0 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fc5f 	bl	8003f00 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000648:	f000 fbda 	bl	8000e00 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_CRC_Init+0x20>)
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <MX_CRC_Init+0x24>)
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_CRC_Init+0x20>)
 8000668:	f001 f83a 	bl	80016e0 <HAL_CRC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000672:	f000 fbc5 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000ac 	.word	0x200000ac
 8000680:	40023000 	.word	0x40023000

08000684 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <MX_DMA2D_Init+0x60>)
 800068c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006ba:	f001 f82d 	bl	8001718 <HAL_DMA2D_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006c4:	f000 fb9c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006c8:	2101      	movs	r1, #1
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_DMA2D_Init+0x5c>)
 80006cc:	f001 f97e 	bl	80019cc <HAL_DMA2D_ConfigLayer>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006d6:	f000 fb93 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b4 	.word	0x200000b4
 80006e4:	4002b000 	.word	0x4002b000

080006e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C3_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_I2C3_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_I2C3_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <MX_I2C3_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_I2C3_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_I2C3_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_I2C3_Init+0x74>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_I2C3_Init+0x74>)
 8000726:	f002 ffb3 	bl	8003690 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 fb66 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_I2C3_Init+0x74>)
 8000738:	f003 f8ee 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 fb5d 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C3_Init+0x74>)
 800074a:	f003 f921 	bl	8003990 <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 fb54 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000f4 	.word	0x200000f4
 8000760:	40005c00 	.word	0x40005c00
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_SPI5_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_SPI5_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI5_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI5_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI5_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI5_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI5_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI5_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI5_Init+0x64>)
 800079c:	2218      	movs	r2, #24
 800079e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI5_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI5_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI5_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI5_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI5_Init+0x64>)
 80007ba:	f003 fdf3 	bl	80043a4 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 fb1c 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000148 	.word	0x20000148
 80007d0:	40015000 	.word	0x40015000

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM1_Init+0x98>)
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <MX_TIM1_Init+0x9c>)
 80007f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM1_Init+0x98>)
 8000804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_TIM1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_TIM1_Init+0x98>)
 800081e:	f003 fe4a 	bl	80044b6 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000828:	f000 faea 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_TIM1_Init+0x98>)
 800083a:	f004 f9dd 	bl	8004bf8 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000844:	f000 fadc 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM1_Init+0x98>)
 8000856:	f004 fdcf 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 face 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001a0 	.word	0x200001a0
 8000870:	40010000 	.word	0x40010000

08000874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <MX_TIM4_Init+0xfc>)
 8000898:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_TIM4_Init+0x100>)
 800089a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <MX_TIM4_Init+0xfc>)
 800089e:	2247      	movs	r2, #71	; 0x47
 80008a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008bc:	482c      	ldr	r0, [pc, #176]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008be:	f003 feb9 	bl	8004634 <HAL_TIM_PWM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 fa9a 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4619      	mov	r1, r3
 80008da:	4825      	ldr	r0, [pc, #148]	; (8000970 <MX_TIM4_Init+0xfc>)
 80008dc:	f004 fd8c 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80008e6:	f000 fa8b 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ea:	2360      	movs	r3, #96	; 0x60
 80008ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_TIM4_Init+0xfc>)
 8000902:	f004 f8b7 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800090c:	f000 fa78 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.Pulse = 249;
 8000910:	23f9      	movs	r3, #249	; 0xf9
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2204      	movs	r2, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_TIM4_Init+0xfc>)
 800091c:	f004 f8aa 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000926:	f000 fa6b 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.Pulse = 499;
 800092a:	f240 13f3 	movw	r3, #499	; 0x1f3
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2208      	movs	r2, #8
 8000934:	4619      	mov	r1, r3
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <MX_TIM4_Init+0xfc>)
 8000938:	f004 f89c 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000942:	f000 fa5d 	bl	8000e00 <Error_Handler>
  }
  sConfigOC.Pulse = 999;
 8000946:	f240 33e7 	movw	r3, #999	; 0x3e7
 800094a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	220c      	movs	r2, #12
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM4_Init+0xfc>)
 8000954:	f004 f88e 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800095e:	f000 fa4f 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM4_Init+0xfc>)
 8000964:	f000 fbba 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001e8 	.word	0x200001e8
 8000974:	40000800 	.word	0x40000800

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f004 fdb2 	bl	8005518 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 fa21 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000230 	.word	0x20000230
 80009c8:	40011000 	.word	0x40011000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	4bb2      	ldr	r3, [pc, #712]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4ab1      	ldr	r2, [pc, #708]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4baf      	ldr	r3, [pc, #700]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	4bab      	ldr	r3, [pc, #684]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4aaa      	ldr	r2, [pc, #680]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4ba8      	ldr	r3, [pc, #672]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4ba4      	ldr	r3, [pc, #656]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4aa3      	ldr	r2, [pc, #652]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4ba1      	ldr	r3, [pc, #644]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4b9d      	ldr	r3, [pc, #628]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a9c      	ldr	r2, [pc, #624]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b9a      	ldr	r3, [pc, #616]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b96      	ldr	r3, [pc, #600]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a95      	ldr	r2, [pc, #596]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b8f      	ldr	r3, [pc, #572]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a8e      	ldr	r2, [pc, #568]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b8c      	ldr	r3, [pc, #560]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b88      	ldr	r3, [pc, #544]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b85      	ldr	r3, [pc, #532]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b81      	ldr	r3, [pc, #516]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a80      	ldr	r2, [pc, #512]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <MX_GPIO_Init+0x2e4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2116      	movs	r1, #22
 8000ac6:	487b      	ldr	r0, [pc, #492]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000ac8:	f001 f9be 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	4879      	ldr	r0, [pc, #484]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000ad2:	f001 f9b9 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000adc:	4877      	ldr	r0, [pc, #476]	; (8000cbc <MX_GPIO_Init+0x2f0>)
 8000ade:	f001 f9b3 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ae8:	4875      	ldr	r0, [pc, #468]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000aea:	f001 f9ad 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000aee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b00:	230c      	movs	r3, #12
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	486e      	ldr	r0, [pc, #440]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000b0c:	f000 fff0 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b22:	230e      	movs	r3, #14
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4865      	ldr	r0, [pc, #404]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000b2e:	f000 ffdf 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b42:	230c      	movs	r3, #12
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4859      	ldr	r0, [pc, #356]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000b4e:	f000 ffcf 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b52:	2316      	movs	r3, #22
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4852      	ldr	r0, [pc, #328]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000b6a:	f000 ffc1 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b6e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	484c      	ldr	r0, [pc, #304]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000b86:	f000 ffb3 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000b8a:	f641 0358 	movw	r3, #6232	; 0x1858
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b9c:	230e      	movs	r3, #14
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000ba8:	f000 ffa2 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	483d      	ldr	r0, [pc, #244]	; (8000cb8 <MX_GPIO_Init+0x2ec>)
 8000bc4:	f000 ff94 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bc8:	2320      	movs	r3, #32
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bcc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <MX_GPIO_Init+0x2e8>)
 8000bde:	f000 ff87 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000be2:	2303      	movs	r3, #3
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf2:	2309      	movs	r3, #9
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4832      	ldr	r0, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bfe:	f000 ff77 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c02:	2304      	movs	r3, #4
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000c16:	f000 ff6b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000c1a:	f240 1333 	movw	r3, #307	; 0x133
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000c38:	f000 ff5a 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000c3c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	481c      	ldr	r0, [pc, #112]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000c5a:	f000 ff49 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c70:	230e      	movs	r3, #14
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000c7c:	f000 ff38 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000c80:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c92:	230c      	movs	r3, #12
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <MX_GPIO_Init+0x2f0>)
 8000c9e:	f000 ff27 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cac:	e010      	b.n	8000cd0 <MX_GPIO_Init+0x304>
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40021800 	.word	0x40021800
 8000cc4:	40021400 	.word	0x40021400
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	483c      	ldr	r0, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x400>)
 8000cdc:	f000 ff08 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ce0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4834      	ldr	r0, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x400>)
 8000cfa:	f000 fef9 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000cfe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d10:	230e      	movs	r3, #14
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <MX_GPIO_Init+0x404>)
 8000d1c:	f000 fee8 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000d20:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d32:	230e      	movs	r3, #14
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <MX_GPIO_Init+0x408>)
 8000d3e:	f000 fed7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000d42:	2348      	movs	r3, #72	; 0x48
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d52:	230e      	movs	r3, #14
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <MX_GPIO_Init+0x400>)
 8000d5e:	f000 fec7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d74:	2309      	movs	r3, #9
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <MX_GPIO_Init+0x404>)
 8000d80:	f000 feb6 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d84:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0x404>)
 8000d9e:	f000 fea7 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da2:	2320      	movs	r3, #32
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db2:	230c      	movs	r3, #12
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x40c>)
 8000dbe:	f000 fe97 	bl	8001af0 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3738      	adds	r7, #56	; 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020c00 	.word	0x40020c00
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dee:	f000 fb51 	bl	8001494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40001000 	.word	0x40001000

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023000 	.word	0x40023000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_DMA2D_MspInit+0x48>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d115      	bne.n	8000ede <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_DMA2D_MspInit+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_DMA2D_MspInit+0x4c>)
 8000ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_DMA2D_MspInit+0x4c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	205a      	movs	r0, #90	; 0x5a
 8000ed4:	f000 fbda 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ed8:	205a      	movs	r0, #90	; 0x5a
 8000eda:	f000 fbf3 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	4002b000 	.word	0x4002b000
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_I2C_MspInit+0xc4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d14b      	bne.n	8000faa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_I2C_MspInit+0xcc>)
 8000f68:	f000 fdc2 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f72:	2312      	movs	r3, #18
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_I2C_MspInit+0xd0>)
 8000f8a:	f000 fdb1 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40005c00 	.word	0x40005c00
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_SPI_MspInit+0x84>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12c      	bne.n	8001040 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_SPI_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_SPI_MspInit+0x88>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_SPI_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800101e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001030:	2305      	movs	r3, #5
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_SPI_MspInit+0x8c>)
 800103c:	f000 fd58 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40015000 	.word	0x40015000
 800104c:	40023800 	.word	0x40023800
 8001050:	40021400 	.word	0x40021400

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_TIM_Base_MspInit+0x3c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10d      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x40>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0x40>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_Base_MspInit+0x40>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40010000 	.word	0x40010000
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10d      	bne.n	80010c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_TIM_PWM_MspInit+0x40>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40000800 	.word	0x40000800
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_TIM_MspPostInit+0x68>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11e      	bne.n	800113c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_TIM_MspPostInit+0x6c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0x6c>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_TIM_MspPostInit+0x6c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800111a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800111e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_TIM_MspPostInit+0x70>)
 8001138:	f000 fcda 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40000800 	.word	0x40000800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12c      	bne.n	80011cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x8c>)
 80011c8:	f000 fc92 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_InitTick+0xe4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_InitTick+0xe4>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_InitTick+0xe4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f003 f892 	bl	8004340 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001226:	f003 f863 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 800122a:	6378      	str	r0, [r7, #52]	; 0x34
 800122c:	e004      	b.n	8001238 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800122e:	f003 f85f 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8001232:	4603      	mov	r3, r0
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <HAL_InitTick+0xe8>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3b01      	subs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_InitTick+0xec>)
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_InitTick+0xf0>)
 800124a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_InitTick+0xec>)
 800124e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001252:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_InitTick+0xec>)
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_InitTick+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_InitTick+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_InitTick+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_InitTick+0xec>)
 800126e:	f003 f922 	bl	80044b6 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <HAL_InitTick+0xec>)
 8001282:	f003 f967 	bl	8004554 <HAL_TIM_Base_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001294:	2036      	movs	r0, #54	; 0x36
 8001296:	f000 fa15 	bl	80016c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d808      	bhi.n	80012b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2036      	movs	r0, #54	; 0x36
 80012a6:	f000 f9f1 	bl	800168c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0xf4>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e002      	b.n	80012b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	20000274 	.word	0x20000274
 80012d0:	40001000 	.word	0x40001000
 80012d4:	20000004 	.word	0x20000004

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM6_DAC_IRQHandler+0x10>)
 8001336:	f003 fa95 	bl	8004864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000274 	.word	0x20000274

08001344 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <OTG_HS_IRQHandler+0x10>)
 800134a:	f001 f801 	bl	8002350 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200006a0 	.word	0x200006a0

08001358 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA2D_IRQHandler+0x10>)
 800135e:	f000 fa24 	bl	80017aa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000b4 	.word	0x200000b4

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f007 fe60 	bl	8009060 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20030000 	.word	0x20030000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	200002bc 	.word	0x200002bc
 80013d4:	200009b8 	.word	0x200009b8

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f007 fe1f 	bl	800906c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f85f 	bl	80004f0 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001440:	08009324 	.word	0x08009324
  ldr r2, =_sbss
 8001444:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001448:	200009b4 	.word	0x200009b4

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f8fc 	bl	8001676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f7ff feae 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fcc2 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200002c0 	.word	0x200002c0

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200002c0 	.word	0x200002c0

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff4c 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169e:	f7ff ff61 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	6978      	ldr	r0, [r7, #20]
 80016aa:	f7ff ffb1 	bl	8001610 <NVIC_EncodePriority>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff80 	bl	80015bc <__NVIC_SetPriority>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff54 	bl	8001580 <__NVIC_EnableIRQ>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	795b      	ldrb	r3, [r3, #5]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fbaa 	bl	8000e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e03b      	b.n	80017a2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fbae 	bl	8000ea0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	f023 0107 	bic.w	r1, r3, #7
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001782:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68d1      	ldr	r1, [r2, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	430b      	orrs	r3, r1
 8001790:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d026      	beq.n	800181a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d021      	beq.n	800181a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2204      	movs	r2, #4
 80017fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d026      	beq.n	8001872 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d021      	beq.n	8001872 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800183c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2220      	movs	r2, #32
 8001844:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d026      	beq.n	80018ca <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001882:	2b00      	cmp	r3, #0
 8001884:	d021      	beq.n	80018ca <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001894:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2208      	movs	r2, #8
 800189c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	f043 0204 	orr.w	r2, r3, #4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2204      	movs	r2, #4
 80018ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00e      	beq.n	80018fc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f853 	bl	80019a2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d024      	beq.n	8001950 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01f      	beq.n	8001950 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800191e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2202      	movs	r2, #2
 8001926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01f      	beq.n	800199a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01a      	beq.n	800199a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001972:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f80e 	bl	80019b6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_DMA2D_ConfigLayer+0x20>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e079      	b.n	8001ae0 <HAL_DMA2D_ConfigLayer+0x114>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	3318      	adds	r3, #24
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <HAL_DMA2D_ConfigLayer+0x120>)
 8001a18:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b0a      	cmp	r3, #10
 8001a20:	d003      	beq.n	8001a2a <HAL_DMA2D_ConfigLayer+0x5e>
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b09      	cmp	r3, #9
 8001a28:	d107      	bne.n	8001a3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e005      	b.n	8001a46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d120      	bne.n	8001a8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	ea02 0103 	and.w	r1, r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b0a      	cmp	r3, #10
 8001a74:	d003      	beq.n	8001a7e <HAL_DMA2D_ConfigLayer+0xb2>
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b09      	cmp	r3, #9
 8001a7c:	d127      	bne.n	8001ace <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	e01f      	b.n	8001ace <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	ea02 0103 	and.w	r1, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b0a      	cmp	r3, #10
 8001ab6:	d003      	beq.n	8001ac0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d106      	bne.n	8001ace <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001acc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	ff03000f 	.word	0xff03000f

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e177      	b.n	8001dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8166 	bne.w	8001df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80c0 	beq.w	8001df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a61      	ldr	r2, [pc, #388]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_GPIO_Init+0x32c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d037      	beq.n	8001d2e <HAL_GPIO_Init+0x23e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x330>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d031      	beq.n	8001d2a <HAL_GPIO_Init+0x23a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x334>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x236>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_GPIO_Init+0x338>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x232>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x33c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x22e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x340>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x22a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x344>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a51      	ldr	r2, [pc, #324]	; (8001e38 <HAL_GPIO_Init+0x348>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <HAL_GPIO_Init+0x34c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	; (8001e40 <HAL_GPIO_Init+0x350>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001d06:	2309      	movs	r3, #9
 8001d08:	e012      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	e010      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d0e:	2308      	movs	r3, #8
 8001d10:	e00e      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00c      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d16:	2306      	movs	r3, #6
 8001d18:	e00a      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x240>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x328>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d72:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x354>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f ae84 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40022400 	.word	0x40022400
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	041a      	lsls	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	619a      	str	r2, [r3, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7c:	b08f      	sub	sp, #60	; 0x3c
 8001e7e:	af0a      	add	r7, sp, #40	; 0x28
 8001e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e054      	b.n	8001f36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f006 fe2a 	bl	8008b00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fe58 	bl	8005b80 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	687e      	ldr	r6, [r7, #4]
 8001ed8:	466d      	mov	r5, sp
 8001eda:	f106 0410 	add.w	r4, r6, #16
 8001ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eee:	1d33      	adds	r3, r6, #4
 8001ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f003 fdd2 	bl	8005a9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fe4f 	bl	8005ba2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	687e      	ldr	r6, [r7, #4]
 8001f0c:	466d      	mov	r5, sp
 8001f0e:	f106 0410 	add.w	r4, r6, #16
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f22:	1d33      	adds	r3, r6, #4
 8001f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f003 ffd8 	bl	8005edc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b089      	sub	sp, #36	; 0x24
 8001f42:	af04      	add	r7, sp, #16
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	70fb      	strb	r3, [r7, #3]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70bb      	strb	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_HCD_HC_Init+0x28>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e076      	b.n	8002054 <HAL_HCD_HC_Init+0x116>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	333d      	adds	r3, #61	; 0x3d
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3338      	adds	r3, #56	; 0x38
 8001f8e:	787a      	ldrb	r2, [r7, #1]
 8001f90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3340      	adds	r3, #64	; 0x40
 8001fa0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fa2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3339      	adds	r3, #57	; 0x39
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333f      	adds	r3, #63	; 0x3f
 8001fc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	78ba      	ldrb	r2, [r7, #2]
 8001fce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd2:	b2d0      	uxtb	r0, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	212c      	movs	r1, #44	; 0x2c
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	333a      	adds	r3, #58	; 0x3a
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da09      	bge.n	8002000 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	333b      	adds	r3, #59	; 0x3b
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e008      	b.n	8002012 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	333b      	adds	r3, #59	; 0x3b
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	333c      	adds	r3, #60	; 0x3c
 8002020:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002024:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	787c      	ldrb	r4, [r7, #1]
 800202c:	78ba      	ldrb	r2, [r7, #2]
 800202e:	78f9      	ldrb	r1, [r7, #3]
 8002030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002032:	9302      	str	r3, [sp, #8]
 8002034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4623      	mov	r3, r4
 8002042:	f004 f8d1 	bl	80061e8 <USB_HC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}

0800205c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_HCD_HC_Halt+0x1e>
 8002076:	2302      	movs	r3, #2
 8002078:	e00f      	b.n	800209a <HAL_HCD_HC_Halt+0x3e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fb21 	bl	80066d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	70fb      	strb	r3, [r7, #3]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70bb      	strb	r3, [r7, #2]
 80020ba:	4613      	mov	r3, r2
 80020bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	333b      	adds	r3, #59	; 0x3b
 80020cc:	78ba      	ldrb	r2, [r7, #2]
 80020ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	787a      	ldrb	r2, [r7, #1]
 80020e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020e2:	7c3b      	ldrb	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d112      	bne.n	800210e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3342      	adds	r3, #66	; 0x42
 80020f6:	2203      	movs	r2, #3
 80020f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	333d      	adds	r3, #61	; 0x3d
 8002108:	7f3a      	ldrb	r2, [r7, #28]
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e008      	b.n	8002120 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3342      	adds	r3, #66	; 0x42
 800211c:	2202      	movs	r2, #2
 800211e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b03      	cmp	r3, #3
 8002124:	f200 80c6 	bhi.w	80022b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002128:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002141 	.word	0x08002141
 8002134:	080022a1 	.word	0x080022a1
 8002138:	080021a5 	.word	0x080021a5
 800213c:	08002223 	.word	0x08002223
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002140:	7c3b      	ldrb	r3, [r7, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	f040 80b8 	bne.w	80022b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002148:	78bb      	ldrb	r3, [r7, #2]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 80b4 	bne.w	80022b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002150:	8b3b      	ldrh	r3, [r7, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3355      	adds	r3, #85	; 0x55
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3355      	adds	r3, #85	; 0x55
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3342      	adds	r3, #66	; 0x42
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800218e:	e093      	b.n	80022b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3342      	adds	r3, #66	; 0x42
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
      break;
 80021a2:	e089      	b.n	80022b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021a4:	78bb      	ldrb	r3, [r7, #2]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11d      	bne.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3355      	adds	r3, #85	; 0x55
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3342      	adds	r3, #66	; 0x42
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021d0:	e073      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3342      	adds	r3, #66	; 0x42
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
      break;
 80021e4:	e069      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3354      	adds	r3, #84	; 0x54
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3342      	adds	r3, #66	; 0x42
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
      break;
 800220c:	e055      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3342      	adds	r3, #66	; 0x42
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
      break;
 8002220:	e04b      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002222:	78bb      	ldrb	r3, [r7, #2]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d11d      	bne.n	8002264 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3355      	adds	r3, #85	; 0x55
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3342      	adds	r3, #66	; 0x42
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800224e:	e034      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3342      	adds	r3, #66	; 0x42
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e02a      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3354      	adds	r3, #84	; 0x54
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3342      	adds	r3, #66	; 0x42
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
      break;
 800228a:	e016      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
      break;
 800229e:	e00c      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3342      	adds	r3, #66	; 0x42
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80022b4:	bf00      	nop
 80022b6:	e000      	b.n	80022ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80022b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3344      	adds	r3, #68	; 0x44
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	8b3a      	ldrh	r2, [r7, #24]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	202c      	movs	r0, #44	; 0x2c
 80022d4:	fb00 f303 	mul.w	r3, r0, r3
 80022d8:	440b      	add	r3, r1
 80022da:	334c      	adds	r3, #76	; 0x4c
 80022dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3360      	adds	r3, #96	; 0x60
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3350      	adds	r3, #80	; 0x50
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3339      	adds	r3, #57	; 0x39
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3361      	adds	r3, #97	; 0x61
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	222c      	movs	r2, #44	; 0x2c
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	3338      	adds	r3, #56	; 0x38
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	18d1      	adds	r1, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	f004 f874 	bl	800642c <USB_HC_StartXfer>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop

08002350 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fd75 	bl	8005e56 <USB_GetMode>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	f040 80f6 	bne.w	8002560 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 fd59 	bl	8005e30 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80ec 	beq.w	800255e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fd50 	bl	8005e30 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800239a:	d104      	bne.n	80023a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fd40 	bl	8005e30 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ba:	d104      	bne.n	80023c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fd30 	bl	8005e30 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023da:	d104      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fd20 	bl	8005e30 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d103      	bne.n	8002402 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2202      	movs	r2, #2
 8002400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fd12 	bl	8005e30 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002416:	d11c      	bne.n	8002452 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002420:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002432:	2110      	movs	r1, #16
 8002434:	6938      	ldr	r0, [r7, #16]
 8002436:	f003 fc01 	bl	8005c3c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800243a:	6938      	ldr	r0, [r7, #16]
 800243c:	f003 fc32 	bl	8005ca4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f003 fe08 	bl	800605c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f006 fbd1 	bl	8008bf4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fcea 	bl	8005e30 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002466:	d102      	bne.n	800246e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f001 f89e 	bl	80035aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fcdc 	bl	8005e30 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d106      	bne.n	8002490 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f006 fb9a 	bl	8008bbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2208      	movs	r2, #8
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fccb 	bl	8005e30 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d101      	bne.n	80024a8 <HAL_HCD_IRQHandler+0x158>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_HCD_IRQHandler+0x15a>
 80024a8:	2300      	movs	r3, #0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0210 	bic.w	r2, r2, #16
 80024bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 ffa1 	bl	8003406 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0210 	orr.w	r2, r2, #16
 80024d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fca9 	bl	8005e30 <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e8:	d13a      	bne.n	8002560 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 f8de 	bl	80066b0 <USB_HC_ReadInterrupt>
 80024f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e025      	b.n	8002548 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d018      	beq.n	8002542 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002526:	d106      	bne.n	8002536 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f8ab 	bl	800268a <HCD_HC_IN_IRQHandler>
 8002534:	e005      	b.n	8002542 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fbf9 	bl	8002d34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	429a      	cmp	r2, r3
 8002550:	d3d4      	bcc.n	80024fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255a:	615a      	str	r2, [r3, #20]
 800255c:	e000      	b.n	8002560 <HAL_HCD_IRQHandler+0x210>
      return;
 800255e:	bf00      	nop
    }
  }
}
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_HCD_Start+0x16>
 8002578:	2302      	movs	r3, #2
 800257a:	e013      	b.n	80025a4 <HAL_HCD_Start+0x3e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fdca 	bl	8006124 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fae2 	bl	8005b5e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_HCD_Stop+0x16>
 80025be:	2302      	movs	r3, #2
 80025c0:	e00d      	b.n	80025de <HAL_HCD_Stop+0x32>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 f9b8 	bl	8006944 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fd6c 	bl	80060d0 <USB_ResetPort>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	781b      	ldrb	r3, [r3, #0]
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	212c      	movs	r1, #44	; 0x2c
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3350      	adds	r3, #80	; 0x50
 8002644:	681b      	ldr	r3, [r3, #0]
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fdb0 	bl	80061c4 <USB_GetCurrentFrame>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fd8b 	bl	8006196 <USB_GetHostSpeed>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d11a      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2304      	movs	r3, #4
 80026ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3361      	adds	r3, #97	; 0x61
 80026da:	2206      	movs	r2, #6
 80026dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fff2 	bl	80066d2 <USB_HC_Halt>
 80026ee:	e0af      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d11b      	bne.n	8002740 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	2207      	movs	r2, #7
 800272c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f003 ffca 	bl	80066d2 <USB_HC_Halt>
 800273e:	e087      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d109      	bne.n	800276a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	461a      	mov	r2, r3
 8002764:	2320      	movs	r3, #32
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e072      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11a      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	461a      	mov	r2, r3
 800278e:	2308      	movs	r3, #8
 8002790:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3361      	adds	r3, #97	; 0x61
 80027a0:	2205      	movs	r2, #5
 80027a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 ff8f 	bl	80066d2 <USB_HC_Halt>
 80027b4:	e04c      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027cc:	d11b      	bne.n	8002806 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3361      	adds	r3, #97	; 0x61
 80027f0:	2208      	movs	r2, #8
 80027f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 ff67 	bl	80066d2 <USB_HC_Halt>
 8002804:	e024      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d119      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3361      	adds	r3, #97	; 0x61
 800283c:	2206      	movs	r2, #6
 800283e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f003 ff41 	bl	80066d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002866:	d112      	bne.n	800288e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 ff2d 	bl	80066d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800288c:	e24e      	b.n	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	f040 80df 	bne.w	8002a64 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d019      	beq.n	80028e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3348      	adds	r3, #72	; 0x48
 80028bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	0159      	lsls	r1, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	440b      	add	r3, r1
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028d0:	1ad2      	subs	r2, r2, r3
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	202c      	movs	r0, #44	; 0x2c
 80028d8:	fb00 f303 	mul.w	r3, r0, r3
 80028dc:	440b      	add	r3, r1
 80028de:	3350      	adds	r3, #80	; 0x50
 80028e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	335c      	adds	r3, #92	; 0x5c
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2301      	movs	r3, #1
 8002916:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	333f      	adds	r3, #63	; 0x3f
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	333f      	adds	r3, #63	; 0x3f
 800293a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800293c:	2b02      	cmp	r3, #2
 800293e:	d111      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fec1 	bl	80066d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2310      	movs	r3, #16
 8002960:	6093      	str	r3, [r2, #8]
 8002962:	e03a      	b.n	80029da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333f      	adds	r3, #63	; 0x3f
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d009      	beq.n	800298c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333f      	adds	r3, #63	; 0x3f
 8002986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002988:	2b01      	cmp	r3, #1
 800298a:	d126      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	0151      	lsls	r1, r2, #5
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	440a      	add	r2, r1
 80029a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	202c      	movs	r0, #44	; 0x2c
 80029c8:	fb00 f303 	mul.w	r3, r0, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f006 f91b 	bl	8008c10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d12b      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3348      	adds	r3, #72	; 0x48
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	202c      	movs	r0, #44	; 0x2c
 80029f8:	fb00 f202 	mul.w	r2, r0, r2
 80029fc:	440a      	add	r2, r1
 80029fe:	3240      	adds	r2, #64	; 0x40
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 818e 	beq.w	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3354      	adds	r3, #84	; 0x54
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2d8      	uxtb	r0, r3
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3354      	adds	r3, #84	; 0x54
 8002a34:	4602      	mov	r2, r0
 8002a36:	701a      	strb	r2, [r3, #0]
}
 8002a38:	e178      	b.n	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3354      	adds	r3, #84	; 0x54
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	f083 0301 	eor.w	r3, r3, #1
 8002a4e:	b2d8      	uxtb	r0, r3
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3354      	adds	r3, #84	; 0x54
 8002a5e:	4602      	mov	r2, r0
 8002a60:	701a      	strb	r2, [r3, #0]
}
 8002a62:	e163      	b.n	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	f040 80f6 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	; 0x61
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d109      	bne.n	8002aa4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3360      	adds	r3, #96	; 0x60
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e0c9      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d109      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e0b5      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d009      	beq.n	8002af4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3361      	adds	r3, #97	; 0x61
 8002aee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d150      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	202c      	movs	r0, #44	; 0x2c
 8002b0c:	fb00 f303 	mul.w	r3, r0, r3
 8002b10:	440b      	add	r3, r1
 8002b12:	335c      	adds	r3, #92	; 0x5c
 8002b14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d912      	bls.n	8002b50 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	335c      	adds	r3, #92	; 0x5c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b4e:	e073      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	2202      	movs	r2, #2
 8002b60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b78:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b80:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b94:	e050      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3361      	adds	r3, #97	; 0x61
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d122      	bne.n	8002bf0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e023      	b.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	d119      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	202c      	movs	r0, #44	; 0x2c
 8002c1c:	fb00 f303 	mul.w	r3, r0, r3
 8002c20:	440b      	add	r3, r1
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	2204      	movs	r2, #4
 8002c36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2302      	movs	r3, #2
 8002c48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	b2d9      	uxtb	r1, r3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	fb00 f303 	mul.w	r3, r0, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3360      	adds	r3, #96	; 0x60
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f005 ffd5 	bl	8008c10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c66:	e061      	b.n	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d156      	bne.n	8002d2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	333f      	adds	r3, #63	; 0x3f
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d111      	bne.n	8002cb6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	335c      	adds	r3, #92	; 0x5c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fd0f 	bl	80066d2 <USB_HC_Halt>
 8002cb4:	e031      	b.n	8002d1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	333f      	adds	r3, #63	; 0x3f
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	333f      	adds	r3, #63	; 0x3f
 8002cd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d11d      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d110      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3361      	adds	r3, #97	; 0x61
 8002d06:	2203      	movs	r2, #3
 8002d08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fcdc 	bl	80066d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	2310      	movs	r3, #16
 8002d2a:	6093      	str	r3, [r2, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11a      	bne.n	8002d9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	461a      	mov	r2, r3
 8002d72:	2304      	movs	r3, #4
 8002d74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3361      	adds	r3, #97	; 0x61
 8002d84:	2206      	movs	r2, #6
 8002d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fc9d 	bl	80066d2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d98:	e331      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d12e      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	333d      	adds	r3, #61	; 0x3d
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	f040 8313 	bne.w	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	333d      	adds	r3, #61	; 0x3d
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3360      	adds	r3, #96	; 0x60
 8002df8:	2202      	movs	r2, #2
 8002dfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fc63 	bl	80066d2 <USB_HC_Halt>
}
 8002e0c:	e2f7      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d112      	bne.n	8002e4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fc44 	bl	80066d2 <USB_HC_Halt>
}
 8002e4a:	e2d8      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d140      	bne.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d111      	bne.n	8002eae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	333d      	adds	r3, #61	; 0x3d
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3361      	adds	r3, #97	; 0x61
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fbf8 	bl	80066d2 <USB_HC_Halt>
}
 8002ee2:	e28c      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d12c      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3361      	adds	r3, #97	; 0x61
 8002f08:	2204      	movs	r2, #4
 8002f0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	333d      	adds	r3, #61	; 0x3d
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	335c      	adds	r3, #92	; 0x5c
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fbc9 	bl	80066d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	6093      	str	r3, [r2, #8]
}
 8002f52:	e254      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11a      	bne.n	8002fa0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	2308      	movs	r3, #8
 8002f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fb9a 	bl	80066d2 <USB_HC_Halt>
}
 8002f9e:	e22e      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d140      	bne.n	8003038 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	333d      	adds	r3, #61	; 0x3d
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d112      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	333d      	adds	r3, #61	; 0x3d
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f003 fb57 	bl	80066d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	2310      	movs	r3, #16
 8003034:	6093      	str	r3, [r2, #8]
}
 8003036:	e1e2      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d164      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d111      	bne.n	800307a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3361      	adds	r3, #97	; 0x61
 8003064:	2206      	movs	r2, #6
 8003066:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f003 fb2d 	bl	80066d2 <USB_HC_Halt>
 8003078:	e044      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	335c      	adds	r3, #92	; 0x5c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	202c      	movs	r0, #44	; 0x2c
 8003092:	fb00 f303 	mul.w	r3, r0, r3
 8003096:	440b      	add	r3, r1
 8003098:	335c      	adds	r3, #92	; 0x5c
 800309a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	335c      	adds	r3, #92	; 0x5c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d920      	bls.n	80030f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	335c      	adds	r3, #92	; 0x5c
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3360      	adds	r3, #96	; 0x60
 80030d0:	2204      	movs	r2, #4
 80030d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b2d9      	uxtb	r1, r3
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	202c      	movs	r0, #44	; 0x2c
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3360      	adds	r3, #96	; 0x60
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f005 fd90 	bl	8008c10 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f0:	e008      	b.n	8003104 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3360      	adds	r3, #96	; 0x60
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	6093      	str	r3, [r2, #8]
}
 8003116:	e172      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d11b      	bne.n	8003168 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3361      	adds	r3, #97	; 0x61
 800313e:	2208      	movs	r2, #8
 8003140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fac0 	bl	80066d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003164:	6093      	str	r3, [r2, #8]
}
 8003166:	e14a      	b.n	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	f040 813f 	bne.w	80033fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3361      	adds	r3, #97	; 0x61
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d17d      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3360      	adds	r3, #96	; 0x60
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333f      	adds	r3, #63	; 0x3f
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d00a      	beq.n	80031d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333f      	adds	r3, #63	; 0x3f
 80031c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	f040 8100 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d113      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	3355      	adds	r3, #85	; 0x55
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f083 0301 	eor.w	r3, r3, #1
 80031ec:	b2d8      	uxtb	r0, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3355      	adds	r3, #85	; 0x55
 80031fc:	4602      	mov	r2, r0
 80031fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 80e3 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	334c      	adds	r3, #76	; 0x4c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80d8 	beq.w	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	334c      	adds	r3, #76	; 0x4c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	202c      	movs	r0, #44	; 0x2c
 8003236:	fb00 f202 	mul.w	r2, r0, r2
 800323a:	440a      	add	r2, r1
 800323c:	3240      	adds	r2, #64	; 0x40
 800323e:	8812      	ldrh	r2, [r2, #0]
 8003240:	4413      	add	r3, r2
 8003242:	3b01      	subs	r3, #1
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	202c      	movs	r0, #44	; 0x2c
 800324a:	fb00 f202 	mul.w	r2, r0, r2
 800324e:	440a      	add	r2, r1
 8003250:	3240      	adds	r2, #64	; 0x40
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	fbb3 f3f2 	udiv	r3, r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80b5 	beq.w	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3355      	adds	r3, #85	; 0x55
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2d8      	uxtb	r0, r3
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3355      	adds	r3, #85	; 0x55
 800328a:	4602      	mov	r2, r0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e09f      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d109      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	; 0x60
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e08b      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3361      	adds	r3, #97	; 0x61
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d109      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3360      	adds	r3, #96	; 0x60
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e077      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3361      	adds	r3, #97	; 0x61
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	d109      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3360      	adds	r3, #96	; 0x60
 8003302:	2205      	movs	r2, #5
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e063      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3361      	adds	r3, #97	; 0x61
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d009      	beq.n	8003330 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3361      	adds	r3, #97	; 0x61
 800332a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800332c:	2b08      	cmp	r3, #8
 800332e:	d14f      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	335c      	adds	r3, #92	; 0x5c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	202c      	movs	r0, #44	; 0x2c
 8003348:	fb00 f303 	mul.w	r3, r0, r3
 800334c:	440b      	add	r3, r1
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d912      	bls.n	800338c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	335c      	adds	r3, #92	; 0x5c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3360      	adds	r3, #96	; 0x60
 8003386:	2204      	movs	r2, #4
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e021      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3360      	adds	r3, #96	; 0x60
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	2302      	movs	r3, #2
 80033e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	b2d9      	uxtb	r1, r3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	202c      	movs	r0, #44	; 0x2c
 80033ec:	fb00 f303 	mul.w	r3, r0, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3360      	adds	r3, #96	; 0x60
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f005 fc09 	bl	8008c10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033fe:	bf00      	nop
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b08a      	sub	sp, #40	; 0x28
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d004      	beq.n	800344c <HCD_RXQLVL_IRQHandler+0x46>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b05      	cmp	r3, #5
 8003446:	f000 80a9 	beq.w	800359c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800344a:	e0aa      	b.n	80035a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80a6 	beq.w	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3344      	adds	r3, #68	; 0x44
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 809b 	beq.w	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3350      	adds	r3, #80	; 0x50
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	441a      	add	r2, r3
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	202c      	movs	r0, #44	; 0x2c
 8003484:	fb00 f303 	mul.w	r3, r0, r3
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	; 0x4c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d87a      	bhi.n	8003588 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3344      	adds	r3, #68	; 0x44
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	b292      	uxth	r2, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f002 fc68 	bl	8005d80 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3344      	adds	r3, #68	; 0x44
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	441a      	add	r2, r3
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	202c      	movs	r0, #44	; 0x2c
 80034ca:	fb00 f303 	mul.w	r3, r0, r3
 80034ce:	440b      	add	r3, r1
 80034d0:	3344      	adds	r3, #68	; 0x44
 80034d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3350      	adds	r3, #80	; 0x50
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	441a      	add	r2, r3
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	202c      	movs	r0, #44	; 0x2c
 80034ee:	fb00 f303 	mul.w	r3, r0, r3
 80034f2:	440b      	add	r3, r1
 80034f4:	3350      	adds	r3, #80	; 0x50
 80034f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	0cdb      	lsrs	r3, r3, #19
 8003508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3340      	adds	r3, #64	; 0x40
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4293      	cmp	r3, r2
 8003524:	d13c      	bne.n	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d039      	beq.n	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003542:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800354a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3354      	adds	r3, #84	; 0x54
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3354      	adds	r3, #84	; 0x54
 8003582:	4602      	mov	r2, r0
 8003584:	701a      	strb	r2, [r3, #0]
      break;
 8003586:	e00b      	b.n	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3360      	adds	r3, #96	; 0x60
 8003596:	2204      	movs	r2, #4
 8003598:	701a      	strb	r2, [r3, #0]
      break;
 800359a:	e001      	b.n	80035a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035a0:	bf00      	nop
  }
}
 80035a2:	bf00      	nop
 80035a4:	3728      	adds	r7, #40	; 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d10b      	bne.n	80035fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d102      	bne.n	80035f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f005 faf3 	bl	8008bd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d132      	bne.n	800366a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d126      	bne.n	8003664 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d113      	bne.n	8003646 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003628:	d106      	bne.n	8003638 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f002 fd13 	bl	800605c <USB_InitFSLSPClkSel>
 8003636:	e011      	b.n	800365c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fd0c 	bl	800605c <USB_InitFSLSPClkSel>
 8003644:	e00a      	b.n	800365c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d106      	bne.n	800365c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003654:	461a      	mov	r2, r3
 8003656:	f64e 2360 	movw	r3, #60000	; 0xea60
 800365a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f005 fae5 	bl	8008c2c <HAL_HCD_PortEnabled_Callback>
 8003662:	e002      	b.n	800366a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f005 faef 	bl	8008c48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d103      	bne.n	800367c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e12b      	b.n	80038fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fc1a 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f4:	f000 fdfc 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a81      	ldr	r2, [pc, #516]	; (8003904 <HAL_I2C_Init+0x274>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d807      	bhi.n	8003714 <HAL_I2C_Init+0x84>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a80      	ldr	r2, [pc, #512]	; (8003908 <HAL_I2C_Init+0x278>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e006      	b.n	8003722 <HAL_I2C_Init+0x92>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a7d      	ldr	r2, [pc, #500]	; (800390c <HAL_I2C_Init+0x27c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0e7      	b.n	80038fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a78      	ldr	r2, [pc, #480]	; (8003910 <HAL_I2C_Init+0x280>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0c9b      	lsrs	r3, r3, #18
 8003734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a6a      	ldr	r2, [pc, #424]	; (8003904 <HAL_I2C_Init+0x274>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <HAL_I2C_Init+0xd4>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	e009      	b.n	8003778 <HAL_I2C_Init+0xe8>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	4a69      	ldr	r2, [pc, #420]	; (8003914 <HAL_I2C_Init+0x284>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	3301      	adds	r3, #1
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800378a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	495c      	ldr	r1, [pc, #368]	; (8003904 <HAL_I2C_Init+0x274>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d819      	bhi.n	80037cc <HAL_I2C_Init+0x13c>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e59      	subs	r1, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037ac:	400b      	ands	r3, r1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_I2C_Init+0x138>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e59      	subs	r1, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c6:	e051      	b.n	800386c <HAL_I2C_Init+0x1dc>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e04f      	b.n	800386c <HAL_I2C_Init+0x1dc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <HAL_I2C_Init+0x168>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e012      	b.n	800381e <HAL_I2C_Init+0x18e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	0099      	lsls	r1, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	fbb0 f3f3 	udiv	r3, r0, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x196>
 8003822:	2301      	movs	r3, #1
 8003824:	e022      	b.n	800386c <HAL_I2C_Init+0x1dc>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10e      	bne.n	800384c <HAL_I2C_Init+0x1bc>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e58      	subs	r0, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	440b      	add	r3, r1
 800383c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	e00f      	b.n	800386c <HAL_I2C_Init+0x1dc>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e58      	subs	r0, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	0099      	lsls	r1, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	6809      	ldr	r1, [r1, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800389a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6911      	ldr	r1, [r2, #16]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	000186a0 	.word	0x000186a0
 8003908:	001e847f 	.word	0x001e847f
 800390c:	003d08ff 	.word	0x003d08ff
 8003910:	431bde83 	.word	0x431bde83
 8003914:	10624dd3 	.word	0x10624dd3

08003918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d129      	bne.n	8003982 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	; 0x24
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0210 	bic.w	r2, r2, #16
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d12a      	bne.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2224      	movs	r2, #36	; 0x24
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039ca:	89fb      	ldrh	r3, [r7, #14]
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	4313      	orrs	r3, r2
 80039da:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	89fa      	ldrh	r2, [r7, #14]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fcf8 	bl	80014bc <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fcf4 	bl	80014bc <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fce4 	bl	80014bc <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd fce0 	bl	80014bc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fc99 	bl	80014bc <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fc95 	bl	80014bc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fc78 	bl	80014bc <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fc74 	bl	80014bc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fc58 	bl	80014bc <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fd fc54 	bl	80014bc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fd fc41 	bl	80014bc <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fc3d 	bl	80014bc <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fbfd 	bl	80014bc <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fd fbf9 	bl	80014bc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fbbe 	bl	80014bc <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd fbba 	bl	80014bc <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fd fba8 	bl	80014bc <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd fba4 	bl	80014bc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fb78 	bl	80014bc <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd fb74 	bl	80014bc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fb4d 	bl	80014bc <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd fb49 	bl	80014bc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fb36 	bl	80014bc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd fb32 	bl	80014bc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd fa64 	bl	80014bc <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fd fa60 	bl	80014bc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd f89a 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	080092fc 	.word	0x080092fc
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b094      	sub	sp, #80	; 0x50
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	2300      	movs	r3, #0
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	2300      	movs	r3, #0
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80e1 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e0db      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b73      	ldr	r3, [pc, #460]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004104:	e0db      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410a:	e0d8      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
 800413a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4621      	mov	r1, r4
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	4629      	mov	r1, r5
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4651      	mov	r1, sl
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4651      	mov	r1, sl
 8004180:	ebb2 0801 	subs.w	r8, r2, r1
 8004184:	4659      	mov	r1, fp
 8004186:	eb63 0901 	sbc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	462b      	mov	r3, r5
 80041ac:	eb49 0303 	adc.w	r3, r9, r3
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041be:	4629      	mov	r1, r5
 80041c0:	024b      	lsls	r3, r1, #9
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c8:	4621      	mov	r1, r4
 80041ca:	024a      	lsls	r2, r1, #9
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041dc:	f7fc f806 	bl	80001ec <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	e058      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	4611      	mov	r1, r2
 80041f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0159      	lsls	r1, r3, #5
 8004212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004216:	0150      	lsls	r0, r2, #5
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4641      	mov	r1, r8
 800421e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb63 0b01 	sbc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800423c:	ebb2 040a 	subs.w	r4, r2, sl
 8004240:	eb63 050b 	sbc.w	r5, r3, fp
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	464b      	mov	r3, r9
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	61fa      	str	r2, [r7, #28]
 800428c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004290:	f7fb ffac 	bl	80001ec <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3750      	adds	r7, #80	; 0x50
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	0800930c 	.word	0x0800930c

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800431c:	f7ff ffdc 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0b5b      	lsrs	r3, r3, #13
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	0800930c 	.word	0x0800930c

08004340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	220f      	movs	r2, #15
 800434e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0203 	and.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_GetClockConfig+0x5c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCC_GetClockConfig+0x60>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07b      	b.n	80044ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c6:	d009      	beq.n	80043dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
 80043ce:	e005      	b.n	80043dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fde4 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	ea42 0103 	orr.w	r1, r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0104 	and.w	r1, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0210 	and.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e041      	b.n	800454c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fc fdb9 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 fc6f 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d001      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e04e      	b.n	800460a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_TIM_Base_Start_IT+0xc4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d01d      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_TIM_Base_Start_IT+0xc8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <HAL_TIM_Base_Start_IT+0xcc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIM_Base_Start_IT+0xd0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <HAL_TIM_Base_Start_IT+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_TIM_Base_Start_IT+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x80>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_TIM_Base_Start_IT+0xdc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d010      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	e007      	b.n	8004608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40010400 	.word	0x40010400
 800462c:	40014000 	.word	0x40014000
 8004630:	40001800 	.word	0x40001800

08004634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e041      	b.n	80046ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fd1c 	bl	8001098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fbb0 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x24>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e022      	b.n	800473e <HAL_TIM_PWM_Start+0x6a>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d109      	bne.n	8004712 <HAL_TIM_PWM_Start+0x3e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e015      	b.n	800473e <HAL_TIM_PWM_Start+0x6a>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x58>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_TIM_PWM_Start+0x6a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07c      	b.n	8004840 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0x82>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	e013      	b.n	800477e <HAL_TIM_PWM_Start+0xaa>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0x92>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004764:	e00b      	b.n	800477e <HAL_TIM_PWM_Start+0xaa>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xa2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004774:	e003      	b.n	800477e <HAL_TIM_PWM_Start+0xaa>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fe10 	bl	80053ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <HAL_TIM_PWM_Start+0x174>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_PWM_Start+0xcc>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2c      	ldr	r2, [pc, #176]	; (800484c <HAL_TIM_PWM_Start+0x178>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_PWM_Start+0xd0>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_TIM_PWM_Start+0xd2>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a22      	ldr	r2, [pc, #136]	; (8004848 <HAL_TIM_PWM_Start+0x174>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d01d      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_TIM_PWM_Start+0x17c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <HAL_TIM_PWM_Start+0x180>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_TIM_PWM_Start+0x184>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <HAL_TIM_PWM_Start+0x178>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_TIM_PWM_Start+0x188>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIM_PWM_Start+0x136>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_TIM_PWM_Start+0x18c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d010      	beq.n	800483e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	e007      	b.n	800483e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40010000 	.word	0x40010000
 800484c:	40010400 	.word	0x40010400
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0202 	mvn.w	r2, #2
 8004890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa77 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa69 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa7a 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0204 	mvn.w	r2, #4
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa4d 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa3f 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa50 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b08      	cmp	r3, #8
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0208 	mvn.w	r2, #8
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa23 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa15 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa26 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b10      	cmp	r3, #16
 8004974:	d122      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d11b      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0210 	mvn.w	r2, #16
 800498c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2208      	movs	r2, #8
 8004992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9f9 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9eb 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f9fc 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0201 	mvn.w	r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fc f9fa 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fd78 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9c1 	bl	8004dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0220 	mvn.w	r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd42 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0ae      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	f200 809f 	bhi.w	8004be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004be1 	.word	0x08004be1
 8004ab0:	08004be1 	.word	0x08004be1
 8004ab4:	08004be1 	.word	0x08004be1
 8004ab8:	08004b1d 	.word	0x08004b1d
 8004abc:	08004be1 	.word	0x08004be1
 8004ac0:	08004be1 	.word	0x08004be1
 8004ac4:	08004be1 	.word	0x08004be1
 8004ac8:	08004b5f 	.word	0x08004b5f
 8004acc:	08004be1 	.word	0x08004be1
 8004ad0:	08004be1 	.word	0x08004be1
 8004ad4:	08004be1 	.word	0x08004be1
 8004ad8:	08004b9f 	.word	0x08004b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa18 	bl	8004f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0204 	bic.w	r2, r2, #4
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	619a      	str	r2, [r3, #24]
      break;
 8004b1a:	e064      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa68 	bl	8004ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
      break;
 8004b5c:	e043      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fabd 	bl	80050e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0208 	orr.w	r2, r2, #8
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0204 	bic.w	r2, r2, #4
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	61da      	str	r2, [r3, #28]
      break;
 8004b9c:	e023      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fb11 	bl	80051cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	021a      	lsls	r2, r3, #8
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	61da      	str	r2, [r3, #28]
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_ConfigClockSource+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0b4      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x186>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d03e      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0xd4>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	f200 8087 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	f000 8086 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x172>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d87f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d01a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xa6>
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d87b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d050      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x11a>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d877      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d03c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d873      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d058      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x13a>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d86f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d064      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d86b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d060      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d867      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d05a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f000 fb5d 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
      break;
 8004cca:	e04f      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f000 fb46 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e03c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 faba 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2150      	movs	r1, #80	; 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fb13 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e02c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 fad9 	bl	80052d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2160      	movs	r1, #96	; 0x60
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fb03 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e01c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa9a 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 faf3 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 faea 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d62:	e003      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e000      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d027      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_Base_SetConfig+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	40001c00 	.word	0x40001c00
 8004f14:	40002000 	.word	0x40002000

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC1_SetConfig+0x64>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0308 	bic.w	r3, r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC1_SetConfig+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a22      	ldr	r2, [pc, #136]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <TIM_OC2_SetConfig+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0x94>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <TIM_OC2_SetConfig+0xe8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40010400 	.word	0x40010400

080050e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800512c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <TIM_OC3_SetConfig+0xe0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_OC3_SetConfig+0x66>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_OC3_SetConfig+0xe4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10d      	bne.n	8005166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <TIM_OC3_SetConfig+0xe0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC3_SetConfig+0x92>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC3_SetConfig+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d113      	bne.n	800519e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40010400 	.word	0x40010400

080051cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <TIM_OC4_SetConfig+0xa4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC4_SetConfig+0x68>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a11      	ldr	r2, [pc, #68]	; (8005274 <TIM_OC4_SetConfig+0xa8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d109      	bne.n	8005248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 030a 	bic.w	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	f043 0307 	orr.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	401a      	ands	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e05a      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d01d      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e03f      	b.n	80055aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fe06 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f829 	bl	80055b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b8:	b0c0      	sub	sp, #256	; 0x100
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	68d9      	ldr	r1, [r3, #12]
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	ea40 0301 	orr.w	r3, r0, r1
 80055dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800560c:	f021 010c 	bic.w	r1, r1, #12
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561a:	430b      	orrs	r3, r1
 800561c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	6999      	ldr	r1, [r3, #24]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	ea40 0301 	orr.w	r3, r0, r1
 800563a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b8f      	ldr	r3, [pc, #572]	; (8005880 <UART_SetConfig+0x2cc>)
 8005644:	429a      	cmp	r2, r3
 8005646:	d005      	beq.n	8005654 <UART_SetConfig+0xa0>
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b8d      	ldr	r3, [pc, #564]	; (8005884 <UART_SetConfig+0x2d0>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d104      	bne.n	800565e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fe fe60 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8005658:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800565c:	e003      	b.n	8005666 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800565e:	f7fe fe47 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8005662:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005670:	f040 810c 	bne.w	800588c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800567e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005682:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	1891      	adds	r1, r2, r2
 800568c:	65b9      	str	r1, [r7, #88]	; 0x58
 800568e:	415b      	adcs	r3, r3
 8005690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005692:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005696:	4621      	mov	r1, r4
 8005698:	eb12 0801 	adds.w	r8, r2, r1
 800569c:	4629      	mov	r1, r5
 800569e:	eb43 0901 	adc.w	r9, r3, r1
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056b6:	4690      	mov	r8, r2
 80056b8:	4699      	mov	r9, r3
 80056ba:	4623      	mov	r3, r4
 80056bc:	eb18 0303 	adds.w	r3, r8, r3
 80056c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056c4:	462b      	mov	r3, r5
 80056c6:	eb49 0303 	adc.w	r3, r9, r3
 80056ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056e2:	460b      	mov	r3, r1
 80056e4:	18db      	adds	r3, r3, r3
 80056e6:	653b      	str	r3, [r7, #80]	; 0x50
 80056e8:	4613      	mov	r3, r2
 80056ea:	eb42 0303 	adc.w	r3, r2, r3
 80056ee:	657b      	str	r3, [r7, #84]	; 0x54
 80056f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056f8:	f7fa fd78 	bl	80001ec <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b61      	ldr	r3, [pc, #388]	; (8005888 <UART_SetConfig+0x2d4>)
 8005702:	fba3 2302 	umull	r2, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	011c      	lsls	r4, r3, #4
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005714:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005718:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	64b9      	str	r1, [r7, #72]	; 0x48
 8005724:	415b      	adcs	r3, r3
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800572c:	4641      	mov	r1, r8
 800572e:	eb12 0a01 	adds.w	sl, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb43 0b01 	adc.w	fp, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005744:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800574c:	4692      	mov	sl, r2
 800574e:	469b      	mov	fp, r3
 8005750:	4643      	mov	r3, r8
 8005752:	eb1a 0303 	adds.w	r3, sl, r3
 8005756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800575a:	464b      	mov	r3, r9
 800575c:	eb4b 0303 	adc.w	r3, fp, r3
 8005760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005770:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005774:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005778:	460b      	mov	r3, r1
 800577a:	18db      	adds	r3, r3, r3
 800577c:	643b      	str	r3, [r7, #64]	; 0x40
 800577e:	4613      	mov	r3, r2
 8005780:	eb42 0303 	adc.w	r3, r2, r3
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
 8005786:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800578a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800578e:	f7fa fd2d 	bl	80001ec <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4611      	mov	r1, r2
 8005798:	4b3b      	ldr	r3, [pc, #236]	; (8005888 <UART_SetConfig+0x2d4>)
 800579a:	fba3 2301 	umull	r2, r3, r3, r1
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2264      	movs	r2, #100	; 0x64
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057ae:	4b36      	ldr	r3, [pc, #216]	; (8005888 <UART_SetConfig+0x2d4>)
 80057b0:	fba3 2302 	umull	r2, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057bc:	441c      	add	r4, r3
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057d8:	415b      	adcs	r3, r3
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6339      	str	r1, [r7, #48]	; 0x30
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005814:	464b      	mov	r3, r9
 8005816:	460a      	mov	r2, r1
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800582c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005834:	460b      	mov	r3, r1
 8005836:	18db      	adds	r3, r3, r3
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
 800583a:	4613      	mov	r3, r2
 800583c:	eb42 0303 	adc.w	r3, r2, r3
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005846:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800584a:	f7fa fccf 	bl	80001ec <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <UART_SetConfig+0x2d4>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	; 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	3332      	adds	r3, #50	; 0x32
 8005866:	4a08      	ldr	r2, [pc, #32]	; (8005888 <UART_SetConfig+0x2d4>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 0207 	and.w	r2, r3, #7
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4422      	add	r2, r4
 800587a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800587c:	e105      	b.n	8005a8a <UART_SetConfig+0x4d6>
 800587e:	bf00      	nop
 8005880:	40011000 	.word	0x40011000
 8005884:	40011400 	.word	0x40011400
 8005888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800588c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005890:	2200      	movs	r2, #0
 8005892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005896:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800589a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800589e:	4642      	mov	r2, r8
 80058a0:	464b      	mov	r3, r9
 80058a2:	1891      	adds	r1, r2, r2
 80058a4:	6239      	str	r1, [r7, #32]
 80058a6:	415b      	adcs	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ae:	4641      	mov	r1, r8
 80058b0:	1854      	adds	r4, r2, r1
 80058b2:	4649      	mov	r1, r9
 80058b4:	eb43 0501 	adc.w	r5, r3, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	00eb      	lsls	r3, r5, #3
 80058c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058c6:	00e2      	lsls	r2, r4, #3
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4643      	mov	r3, r8
 80058ce:	18e3      	adds	r3, r4, r3
 80058d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058d4:	464b      	mov	r3, r9
 80058d6:	eb45 0303 	adc.w	r3, r5, r3
 80058da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058fa:	4629      	mov	r1, r5
 80058fc:	008b      	lsls	r3, r1, #2
 80058fe:	4621      	mov	r1, r4
 8005900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005904:	4621      	mov	r1, r4
 8005906:	008a      	lsls	r2, r1, #2
 8005908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800590c:	f7fa fc6e 	bl	80001ec <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <UART_SetConfig+0x4e4>)
 8005916:	fba3 2302 	umull	r2, r3, r3, r2
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	011c      	lsls	r4, r3, #4
 800591e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005922:	2200      	movs	r2, #0
 8005924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800592c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005930:	4642      	mov	r2, r8
 8005932:	464b      	mov	r3, r9
 8005934:	1891      	adds	r1, r2, r2
 8005936:	61b9      	str	r1, [r7, #24]
 8005938:	415b      	adcs	r3, r3
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005940:	4641      	mov	r1, r8
 8005942:	1851      	adds	r1, r2, r1
 8005944:	6139      	str	r1, [r7, #16]
 8005946:	4649      	mov	r1, r9
 8005948:	414b      	adcs	r3, r1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005958:	4659      	mov	r1, fp
 800595a:	00cb      	lsls	r3, r1, #3
 800595c:	4651      	mov	r1, sl
 800595e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005962:	4651      	mov	r1, sl
 8005964:	00ca      	lsls	r2, r1, #3
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	4603      	mov	r3, r0
 800596c:	4642      	mov	r2, r8
 800596e:	189b      	adds	r3, r3, r2
 8005970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005974:	464b      	mov	r3, r9
 8005976:	460a      	mov	r2, r1
 8005978:	eb42 0303 	adc.w	r3, r2, r3
 800597c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	67bb      	str	r3, [r7, #120]	; 0x78
 800598a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005998:	4649      	mov	r1, r9
 800599a:	008b      	lsls	r3, r1, #2
 800599c:	4641      	mov	r1, r8
 800599e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a2:	4641      	mov	r1, r8
 80059a4:	008a      	lsls	r2, r1, #2
 80059a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059aa:	f7fa fc1f 	bl	80001ec <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <UART_SetConfig+0x4e4>)
 80059b4:	fba3 1302 	umull	r1, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	2164      	movs	r1, #100	; 0x64
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	3332      	adds	r3, #50	; 0x32
 80059c6:	4a34      	ldr	r2, [pc, #208]	; (8005a98 <UART_SetConfig+0x4e4>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	095b      	lsrs	r3, r3, #5
 80059ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d2:	441c      	add	r4, r3
 80059d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059d8:	2200      	movs	r2, #0
 80059da:	673b      	str	r3, [r7, #112]	; 0x70
 80059dc:	677a      	str	r2, [r7, #116]	; 0x74
 80059de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059e2:	4642      	mov	r2, r8
 80059e4:	464b      	mov	r3, r9
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	415b      	adcs	r3, r3
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f2:	4641      	mov	r1, r8
 80059f4:	1851      	adds	r1, r2, r1
 80059f6:	6039      	str	r1, [r7, #0]
 80059f8:	4649      	mov	r1, r9
 80059fa:	414b      	adcs	r3, r1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	00cb      	lsls	r3, r1, #3
 8005a0e:	4651      	mov	r1, sl
 8005a10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a14:	4651      	mov	r1, sl
 8005a16:	00ca      	lsls	r2, r1, #3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4642      	mov	r2, r8
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a24:	464b      	mov	r3, r9
 8005a26:	460a      	mov	r2, r1
 8005a28:	eb42 0303 	adc.w	r3, r2, r3
 8005a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	663b      	str	r3, [r7, #96]	; 0x60
 8005a38:	667a      	str	r2, [r7, #100]	; 0x64
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a46:	4649      	mov	r1, r9
 8005a48:	008b      	lsls	r3, r1, #2
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a50:	4641      	mov	r1, r8
 8005a52:	008a      	lsls	r2, r1, #2
 8005a54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a58:	f7fa fbc8 	bl	80001ec <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <UART_SetConfig+0x4e4>)
 8005a62:	fba3 1302 	umull	r1, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2164      	movs	r1, #100	; 0x64
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	; 0x32
 8005a74:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <UART_SetConfig+0x4e4>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4422      	add	r2, r4
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	bf00      	nop
 8005a8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	51eb851f 	.word	0x51eb851f

08005a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	f107 001c 	add.w	r0, r7, #28
 8005aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d122      	bne.n	8005afa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d105      	bne.n	8005aee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9c0 	bl	8005e74 <USB_CoreReset>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e01a      	b.n	8005b30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9b4 	bl	8005e74 <USB_CoreReset>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
 8005b22:	e005      	b.n	8005b30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10b      	bne.n	8005b4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f043 0206 	orr.w	r2, r3, #6
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b5a:	b004      	add	sp, #16
 8005b5c:	4770      	bx	lr

08005b5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 0201 	bic.w	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d115      	bne.n	8005bf0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f7fb fc7f 	bl	80014d4 <HAL_Delay>
      ms++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f93a 	bl	8005e56 <USB_GetMode>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d01e      	beq.n	8005c26 <USB_SetCurrentMode+0x84>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b31      	cmp	r3, #49	; 0x31
 8005bec:	d9f0      	bls.n	8005bd0 <USB_SetCurrentMode+0x2e>
 8005bee:	e01a      	b.n	8005c26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d115      	bne.n	8005c22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c02:	2001      	movs	r0, #1
 8005c04:	f7fb fc66 	bl	80014d4 <HAL_Delay>
      ms++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f921 	bl	8005e56 <USB_GetMode>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <USB_SetCurrentMode+0x84>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b31      	cmp	r3, #49	; 0x31
 8005c1e:	d9f0      	bls.n	8005c02 <USB_SetCurrentMode+0x60>
 8005c20:	e001      	b.n	8005c26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e005      	b.n	8005c32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b32      	cmp	r3, #50	; 0x32
 8005c2a:	d101      	bne.n	8005c30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <USB_FlushTxFifo+0x64>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e01b      	b.n	8005c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	daf2      	bge.n	8005c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	019b      	lsls	r3, r3, #6
 8005c6c:	f043 0220 	orr.w	r2, r3, #32
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <USB_FlushTxFifo+0x64>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e006      	b.n	8005c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d0f0      	beq.n	8005c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	00030d40 	.word	0x00030d40

08005ca4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a11      	ldr	r2, [pc, #68]	; (8005d00 <USB_FlushRxFifo+0x5c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e018      	b.n	8005cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	daf2      	bge.n	8005cb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <USB_FlushRxFifo+0x5c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e006      	b.n	8005cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d0f0      	beq.n	8005cd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	00030d40 	.word	0x00030d40

08005d04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b089      	sub	sp, #36	; 0x24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	460b      	mov	r3, r1
 8005d14:	71fb      	strb	r3, [r7, #7]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d123      	bne.n	8005d72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d2a:	88bb      	ldrh	r3, [r7, #4]
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e018      	b.n	8005d6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	031a      	lsls	r2, r3, #12
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	461a      	mov	r2, r3
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3301      	adds	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3e2      	bcc.n	8005d38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3724      	adds	r7, #36	; 0x24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b08b      	sub	sp, #44	; 0x2c
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e014      	b.n	8005dd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	3301      	adds	r3, #1
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	3301      	adds	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	6a3a      	ldr	r2, [r7, #32]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3e6      	bcc.n	8005dac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dde:	8bfb      	ldrh	r3, [r7, #30]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01e      	beq.n	8005e22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dee:	461a      	mov	r2, r3
 8005df0:	f107 0310 	add.w	r3, r7, #16
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	701a      	strb	r2, [r3, #0]
      i++;
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	3301      	adds	r3, #1
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e16:	8bfb      	ldrh	r3, [r7, #30]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e1c:	8bfb      	ldrh	r3, [r7, #30]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1ea      	bne.n	8005df8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	372c      	adds	r7, #44	; 0x2c
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0301 	and.w	r3, r3, #1
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <USB_CoreReset+0x64>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e01b      	b.n	8005eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	daf2      	bge.n	8005e80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <USB_CoreReset+0x64>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e006      	b.n	8005eca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d0f0      	beq.n	8005eaa <USB_CoreReset+0x36>

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	00030d40 	.word	0x00030d40

08005edc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005edc:	b084      	sub	sp, #16
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b086      	sub	sp, #24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005efc:	461a      	mov	r2, r3
 8005efe:	2300      	movs	r3, #0
 8005f00:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10a      	bne.n	8005f4e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e014      	b.n	8005f78 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e009      	b.n	8005f78 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f78:	2110      	movs	r1, #16
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fe5e 	bl	8005c3c <USB_FlushTxFifo>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fe8a 	bl	8005ca4 <USB_FlushRxFifo>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e015      	b.n	8005fcc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d3e5      	bcc.n	8005fa0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a13      	ldr	r2, [pc, #76]	; (8006048 <USB_HostInit+0x16c>)
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <USB_HostInit+0x170>)
 8006000:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006004:	e009      	b.n	800601a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <USB_HostInit+0x174>)
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a0f      	ldr	r2, [pc, #60]	; (8006054 <USB_HostInit+0x178>)
 8006016:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f043 0210 	orr.w	r2, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	4b09      	ldr	r3, [pc, #36]	; (8006058 <USB_HostInit+0x17c>)
 8006032:	4313      	orrs	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006044:	b004      	add	sp, #16
 8006046:	4770      	bx	lr
 8006048:	01000200 	.word	0x01000200
 800604c:	00e00300 	.word	0x00e00300
 8006050:	00600080 	.word	0x00600080
 8006054:	004000e0 	.word	0x004000e0
 8006058:	a3200008 	.word	0xa3200008

0800605c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d107      	bne.n	80060ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a4:	461a      	mov	r2, r3
 80060a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060aa:	6053      	str	r3, [r2, #4]
 80060ac:	e009      	b.n	80060c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d106      	bne.n	80060c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	461a      	mov	r2, r3
 80060bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80060c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006100:	2064      	movs	r0, #100	; 0x64
 8006102:	f7fb f9e7 	bl	80014d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800610e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006114:	200a      	movs	r0, #10
 8006116:	f7fb f9dd 	bl	80014d4 <HAL_Delay>

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006148:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <USB_DriveVbus+0x44>
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d106      	bne.n	8006168 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006162:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006166:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d109      	bne.n	8006188 <USB_DriveVbus+0x64>
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006186:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	0c5b      	lsrs	r3, r3, #17
 80061b4:	f003 0303 	and.w	r3, r3, #3
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	b29b      	uxth	r3, r3
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	4608      	mov	r0, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	70fb      	strb	r3, [r7, #3]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70bb      	strb	r3, [r7, #2]
 80061fe:	4613      	mov	r3, r2
 8006200:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	461a      	mov	r2, r3
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
 800621c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800621e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006222:	2b03      	cmp	r3, #3
 8006224:	d87e      	bhi.n	8006324 <USB_HC_Init+0x13c>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <USB_HC_Init+0x44>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800623d 	.word	0x0800623d
 8006230:	080062e7 	.word	0x080062e7
 8006234:	0800623d 	.word	0x0800623d
 8006238:	080062a9 	.word	0x080062a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	461a      	mov	r2, r3
 800624a:	f240 439d 	movw	r3, #1181	; 0x49d
 800624e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	da10      	bge.n	800627a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4413      	add	r3, r2
 8006260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	440a      	add	r2, r1
 800626e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006276:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006278:	e057      	b.n	800632a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d051      	beq.n	800632a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062a4:	60d3      	str	r3, [r2, #12]
      break;
 80062a6:	e040      	b.n	800632a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	461a      	mov	r2, r3
 80062b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80062ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da34      	bge.n	800632e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062e4:	e023      	b.n	800632e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	461a      	mov	r2, r3
 80062f4:	f240 2325 	movw	r3, #549	; 0x225
 80062f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	da17      	bge.n	8006332 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	0151      	lsls	r1, r2, #5
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	440a      	add	r2, r1
 8006318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006320:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006322:	e006      	b.n	8006332 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	77fb      	strb	r3, [r7, #31]
      break;
 8006328:	e004      	b.n	8006334 <USB_HC_Init+0x14c>
      break;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <USB_HC_Init+0x14c>
      break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <USB_HC_Init+0x14c>
      break;
 8006332:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	440a      	add	r2, r1
 800634a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	2101      	movs	r1, #1
 8006364:	fa01 f303 	lsl.w	r3, r1, r3
 8006368:	6939      	ldr	r1, [r7, #16]
 800636a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800636e:	4313      	orrs	r3, r2
 8006370:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800637e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	da03      	bge.n	800638e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e001      	b.n	8006392 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff feff 	bl	8006196 <USB_GetHostSpeed>
 8006398:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800639a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d106      	bne.n	80063b0 <USB_HC_Init+0x1c8>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d003      	beq.n	80063b0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e001      	b.n	80063b4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063b4:	787b      	ldrb	r3, [r7, #1]
 80063b6:	059b      	lsls	r3, r3, #22
 80063b8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063bc:	78bb      	ldrb	r3, [r7, #2]
 80063be:	02db      	lsls	r3, r3, #11
 80063c0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063c4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ca:	049b      	lsls	r3, r3, #18
 80063cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	0159      	lsls	r1, r3, #5
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	440b      	add	r3, r1
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d003      	beq.n	8006402 <USB_HC_Init+0x21a>
 80063fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10f      	bne.n	8006422 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	440a      	add	r2, r1
 8006418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006420:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006422:	7ffb      	ldrb	r3, [r7, #31]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08c      	sub	sp, #48	; 0x30
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006448:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d02d      	beq.n	80064b2 <USB_HC_StartXfer+0x86>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	791b      	ldrb	r3, [r3, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d129      	bne.n	80064b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d117      	bne.n	8006494 <USB_HC_StartXfer+0x68>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <USB_HC_StartXfer+0x48>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	79db      	ldrb	r3, [r3, #7]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10f      	bne.n	8006494 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	440a      	add	r2, r1
 800648a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <USB_HC_StartXfer+0x86>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	795b      	ldrb	r3, [r3, #5]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	4619      	mov	r1, r3
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fa0f 	bl	80068cc <USB_DoPing>
      return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e0f8      	b.n	80066a4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	8912      	ldrh	r2, [r2, #8]
 80064c2:	4413      	add	r3, r2
 80064c4:	3b01      	subs	r3, #1
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	8912      	ldrh	r2, [r2, #8]
 80064ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064d2:	8b7b      	ldrh	r3, [r7, #26]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d90b      	bls.n	80064f0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064d8:	8b7b      	ldrh	r3, [r7, #26]
 80064da:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	8912      	ldrh	r2, [r2, #8]
 80064e2:	fb03 f202 	mul.w	r2, r3, r2
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	611a      	str	r2, [r3, #16]
 80064ea:	e001      	b.n	80064f0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	8912      	ldrh	r2, [r2, #8]
 80064fe:	fb03 f202 	mul.w	r2, r3, r2
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	611a      	str	r2, [r3, #16]
 8006506:	e003      	b.n	8006510 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	4b63      	ldr	r3, [pc, #396]	; (80066ac <USB_HC_StartXfer+0x280>)
 800651e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006520:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	7a9b      	ldrb	r3, [r3, #10]
 8006526:	075b      	lsls	r3, r3, #29
 8006528:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	0148      	lsls	r0, r1, #5
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	4401      	add	r1, r0
 8006534:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006538:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800653a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	4413      	add	r3, r2
 800654e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006552:	460a      	mov	r2, r1
 8006554:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	440a      	add	r2, r1
 8006584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006588:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800658c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	7e7b      	ldrb	r3, [r7, #25]
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	69f9      	ldr	r1, [r7, #28]
 80065a2:	0148      	lsls	r0, r1, #5
 80065a4:	6a39      	ldr	r1, [r7, #32]
 80065a6:	4401      	add	r1, r0
 80065a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	e003      	b.n	80065e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f6:	461a      	mov	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e04e      	b.n	80066a4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d149      	bne.n	80066a2 <USB_HC_StartXfer+0x276>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d045      	beq.n	80066a2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	79db      	ldrb	r3, [r3, #7]
 800661a:	2b03      	cmp	r3, #3
 800661c:	d830      	bhi.n	8006680 <USB_HC_StartXfer+0x254>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USB_HC_StartXfer+0x1f8>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006635 	.word	0x08006635
 8006628:	08006659 	.word	0x08006659
 800662c:	08006635 	.word	0x08006635
 8006630:	08006659 	.word	0x08006659
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	3303      	adds	r3, #3
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800663e:	8afa      	ldrh	r2, [r7, #22]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	b29b      	uxth	r3, r3
 8006646:	429a      	cmp	r2, r3
 8006648:	d91c      	bls.n	8006684 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f043 0220 	orr.w	r2, r3, #32
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	619a      	str	r2, [r3, #24]
        }
        break;
 8006656:	e015      	b.n	8006684 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	3303      	adds	r3, #3
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006662:	8afa      	ldrh	r2, [r7, #22]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	b29b      	uxth	r3, r3
 800666e:	429a      	cmp	r2, r3
 8006670:	d90a      	bls.n	8006688 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	619a      	str	r2, [r3, #24]
        }
        break;
 800667e:	e003      	b.n	8006688 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006680:	bf00      	nop
 8006682:	e002      	b.n	800668a <USB_HC_StartXfer+0x25e>
        break;
 8006684:	bf00      	nop
 8006686:	e000      	b.n	800668a <USB_HC_StartXfer+0x25e>
        break;
 8006688:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	785a      	ldrb	r2, [r3, #1]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	b29b      	uxth	r3, r3
 8006698:	2000      	movs	r0, #0
 800669a:	9000      	str	r0, [sp, #0]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fb31 	bl	8005d04 <USB_WritePacket>
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3728      	adds	r7, #40	; 0x28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	1ff80000 	.word	0x1ff80000

080066b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	b29b      	uxth	r3, r3
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b089      	sub	sp, #36	; 0x24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	0c9b      	lsrs	r3, r3, #18
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	0fdb      	lsrs	r3, r3, #31
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b20      	cmp	r3, #32
 8006720:	d104      	bne.n	800672c <USB_HC_Halt+0x5a>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e0c8      	b.n	80068be <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <USB_HC_Halt+0x66>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d163      	bne.n	8006800 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	440a      	add	r2, r1
 800674e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006756:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 80ab 	bne.w	80068bc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d133      	bne.n	80067da <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006790:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067be:	d81d      	bhi.n	80067fc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d6:	d0ec      	beq.n	80067b2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067d8:	e070      	b.n	80068bc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067fa:	e05f      	b.n	80068bc <USB_HC_Halt+0x1ea>
            break;
 80067fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067fe:	e05d      	b.n	80068bc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	440a      	add	r2, r1
 8006816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d133      	bne.n	8006898 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800686e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687c:	d81d      	bhi.n	80068ba <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006894:	d0ec      	beq.n	8006870 <USB_HC_Halt+0x19e>
 8006896:	e011      	b.n	80068bc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e000      	b.n	80068bc <USB_HC_Halt+0x1ea>
          break;
 80068ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3724      	adds	r7, #36	; 0x24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	04da      	lsls	r2, r3, #19
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <USB_DoPing+0x74>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006914:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800691c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	461a      	mov	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	1ff80000 	.word	0x1ff80000

08006944 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff f911 	bl	8005b80 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800695e:	2110      	movs	r1, #16
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f96b 	bl	8005c3c <USB_FlushTxFifo>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f997 	bl	8005ca4 <USB_FlushRxFifo>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e01f      	b.n	80069c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ba:	461a      	mov	r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d9dc      	bls.n	8006986 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e034      	b.n	8006a3c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	461a      	mov	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a18:	d80c      	bhi.n	8006a34 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a30:	d0ec      	beq.n	8006a0c <USB_StopHost+0xc8>
 8006a32:	e000      	b.n	8006a36 <USB_StopHost+0xf2>
        break;
 8006a34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b0f      	cmp	r3, #15
 8006a40:	d9c7      	bls.n	80069d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295
 8006a56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff f880 	bl	8005b5e <USB_EnableGlobalInt>

  return ret;
 8006a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a70:	2301      	movs	r3, #1
 8006a72:	2202      	movs	r2, #2
 8006a74:	2102      	movs	r1, #2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fc66 	bl	8007348 <USBH_FindInterface>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2bff      	cmp	r3, #255	; 0xff
 8006a84:	d002      	beq.n	8006a8c <USBH_CDC_InterfaceInit+0x24>
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d901      	bls.n	8006a90 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e13d      	b.n	8006d0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fc3b 	bl	8007310 <USBH_SelectInterface>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e131      	b.n	8006d0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006aae:	2050      	movs	r0, #80	; 0x50
 8006ab0:	f002 fb00 	bl	80090b4 <malloc>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e11f      	b.n	8006d0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006acc:	2250      	movs	r2, #80	; 0x50
 8006ace:	2100      	movs	r1, #0
 8006ad0:	68b8      	ldr	r0, [r7, #8]
 8006ad2:	f002 faff 	bl	80090d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	211a      	movs	r1, #26
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da15      	bge.n	8006b1a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	211a      	movs	r1, #26
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	211a      	movs	r1, #26
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 ff2c 	bl	800897e <USBH_AllocPipe>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	7858      	ldrb	r0, [r3, #1]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	8952      	ldrh	r2, [r2, #10]
 8006b46:	9202      	str	r2, [sp, #8]
 8006b48:	2203      	movs	r2, #3
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4623      	mov	r3, r4
 8006b50:	4602      	mov	r2, r0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fee4 	bl	8008920 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 f9f9 	bl	8008f58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	210a      	movs	r1, #10
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fbeb 	bl	8007348 <USBH_FindInterface>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	2bff      	cmp	r3, #255	; 0xff
 8006b7a:	d002      	beq.n	8006b82 <USBH_CDC_InterfaceInit+0x11a>
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d901      	bls.n	8006b86 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e0c2      	b.n	8006d0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	211a      	movs	r1, #26
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da16      	bge.n	8006bcc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	211a      	movs	r1, #26
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bae:	781a      	ldrb	r2, [r3, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	211a      	movs	r1, #26
 8006bba:	fb01 f303 	mul.w	r3, r1, r3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bc4:	881a      	ldrh	r2, [r3, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	835a      	strh	r2, [r3, #26]
 8006bca:	e015      	b.n	8006bf8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	211a      	movs	r1, #26
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	211a      	movs	r1, #26
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bf2:	881a      	ldrh	r2, [r3, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	211a      	movs	r1, #26
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	da16      	bge.n	8006c3e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	211a      	movs	r1, #26
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	211a      	movs	r1, #26
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	835a      	strh	r2, [r3, #26]
 8006c3c:	e015      	b.n	8006c6a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	211a      	movs	r1, #26
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c4e:	781a      	ldrb	r2, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	211a      	movs	r1, #26
 8006c5a:	fb01 f303 	mul.w	r3, r1, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7b9b      	ldrb	r3, [r3, #14]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe84 	bl	800897e <USBH_AllocPipe>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	7bdb      	ldrb	r3, [r3, #15]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fe7a 	bl	800897e <USBH_AllocPipe>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	7b59      	ldrb	r1, [r3, #13]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	7b98      	ldrb	r0, [r3, #14]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	8b12      	ldrh	r2, [r2, #24]
 8006caa:	9202      	str	r2, [sp, #8]
 8006cac:	2202      	movs	r2, #2
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fe32 	bl	8008920 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	7b19      	ldrb	r1, [r3, #12]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	7bd8      	ldrb	r0, [r3, #15]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	8b52      	ldrh	r2, [r2, #26]
 8006cd4:	9202      	str	r2, [sp, #8]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	9201      	str	r2, [sp, #4]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	4623      	mov	r3, r4
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fe1d 	bl	8008920 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	7b5b      	ldrb	r3, [r3, #13]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f002 f92e 	bl	8008f58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	7b1b      	ldrb	r3, [r3, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f002 f927 	bl	8008f58 <USBH_LL_SetToggle>

  return USBH_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}

08006d14 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fe12 	bl	800895e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fe3d 	bl	80089c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	7b1b      	ldrb	r3, [r3, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	7b1b      	ldrb	r3, [r3, #12]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fdff 	bl	800895e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7b1b      	ldrb	r3, [r3, #12]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fe2a 	bl	80089c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	7b5b      	ldrb	r3, [r3, #13]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7b5b      	ldrb	r3, [r3, #13]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fdec 	bl	800895e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	7b5b      	ldrb	r3, [r3, #13]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fe17 	bl	80089c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f002 f989 	bl	80090c4 <free>
    phost->pActiveClass->pData = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db8:	2200      	movs	r2, #0
 8006dba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3340      	adds	r3, #64	; 0x40
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f8b1 	bl	8006f46 <GetLineCoding>
 8006de4:	4603      	mov	r3, r0
 8006de6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d105      	bne.n	8006dfa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df4:	2102      	movs	r1, #2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d877      	bhi.n	8006f18 <USBH_CDC_Process+0x114>
 8006e28:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <USBH_CDC_Process+0x2c>)
 8006e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2e:	bf00      	nop
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e4b 	.word	0x08006e4b
 8006e38:	08006e7b 	.word	0x08006e7b
 8006e3c:	08006eef 	.word	0x08006eef
 8006e40:	08006efd 	.word	0x08006efd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]
      break;
 8006e48:	e06d      	b.n	8006f26 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f897 	bl	8006f84 <SetLineCoding>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d104      	bne.n	8006e6a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e68:	e058      	b.n	8006f1c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d055      	beq.n	8006f1c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2204      	movs	r2, #4
 8006e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e78:	e050      	b.n	8006f1c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	3340      	adds	r3, #64	; 0x40
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f860 	bl	8006f46 <GetLineCoding>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d126      	bne.n	8006ede <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d13b      	bne.n	8006f20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d133      	bne.n	8006f20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d12b      	bne.n	8006f20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d124      	bne.n	8006f20 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f958 	bl	800718c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006edc:	e020      	b.n	8006f20 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d01d      	beq.n	8006f20 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006eec:	e018      	b.n	8006f20 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f867 	bl	8006fc2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f8da 	bl	80070ae <CDC_ProcessReception>
      break;
 8006efa:	e014      	b.n	8006f26 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006efc:	2100      	movs	r1, #0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 ffef 	bl	8007ee2 <USBH_ClrFeature>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f16:	e005      	b.n	8006f24 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <USBH_CDC_Process+0x122>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <USBH_CDC_Process+0x122>
      break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <USBH_CDC_Process+0x122>
      break;
 8006f24:	bf00      	nop

  }

  return status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	22a1      	movs	r2, #161	; 0xa1
 8006f54:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2221      	movs	r2, #33	; 0x21
 8006f5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2207      	movs	r2, #7
 8006f6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2207      	movs	r2, #7
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fa81 	bl	800847c <USBH_CtlReq>
 8006f7a:	4603      	mov	r3, r0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2221      	movs	r2, #33	; 0x21
 8006f92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2207      	movs	r2, #7
 8006faa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2207      	movs	r2, #7
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fa62 	bl	800847c <USBH_CtlReq>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d002      	beq.n	8006fe8 <CDC_ProcessTransmission+0x26>
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d023      	beq.n	800702e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fe6:	e05e      	b.n	80070a6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	8b12      	ldrh	r2, [r2, #24]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d90b      	bls.n	800700c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	69d9      	ldr	r1, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8b1a      	ldrh	r2, [r3, #24]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	7b5b      	ldrb	r3, [r3, #13]
 8007000:	2001      	movs	r0, #1
 8007002:	9000      	str	r0, [sp, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fc48 	bl	800889a <USBH_BulkSendData>
 800700a:	e00b      	b.n	8007024 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	7b5b      	ldrb	r3, [r3, #13]
 800701a:	2001      	movs	r0, #1
 800701c:	9000      	str	r0, [sp, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fc3b 	bl	800889a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800702c:	e03b      	b.n	80070a6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	7b5b      	ldrb	r3, [r3, #13]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 ff65 	bl	8008f04 <USBH_LL_GetURBState>
 800703a:	4603      	mov	r3, r0
 800703c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d128      	bne.n	8007096 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	8b12      	ldrh	r2, [r2, #24]
 800704c:	4293      	cmp	r3, r2
 800704e:	d90e      	bls.n	800706e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	8b12      	ldrh	r2, [r2, #24]
 8007058:	1a9a      	subs	r2, r3, r2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	8b12      	ldrh	r2, [r2, #24]
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	61da      	str	r2, [r3, #28]
 800706c:	e002      	b.n	8007074 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007084:	e00e      	b.n	80070a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f868 	bl	8007164 <USBH_CDC_TransmitCallback>
      break;
 8007094:	e006      	b.n	80070a4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d103      	bne.n	80070a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070a4:	bf00      	nop
  }
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070c0:	2300      	movs	r3, #0
 80070c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d002      	beq.n	80070d4 <CDC_ProcessReception+0x26>
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d00e      	beq.n	80070f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070d2:	e043      	b.n	800715c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6a19      	ldr	r1, [r3, #32]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	8b5a      	ldrh	r2, [r3, #26]
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fbff 	bl	80088e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2204      	movs	r2, #4
 80070ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070ee:	e035      	b.n	800715c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	7b1b      	ldrb	r3, [r3, #12]
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 ff04 	bl	8008f04 <USBH_LL_GetURBState>
 80070fc:	4603      	mov	r3, r0
 80070fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007100:	7cfb      	ldrb	r3, [r7, #19]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d129      	bne.n	800715a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	7b1b      	ldrb	r3, [r3, #12]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fe67 	bl	8008de0 <USBH_LL_GetLastXferSize>
 8007112:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	429a      	cmp	r2, r3
 800711c:	d016      	beq.n	800714c <CDC_ProcessReception+0x9e>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	8b5b      	ldrh	r3, [r3, #26]
 8007122:	461a      	mov	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4293      	cmp	r3, r2
 8007128:	d910      	bls.n	800714c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	441a      	add	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800714a:	e006      	b.n	800715a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f80f 	bl	8007178 <USBH_CDC_ReceiveCallback>
      break;
 800715a:	bf00      	nop
  }
}
 800715c:	bf00      	nop
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071b4:	2302      	movs	r3, #2
 80071b6:	e029      	b.n	800720c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	79fa      	ldrb	r2, [r7, #7]
 80071bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f81f 	bl	8007214 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 fd2d 	bl	8008c64 <USBH_LL_Init>

  return USBH_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e009      	b.n	800723a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	33e0      	adds	r3, #224	; 0xe0
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b0f      	cmp	r3, #15
 800723e:	d9f2      	bls.n	8007226 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e009      	b.n	800725a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007250:	2200      	movs	r2, #0
 8007252:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d3f1      	bcc.n	8007246 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2240      	movs	r2, #64	; 0x40
 8007286:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d016      	beq.n	80072fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10e      	bne.n	80072f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072e0:	1c59      	adds	r1, r3, #1
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	33de      	adds	r3, #222	; 0xde
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
 80072f6:	e004      	b.n	8007302 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072f8:	2302      	movs	r3, #2
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	e001      	b.n	8007302 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072fe:	2302      	movs	r3, #2
 8007300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	429a      	cmp	r2, r3
 800732a:	d204      	bcs.n	8007336 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007334:	e001      	b.n	800733a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007336:	2302      	movs	r3, #2
 8007338:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	4608      	mov	r0, r1
 8007352:	4611      	mov	r1, r2
 8007354:	461a      	mov	r2, r3
 8007356:	4603      	mov	r3, r0
 8007358:	70fb      	strb	r3, [r7, #3]
 800735a:	460b      	mov	r3, r1
 800735c:	70bb      	strb	r3, [r7, #2]
 800735e:	4613      	mov	r3, r2
 8007360:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007370:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007372:	e025      	b.n	80073c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	221a      	movs	r2, #26
 8007378:	fb02 f303 	mul.w	r3, r2, r3
 800737c:	3308      	adds	r3, #8
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	3302      	adds	r3, #2
 8007384:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	795b      	ldrb	r3, [r3, #5]
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	429a      	cmp	r2, r3
 800738e:	d002      	beq.n	8007396 <USBH_FindInterface+0x4e>
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2bff      	cmp	r3, #255	; 0xff
 8007394:	d111      	bne.n	80073ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800739a:	78ba      	ldrb	r2, [r7, #2]
 800739c:	429a      	cmp	r2, r3
 800739e:	d002      	beq.n	80073a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073a0:	78bb      	ldrb	r3, [r7, #2]
 80073a2:	2bff      	cmp	r3, #255	; 0xff
 80073a4:	d109      	bne.n	80073ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073aa:	787a      	ldrb	r2, [r7, #1]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d002      	beq.n	80073b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073b0:	787b      	ldrb	r3, [r7, #1]
 80073b2:	2bff      	cmp	r3, #255	; 0xff
 80073b4:	d101      	bne.n	80073ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	e006      	b.n	80073c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	3301      	adds	r3, #1
 80073be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d9d6      	bls.n	8007374 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073c6:	23ff      	movs	r3, #255	; 0xff
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 fc87 	bl	8008cf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073e2:	2101      	movs	r1, #1
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fda0 	bl	8008f2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af04      	add	r7, sp, #16
 80073fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073fc:	2302      	movs	r3, #2
 80073fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d102      	bne.n	8007416 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2203      	movs	r2, #3
 8007414:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b0b      	cmp	r3, #11
 800741e:	f200 81be 	bhi.w	800779e <USBH_Process+0x3aa>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBH_Process+0x34>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007459 	.word	0x08007459
 800742c:	0800748b 	.word	0x0800748b
 8007430:	080074f3 	.word	0x080074f3
 8007434:	08007739 	.word	0x08007739
 8007438:	0800779f 	.word	0x0800779f
 800743c:	08007597 	.word	0x08007597
 8007440:	080076df 	.word	0x080076df
 8007444:	080075cd 	.word	0x080075cd
 8007448:	080075ed 	.word	0x080075ed
 800744c:	0800760d 	.word	0x0800760d
 8007450:	08007651 	.word	0x08007651
 8007454:	08007721 	.word	0x08007721
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 819e 	beq.w	80077a2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800746c:	20c8      	movs	r0, #200	; 0xc8
 800746e:	f001 fda3 	bl	8008fb8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fc99 	bl	8008daa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007488:	e18b      	b.n	80077a2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074a2:	e18d      	b.n	80077c0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d914      	bls.n	80074da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074b6:	3301      	adds	r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d903      	bls.n	80074d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	220d      	movs	r2, #13
 80074ce:	701a      	strb	r2, [r3, #0]
      break;
 80074d0:	e176      	b.n	80077c0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
      break;
 80074d8:	e172      	b.n	80077c0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074e0:	f103 020a 	add.w	r2, r3, #10
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074ea:	200a      	movs	r0, #10
 80074ec:	f001 fd64 	bl	8008fb8 <USBH_Delay>
      break;
 80074f0:	e166      	b.n	80077c0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007502:	2104      	movs	r1, #4
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007508:	2064      	movs	r0, #100	; 0x64
 800750a:	f001 fd55 	bl	8008fb8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fc24 	bl	8008d5c <USBH_LL_GetSpeed>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2205      	movs	r2, #5
 8007522:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fa29 	bl	800897e <USBH_AllocPipe>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fa21 	bl	800897e <USBH_AllocPipe>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	7919      	ldrb	r1, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007558:	b292      	uxth	r2, r2
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4603      	mov	r3, r0
 8007564:	2280      	movs	r2, #128	; 0x80
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f9da 	bl	8008920 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7959      	ldrb	r1, [r3, #5]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007580:	b292      	uxth	r2, r2
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	4603      	mov	r3, r0
 800758c:	2200      	movs	r2, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 f9c6 	bl	8008920 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007594:	e114      	b.n	80077c0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f918 	bl	80077cc <USBH_HandleEnum>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 80fe 	bne.w	80077a6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d103      	bne.n	80075c4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2208      	movs	r2, #8
 80075c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80075c2:	e0f0      	b.n	80077a6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2207      	movs	r2, #7
 80075c8:	701a      	strb	r2, [r3, #0]
      break;
 80075ca:	e0ec      	b.n	80077a6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80e9 	beq.w	80077aa <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075de:	2101      	movs	r1, #1
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2208      	movs	r2, #8
 80075e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80075ea:	e0de      	b.n	80077aa <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc2c 	bl	8007e54 <USBH_SetCfg>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 80d5 	bne.w	80077ae <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2209      	movs	r2, #9
 8007608:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800760a:	e0d0      	b.n	80077ae <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800761a:	2101      	movs	r1, #1
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fc3c 	bl	8007e9a <USBH_SetFeature>
 8007622:	4603      	mov	r3, r0
 8007624:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220a      	movs	r2, #10
 8007632:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007634:	e0bd      	b.n	80077b2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b03      	cmp	r3, #3
 800763c:	f040 80b9 	bne.w	80077b2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	220a      	movs	r2, #10
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e0b4      	b.n	80077b2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	220a      	movs	r2, #10
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e0b0      	b.n	80077b2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 80ad 	beq.w	80077b6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e016      	b.n	8007698 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800766a:	7bfa      	ldrb	r2, [r7, #15]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32de      	adds	r2, #222	; 0xde
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	791a      	ldrb	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800767c:	429a      	cmp	r2, r3
 800767e:	d108      	bne.n	8007692 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007680:	7bfa      	ldrb	r2, [r7, #15]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	32de      	adds	r2, #222	; 0xde
 8007686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007690:	e005      	b.n	800769e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	3301      	adds	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0e5      	beq.n	800766a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d016      	beq.n	80076d6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2206      	movs	r2, #6
 80076be:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076c6:	2103      	movs	r1, #3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076cc:	e073      	b.n	80077b6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220d      	movs	r2, #13
 80076d2:	701a      	strb	r2, [r3, #0]
      break;
 80076d4:	e06f      	b.n	80077b6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	220d      	movs	r2, #13
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	e06b      	b.n	80077b6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	220b      	movs	r2, #11
 8007704:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007706:	e058      	b.n	80077ba <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d154      	bne.n	80077ba <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	220d      	movs	r2, #13
 8007714:	701a      	strb	r2, [r3, #0]
      break;
 8007716:	e050      	b.n	80077ba <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	220d      	movs	r2, #13
 800771c:	701a      	strb	r2, [r3, #0]
      break;
 800771e:	e04c      	b.n	80077ba <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d049      	beq.n	80077be <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      }
      break;
 8007736:	e042      	b.n	80077be <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fd67 	bl	8007214 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007774:	2105      	movs	r1, #5
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b01      	cmp	r3, #1
 8007784:	d107      	bne.n	8007796 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fe20 	bl	80073d4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007794:	e014      	b.n	80077c0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 faaa 	bl	8008cf0 <USBH_LL_Start>
      break;
 800779c:	e010      	b.n	80077c0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800779e:	bf00      	nop
 80077a0:	e00e      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077a2:	bf00      	nop
 80077a4:	e00c      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077a6:	bf00      	nop
 80077a8:	e00a      	b.n	80077c0 <USBH_Process+0x3cc>
    break;
 80077aa:	bf00      	nop
 80077ac:	e008      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077ae:	bf00      	nop
 80077b0:	e006      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077b2:	bf00      	nop
 80077b4:	e004      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077b6:	bf00      	nop
 80077b8:	e002      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <USBH_Process+0x3cc>
      break;
 80077be:	bf00      	nop
  }
  return USBH_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af04      	add	r7, sp, #16
 80077d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077d8:	2301      	movs	r3, #1
 80077da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	f200 81c1 	bhi.w	8007b68 <USBH_HandleEnum+0x39c>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBH_HandleEnum+0x20>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	0800780d 	.word	0x0800780d
 80077f0:	080078cb 	.word	0x080078cb
 80077f4:	08007935 	.word	0x08007935
 80077f8:	080079c3 	.word	0x080079c3
 80077fc:	08007a2d 	.word	0x08007a2d
 8007800:	08007a9d 	.word	0x08007a9d
 8007804:	08007ae3 	.word	0x08007ae3
 8007808:	08007b29 	.word	0x08007b29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800780c:	2108      	movs	r1, #8
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa50 	bl	8007cb4 <USBH_Get_DevDesc>
 8007814:	4603      	mov	r3, r0
 8007816:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d130      	bne.n	8007880 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7919      	ldrb	r1, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007842:	b292      	uxth	r2, r2
 8007844:	9202      	str	r2, [sp, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	9201      	str	r2, [sp, #4]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	4603      	mov	r3, r0
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 f865 	bl	8008920 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7959      	ldrb	r1, [r3, #5]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800786a:	b292      	uxth	r2, r2
 800786c:	9202      	str	r2, [sp, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	2200      	movs	r2, #0
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f851 	bl	8008920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800787e:	e175      	b.n	8007b6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 8172 	bne.w	8007b6c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800788e:	3301      	adds	r3, #1
 8007890:	b2da      	uxtb	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d903      	bls.n	80078aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	220d      	movs	r2, #13
 80078a6:	701a      	strb	r2, [r3, #0]
      break;
 80078a8:	e160      	b.n	8007b6c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	795b      	ldrb	r3, [r3, #5]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f885 	bl	80089c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f87f 	bl	80089c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
      break;
 80078c8:	e150      	b.n	8007b6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078ca:	2112      	movs	r1, #18
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9f1 	bl	8007cb4 <USBH_Get_DevDesc>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078e2:	e145      	b.n	8007b70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	f040 8142 	bne.w	8007b70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007902:	2b03      	cmp	r3, #3
 8007904:	d903      	bls.n	800790e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	220d      	movs	r2, #13
 800790a:	701a      	strb	r2, [r3, #0]
      break;
 800790c:	e130      	b.n	8007b70 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f853 	bl	80089c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	791b      	ldrb	r3, [r3, #4]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f84d 	bl	80089c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
      break;
 8007932:	e11d      	b.n	8007b70 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007934:	2101      	movs	r1, #1
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa68 	bl	8007e0c <USBH_SetAddress>
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d132      	bne.n	80079ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007946:	2002      	movs	r0, #2
 8007948:	f001 fb36 	bl	8008fb8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2203      	movs	r2, #3
 8007958:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7919      	ldrb	r1, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800796e:	b292      	uxth	r2, r2
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	9201      	str	r2, [sp, #4]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4603      	mov	r3, r0
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 ffcf 	bl	8008920 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7959      	ldrb	r1, [r3, #5]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007996:	b292      	uxth	r2, r2
 8007998:	9202      	str	r2, [sp, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	2200      	movs	r2, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 ffbb 	bl	8008920 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079aa:	e0e3      	b.n	8007b74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f040 80e0 	bne.w	8007b74 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220d      	movs	r2, #13
 80079b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	705a      	strb	r2, [r3, #1]
      break;
 80079c0:	e0d8      	b.n	8007b74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079c2:	2109      	movs	r1, #9
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f99d 	bl	8007d04 <USBH_Get_CfgDesc>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2204      	movs	r2, #4
 80079d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079da:	e0cd      	b.n	8007b78 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	f040 80ca 	bne.w	8007b78 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ea:	3301      	adds	r3, #1
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d903      	bls.n	8007a06 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	220d      	movs	r2, #13
 8007a02:	701a      	strb	r2, [r3, #0]
      break;
 8007a04:	e0b8      	b.n	8007b78 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 ffd7 	bl	80089c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 ffd1 	bl	80089c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	701a      	strb	r2, [r3, #0]
      break;
 8007a2a:	e0a5      	b.n	8007b78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f965 	bl	8007d04 <USBH_Get_CfgDesc>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2205      	movs	r2, #5
 8007a48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a4a:	e097      	b.n	8007b7c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	f040 8094 	bne.w	8007b7c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d903      	bls.n	8007a76 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220d      	movs	r2, #13
 8007a72:	701a      	strb	r2, [r3, #0]
      break;
 8007a74:	e082      	b.n	8007b7c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	795b      	ldrb	r3, [r3, #5]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 ff9f 	bl	80089c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	791b      	ldrb	r3, [r3, #4]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 ff99 	bl	80089c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
      break;
 8007a9a:	e06f      	b.n	8007b7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d019      	beq.n	8007ada <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ab2:	23ff      	movs	r3, #255	; 0xff
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f949 	bl	8007d4c <USBH_Get_StringDesc>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2206      	movs	r2, #6
 8007ac8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aca:	e059      	b.n	8007b80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d156      	bne.n	8007b80 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2206      	movs	r2, #6
 8007ad6:	705a      	strb	r2, [r3, #1]
      break;
 8007ad8:	e052      	b.n	8007b80 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2206      	movs	r2, #6
 8007ade:	705a      	strb	r2, [r3, #1]
      break;
 8007ae0:	e04e      	b.n	8007b80 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007af8:	23ff      	movs	r3, #255	; 0xff
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f926 	bl	8007d4c <USBH_Get_StringDesc>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2207      	movs	r2, #7
 8007b0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b10:	e038      	b.n	8007b84 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d135      	bne.n	8007b84 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2207      	movs	r2, #7
 8007b1c:	705a      	strb	r2, [r3, #1]
      break;
 8007b1e:	e031      	b.n	8007b84 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2207      	movs	r2, #7
 8007b24:	705a      	strb	r2, [r3, #1]
      break;
 8007b26:	e02d      	b.n	8007b84 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d017      	beq.n	8007b62 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b3e:	23ff      	movs	r3, #255	; 0xff
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f903 	bl	8007d4c <USBH_Get_StringDesc>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b54:	e018      	b.n	8007b88 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d115      	bne.n	8007b88 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	e012      	b.n	8007b88 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
      break;
 8007b66:	e00f      	b.n	8007b88 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b68:	bf00      	nop
 8007b6a:	e00e      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e00c      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b70:	bf00      	nop
 8007b72:	e00a      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b74:	bf00      	nop
 8007b76:	e008      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e006      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e004      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b80:	bf00      	nop
 8007b82:	e002      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b84:	bf00      	nop
 8007b86:	e000      	b.n	8007b8a <USBH_HandleEnum+0x3be>
      break;
 8007b88:	bf00      	nop
  }
  return Status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f804 	bl	8007bd6 <USBH_HandleSof>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b0b      	cmp	r3, #11
 8007be6:	d10a      	bne.n	8007bfe <USBH_HandleSof+0x28>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c16:	bf00      	nop
}
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c32:	bf00      	nop
}
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f84a 	bl	8008d26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fe91 	bl	80089c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fe8b 	bl	80089c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f864 	bl	8007da2 <USBH_GetDescriptor>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	b292      	uxth	r2, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f000 f918 	bl	8007f2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	331c      	adds	r3, #28
 8007d14:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d16:	887b      	ldrh	r3, [r7, #2]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d20:	2100      	movs	r1, #0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f83d 	bl	8007da2 <USBH_GetDescriptor>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d32:	887b      	ldrh	r3, [r7, #2]
 8007d34:	461a      	mov	r2, r3
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f987 	bl	800804c <USBH_ParseCfgDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	461a      	mov	r2, r3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	72fb      	strb	r3, [r7, #11]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d68:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d70:	893b      	ldrh	r3, [r7, #8]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	460b      	mov	r3, r1
 8007d76:	2100      	movs	r1, #0
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f812 	bl	8007da2 <USBH_GetDescriptor>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d107      	bne.n	8007d98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d8e:	893a      	ldrh	r2, [r7, #8]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fb24 	bl	80083e0 <USBH_ParseStringDesc>
  }

  return status;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	72fb      	strb	r3, [r7, #11]
 8007db0:	4613      	mov	r3, r2
 8007db2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	789b      	ldrb	r3, [r3, #2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d11c      	bne.n	8007df6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2206      	movs	r2, #6
 8007dcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	893a      	ldrh	r2, [r7, #8]
 8007dd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007dd4:	893b      	ldrh	r3, [r7, #8]
 8007dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dde:	d104      	bne.n	8007dea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f240 4209 	movw	r2, #1033	; 0x409
 8007de6:	829a      	strh	r2, [r3, #20]
 8007de8:	e002      	b.n	8007df0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8b3a      	ldrh	r2, [r7, #24]
 8007df4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007df6:	8b3b      	ldrh	r3, [r7, #24]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fb3d 	bl	800847c <USBH_CtlReq>
 8007e02:	4603      	mov	r3, r0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	789b      	ldrb	r3, [r3, #2]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10f      	bne.n	8007e40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2205      	movs	r2, #5
 8007e2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fb19 	bl	800847c <USBH_CtlReq>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	789b      	ldrb	r3, [r3, #2]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10e      	bne.n	8007e86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2209      	movs	r2, #9
 8007e72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 faf6 	bl	800847c <USBH_CtlReq>
 8007e90:	4603      	mov	r3, r0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	789b      	ldrb	r3, [r3, #2]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d10f      	bne.n	8007ece <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fad2 	bl	800847c <USBH_CtlReq>
 8007ed8:	4603      	mov	r3, r0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	789b      	ldrb	r3, [r3, #2]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d10f      	bne.n	8007f16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 faae 	bl	800847c <USBH_CtlReq>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	4613      	mov	r3, r2
 8007f36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	785a      	ldrb	r2, [r3, #1]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3303      	adds	r3, #3
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	791a      	ldrb	r2, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	795a      	ldrb	r2, [r3, #5]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	799a      	ldrb	r2, [r3, #6]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	79da      	ldrb	r2, [r3, #7]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	79db      	ldrb	r3, [r3, #7]
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	dc11      	bgt.n	8007fb0 <USBH_ParseDevDesc+0x86>
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	db16      	blt.n	8007fbe <USBH_ParseDevDesc+0x94>
 8007f90:	3b08      	subs	r3, #8
 8007f92:	2201      	movs	r2, #1
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bf14      	ite	ne
 8007fa4:	2301      	movne	r3, #1
 8007fa6:	2300      	moveq	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <USBH_ParseDevDesc+0x8a>
 8007fae:	e006      	b.n	8007fbe <USBH_ParseDevDesc+0x94>
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d104      	bne.n	8007fbe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	79da      	ldrb	r2, [r3, #7]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	71da      	strb	r2, [r3, #7]
      break;
 8007fbc:	e003      	b.n	8007fc6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2240      	movs	r2, #64	; 0x40
 8007fc2:	71da      	strb	r2, [r3, #7]
      break;
 8007fc4:	bf00      	nop
  }

  if (length > 8U)
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d939      	bls.n	8008040 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	3309      	adds	r3, #9
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	330a      	adds	r3, #10
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	330b      	adds	r3, #11
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	330c      	adds	r3, #12
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b29a      	uxth	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	330d      	adds	r3, #13
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	b29b      	uxth	r3, r3
 8008018:	4313      	orrs	r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	7b9a      	ldrb	r2, [r3, #14]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	7bda      	ldrb	r2, [r3, #15]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	7c1a      	ldrb	r2, [r3, #16]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	7c5a      	ldrb	r2, [r3, #17]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	745a      	strb	r2, [r3, #17]
  }
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08c      	sub	sp, #48	; 0x30
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4613      	mov	r3, r2
 8008058:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008060:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	785a      	ldrb	r2, [r3, #1]
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3302      	adds	r3, #2
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b29a      	uxth	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	3303      	adds	r3, #3
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a8:	bf28      	it	cs
 80080aa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	791a      	ldrb	r2, [r3, #4]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	795a      	ldrb	r2, [r3, #5]
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	799a      	ldrb	r2, [r3, #6]
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	79da      	ldrb	r2, [r3, #7]
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	7a1a      	ldrb	r2, [r3, #8]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b09      	cmp	r3, #9
 80080e2:	d002      	beq.n	80080ea <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	2209      	movs	r2, #9
 80080e8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b09      	cmp	r3, #9
 80080ee:	f240 809d 	bls.w	800822c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80080f2:	2309      	movs	r3, #9
 80080f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080fa:	e081      	b.n	8008200 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080fc:	f107 0316 	add.w	r3, r7, #22
 8008100:	4619      	mov	r1, r3
 8008102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008104:	f000 f99f 	bl	8008446 <USBH_GetNextDesc>
 8008108:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b04      	cmp	r3, #4
 8008110:	d176      	bne.n	8008200 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d002      	beq.n	8008120 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	2209      	movs	r2, #9
 800811e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008124:	221a      	movs	r2, #26
 8008126:	fb02 f303 	mul.w	r3, r2, r3
 800812a:	3308      	adds	r3, #8
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	4413      	add	r3, r2
 8008130:	3302      	adds	r3, #2
 8008132:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008136:	69f8      	ldr	r0, [r7, #28]
 8008138:	f000 f87e 	bl	8008238 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008146:	e043      	b.n	80081d0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008148:	f107 0316 	add.w	r3, r7, #22
 800814c:	4619      	mov	r1, r3
 800814e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008150:	f000 f979 	bl	8008446 <USBH_GetNextDesc>
 8008154:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b05      	cmp	r3, #5
 800815c:	d138      	bne.n	80081d0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	795b      	ldrb	r3, [r3, #5]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d10f      	bne.n	8008186 <USBH_ParseCfgDesc+0x13a>
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	799b      	ldrb	r3, [r3, #6]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d10b      	bne.n	8008186 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	79db      	ldrb	r3, [r3, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10f      	bne.n	8008196 <USBH_ParseCfgDesc+0x14a>
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b09      	cmp	r3, #9
 800817c:	d00b      	beq.n	8008196 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	2209      	movs	r2, #9
 8008182:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008184:	e007      	b.n	8008196 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b07      	cmp	r3, #7
 800818c:	d004      	beq.n	8008198 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	2207      	movs	r2, #7
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e000      	b.n	8008198 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008196:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081a0:	3201      	adds	r2, #1
 80081a2:	00d2      	lsls	r2, r2, #3
 80081a4:	211a      	movs	r1, #26
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	3308      	adds	r3, #8
 80081ae:	6a3a      	ldr	r2, [r7, #32]
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80081b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b8:	69b9      	ldr	r1, [r7, #24]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 f86b 	bl	8008296 <USBH_ParseEPDesc>
 80081c0:	4603      	mov	r3, r0
 80081c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80081c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081ca:	3301      	adds	r3, #1
 80081cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081d8:	429a      	cmp	r2, r3
 80081da:	d204      	bcs.n	80081e6 <USBH_ParseCfgDesc+0x19a>
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	885a      	ldrh	r2, [r3, #2]
 80081e0:	8afb      	ldrh	r3, [r7, #22]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d8b0      	bhi.n	8008148 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d201      	bcs.n	80081f6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e01c      	b.n	8008230 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80081f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081fa:	3301      	adds	r3, #1
 80081fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008204:	2b01      	cmp	r3, #1
 8008206:	d805      	bhi.n	8008214 <USBH_ParseCfgDesc+0x1c8>
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	885a      	ldrh	r2, [r3, #2]
 800820c:	8afb      	ldrh	r3, [r7, #22]
 800820e:	429a      	cmp	r2, r3
 8008210:	f63f af74 	bhi.w	80080fc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	791b      	ldrb	r3, [r3, #4]
 8008218:	2b02      	cmp	r3, #2
 800821a:	bf28      	it	cs
 800821c:	2302      	movcs	r3, #2
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008224:	429a      	cmp	r2, r3
 8008226:	d201      	bcs.n	800822c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008228:	2303      	movs	r3, #3
 800822a:	e001      	b.n	8008230 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800822c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008230:	4618      	mov	r0, r3
 8008232:	3730      	adds	r7, #48	; 0x30
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	785a      	ldrb	r2, [r3, #1]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	789a      	ldrb	r2, [r3, #2]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	78da      	ldrb	r2, [r3, #3]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	791a      	ldrb	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	795a      	ldrb	r2, [r3, #5]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	799a      	ldrb	r2, [r3, #6]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	79da      	ldrb	r2, [r3, #7]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	7a1a      	ldrb	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	721a      	strb	r2, [r3, #8]
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008296:	b480      	push	{r7}
 8008298:	b087      	sub	sp, #28
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	785a      	ldrb	r2, [r3, #1]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	789a      	ldrb	r2, [r3, #2]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	78da      	ldrb	r2, [r3, #3]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3304      	adds	r3, #4
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3305      	adds	r3, #5
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	799a      	ldrb	r2, [r3, #6]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	889b      	ldrh	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80082f2:	2303      	movs	r3, #3
 80082f4:	75fb      	strb	r3, [r7, #23]
 80082f6:	e033      	b.n	8008360 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	889b      	ldrh	r3, [r3, #4]
 80082fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	b29a      	uxth	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	889b      	ldrh	r3, [r3, #4]
 800830e:	b21a      	sxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b299      	uxth	r1, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3305      	adds	r3, #5
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	b29b      	uxth	r3, r3
 8008324:	430b      	orrs	r3, r1
 8008326:	b29b      	uxth	r3, r3
 8008328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800832c:	2b00      	cmp	r3, #0
 800832e:	d110      	bne.n	8008352 <USBH_ParseEPDesc+0xbc>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3304      	adds	r3, #4
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b299      	uxth	r1, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3305      	adds	r3, #5
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	b29b      	uxth	r3, r3
 8008344:	430b      	orrs	r3, r1
 8008346:	b29b      	uxth	r3, r3
 8008348:	b21b      	sxth	r3, r3
 800834a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800834e:	b21b      	sxth	r3, r3
 8008350:	e001      	b.n	8008356 <USBH_ParseEPDesc+0xc0>
 8008352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008356:	4313      	orrs	r3, r2
 8008358:	b21b      	sxth	r3, r3
 800835a:	b29a      	uxth	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008366:	2b00      	cmp	r3, #0
 8008368:	d116      	bne.n	8008398 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	78db      	ldrb	r3, [r3, #3]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b01      	cmp	r3, #1
 8008374:	d005      	beq.n	8008382 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	78db      	ldrb	r3, [r3, #3]
 800837a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800837e:	2b03      	cmp	r3, #3
 8008380:	d127      	bne.n	80083d2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	799b      	ldrb	r3, [r3, #6]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <USBH_ParseEPDesc+0xfc>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	799b      	ldrb	r3, [r3, #6]
 800838e:	2b10      	cmp	r3, #16
 8008390:	d91f      	bls.n	80083d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008392:	2303      	movs	r3, #3
 8008394:	75fb      	strb	r3, [r7, #23]
 8008396:	e01c      	b.n	80083d2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d10a      	bne.n	80083ba <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	799b      	ldrb	r3, [r3, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <USBH_ParseEPDesc+0x11e>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	799b      	ldrb	r3, [r3, #6]
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d90e      	bls.n	80083d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80083b4:	2303      	movs	r3, #3
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	e00b      	b.n	80083d2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	78db      	ldrb	r3, [r3, #3]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d105      	bne.n	80083d2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	799b      	ldrb	r3, [r3, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80083ce:	2303      	movs	r3, #3
 80083d0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3301      	adds	r3, #1
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d120      	bne.n	800843a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	1e9a      	subs	r2, r3, #2
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	4293      	cmp	r3, r2
 8008402:	bf28      	it	cs
 8008404:	4613      	movcs	r3, r2
 8008406:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3302      	adds	r3, #2
 800840c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800840e:	2300      	movs	r3, #0
 8008410:	82fb      	strh	r3, [r7, #22]
 8008412:	e00b      	b.n	800842c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	3301      	adds	r3, #1
 8008424:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008426:	8afb      	ldrh	r3, [r7, #22]
 8008428:	3302      	adds	r3, #2
 800842a:	82fb      	strh	r3, [r7, #22]
 800842c:	8afa      	ldrh	r2, [r7, #22]
 800842e:	8abb      	ldrh	r3, [r7, #20]
 8008430:	429a      	cmp	r2, r3
 8008432:	d3ef      	bcc.n	8008414 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
  }
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	881a      	ldrh	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	4413      	add	r3, r2
 800845c:	b29a      	uxth	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4413      	add	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800848a:	2301      	movs	r3, #1
 800848c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	789b      	ldrb	r3, [r3, #2]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d002      	beq.n	800849c <USBH_CtlReq+0x20>
 8008496:	2b02      	cmp	r3, #2
 8008498:	d00f      	beq.n	80084ba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800849a:	e027      	b.n	80084ec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2202      	movs	r2, #2
 80084b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084b4:	2301      	movs	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
      break;
 80084b8:	e018      	b.n	80084ec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f81c 	bl	80084f8 <USBH_HandleControl>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <USBH_CtlReq+0x54>
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d106      	bne.n	80084de <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	761a      	strb	r2, [r3, #24]
      break;
 80084dc:	e005      	b.n	80084ea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d102      	bne.n	80084ea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	709a      	strb	r2, [r3, #2]
      break;
 80084ea:	bf00      	nop
  }
  return status;
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008504:	2300      	movs	r3, #0
 8008506:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7e1b      	ldrb	r3, [r3, #24]
 800850c:	3b01      	subs	r3, #1
 800850e:	2b0a      	cmp	r3, #10
 8008510:	f200 8156 	bhi.w	80087c0 <USBH_HandleControl+0x2c8>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USBH_HandleControl+0x24>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008549 	.word	0x08008549
 8008520:	08008563 	.word	0x08008563
 8008524:	080085cd 	.word	0x080085cd
 8008528:	080085f3 	.word	0x080085f3
 800852c:	0800862b 	.word	0x0800862b
 8008530:	08008655 	.word	0x08008655
 8008534:	080086a7 	.word	0x080086a7
 8008538:	080086c9 	.word	0x080086c9
 800853c:	08008705 	.word	0x08008705
 8008540:	0800872b 	.word	0x0800872b
 8008544:	08008769 	.word	0x08008769
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f103 0110 	add.w	r1, r3, #16
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	795b      	ldrb	r3, [r3, #5]
 8008552:	461a      	mov	r2, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f943 	bl	80087e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	761a      	strb	r2, [r3, #24]
      break;
 8008560:	e139      	b.n	80087d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	795b      	ldrb	r3, [r3, #5]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fccb 	bl	8008f04 <USBH_LL_GetURBState>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d11e      	bne.n	80085b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7c1b      	ldrb	r3, [r3, #16]
 800857c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008580:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	8adb      	ldrh	r3, [r3, #22]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800858a:	7b7b      	ldrb	r3, [r7, #13]
 800858c:	2b80      	cmp	r3, #128	; 0x80
 800858e:	d103      	bne.n	8008598 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2203      	movs	r2, #3
 8008594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008596:	e115      	b.n	80087c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2205      	movs	r2, #5
 800859c:	761a      	strb	r2, [r3, #24]
      break;
 800859e:	e111      	b.n	80087c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80085a0:	7b7b      	ldrb	r3, [r7, #13]
 80085a2:	2b80      	cmp	r3, #128	; 0x80
 80085a4:	d103      	bne.n	80085ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2209      	movs	r2, #9
 80085aa:	761a      	strb	r2, [r3, #24]
      break;
 80085ac:	e10a      	b.n	80087c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2207      	movs	r2, #7
 80085b2:	761a      	strb	r2, [r3, #24]
      break;
 80085b4:	e106      	b.n	80087c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d003      	beq.n	80085c4 <USBH_HandleControl+0xcc>
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	f040 8100 	bne.w	80087c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	220b      	movs	r2, #11
 80085c8:	761a      	strb	r2, [r3, #24]
      break;
 80085ca:	e0fb      	b.n	80087c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6899      	ldr	r1, [r3, #8]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	899a      	ldrh	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	791b      	ldrb	r3, [r3, #4]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f93a 	bl	800885e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2204      	movs	r2, #4
 80085ee:	761a      	strb	r2, [r3, #24]
      break;
 80085f0:	e0f1      	b.n	80087d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc83 	bl	8008f04 <USBH_LL_GetURBState>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d102      	bne.n	800860e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2209      	movs	r2, #9
 800860c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b05      	cmp	r3, #5
 8008612:	d102      	bne.n	800861a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008614:	2303      	movs	r3, #3
 8008616:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008618:	e0d6      	b.n	80087c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b04      	cmp	r3, #4
 800861e:	f040 80d3 	bne.w	80087c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	220b      	movs	r2, #11
 8008626:	761a      	strb	r2, [r3, #24]
      break;
 8008628:	e0ce      	b.n	80087c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6899      	ldr	r1, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	899a      	ldrh	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	795b      	ldrb	r3, [r3, #5]
 8008636:	2001      	movs	r0, #1
 8008638:	9000      	str	r0, [sp, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f8ea 	bl	8008814 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2206      	movs	r2, #6
 8008650:	761a      	strb	r2, [r3, #24]
      break;
 8008652:	e0c0      	b.n	80087d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	795b      	ldrb	r3, [r3, #5]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fc52 	bl	8008f04 <USBH_LL_GetURBState>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d103      	bne.n	8008672 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2207      	movs	r2, #7
 800866e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008670:	e0ac      	b.n	80087cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b05      	cmp	r3, #5
 8008676:	d105      	bne.n	8008684 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	220c      	movs	r2, #12
 800867c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800867e:	2303      	movs	r3, #3
 8008680:	73fb      	strb	r3, [r7, #15]
      break;
 8008682:	e0a3      	b.n	80087cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d103      	bne.n	8008692 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2205      	movs	r2, #5
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e09c      	b.n	80087cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b04      	cmp	r3, #4
 8008696:	f040 8099 	bne.w	80087cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	220b      	movs	r2, #11
 800869e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	73fb      	strb	r3, [r7, #15]
      break;
 80086a4:	e092      	b.n	80087cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f8d5 	bl	800885e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2208      	movs	r2, #8
 80086c4:	761a      	strb	r2, [r3, #24]

      break;
 80086c6:	e086      	b.n	80087d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fc18 	bl	8008f04 <USBH_LL_GetURBState>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d105      	bne.n	80086ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	220d      	movs	r2, #13
 80086e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086e8:	e072      	b.n	80087d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d103      	bne.n	80086f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	220b      	movs	r2, #11
 80086f4:	761a      	strb	r2, [r3, #24]
      break;
 80086f6:	e06b      	b.n	80087d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d168      	bne.n	80087d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80086fe:	2303      	movs	r3, #3
 8008700:	73fb      	strb	r3, [r7, #15]
      break;
 8008702:	e065      	b.n	80087d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	795b      	ldrb	r3, [r3, #5]
 8008708:	2201      	movs	r2, #1
 800870a:	9200      	str	r2, [sp, #0]
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f87f 	bl	8008814 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	220a      	movs	r2, #10
 8008726:	761a      	strb	r2, [r3, #24]
      break;
 8008728:	e055      	b.n	80087d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	795b      	ldrb	r3, [r3, #5]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fbe7 	bl	8008f04 <USBH_LL_GetURBState>
 8008736:	4603      	mov	r3, r0
 8008738:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d105      	bne.n	800874c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	220d      	movs	r2, #13
 8008748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800874a:	e043      	b.n	80087d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b02      	cmp	r3, #2
 8008750:	d103      	bne.n	800875a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2209      	movs	r2, #9
 8008756:	761a      	strb	r2, [r3, #24]
      break;
 8008758:	e03c      	b.n	80087d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b04      	cmp	r3, #4
 800875e:	d139      	bne.n	80087d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220b      	movs	r2, #11
 8008764:	761a      	strb	r2, [r3, #24]
      break;
 8008766:	e035      	b.n	80087d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7e5b      	ldrb	r3, [r3, #25]
 800876c:	3301      	adds	r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	765a      	strb	r2, [r3, #25]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	7e5b      	ldrb	r3, [r3, #25]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d806      	bhi.n	800878a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008788:	e025      	b.n	80087d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008790:	2106      	movs	r1, #6
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	795b      	ldrb	r3, [r3, #5]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f90c 	bl	80089c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	791b      	ldrb	r3, [r3, #4]
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f906 	bl	80089c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087ba:	2302      	movs	r3, #2
 80087bc:	73fb      	strb	r3, [r7, #15]
      break;
 80087be:	e00a      	b.n	80087d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80087c0:	bf00      	nop
 80087c2:	e008      	b.n	80087d6 <USBH_HandleControl+0x2de>
      break;
 80087c4:	bf00      	nop
 80087c6:	e006      	b.n	80087d6 <USBH_HandleControl+0x2de>
      break;
 80087c8:	bf00      	nop
 80087ca:	e004      	b.n	80087d6 <USBH_HandleControl+0x2de>
      break;
 80087cc:	bf00      	nop
 80087ce:	e002      	b.n	80087d6 <USBH_HandleControl+0x2de>
      break;
 80087d0:	bf00      	nop
 80087d2:	e000      	b.n	80087d6 <USBH_HandleControl+0x2de>
      break;
 80087d4:	bf00      	nop
  }

  return status;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af04      	add	r7, sp, #16
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087ee:	79f9      	ldrb	r1, [r7, #7]
 80087f0:	2300      	movs	r3, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	2308      	movs	r3, #8
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	2300      	movs	r3, #0
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	2200      	movs	r2, #0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fb4c 	bl	8008ea2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af04      	add	r7, sp, #16
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4611      	mov	r1, r2
 8008820:	461a      	mov	r2, r3
 8008822:	460b      	mov	r3, r1
 8008824:	80fb      	strh	r3, [r7, #6]
 8008826:	4613      	mov	r3, r2
 8008828:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008838:	7979      	ldrb	r1, [r7, #5]
 800883a:	7e3b      	ldrb	r3, [r7, #24]
 800883c:	9303      	str	r3, [sp, #12]
 800883e:	88fb      	ldrh	r3, [r7, #6]
 8008840:	9302      	str	r3, [sp, #8]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	2301      	movs	r3, #1
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	2300      	movs	r3, #0
 800884c:	2200      	movs	r2, #0
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fb27 	bl	8008ea2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b088      	sub	sp, #32
 8008862:	af04      	add	r7, sp, #16
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	4611      	mov	r1, r2
 800886a:	461a      	mov	r2, r3
 800886c:	460b      	mov	r3, r1
 800886e:	80fb      	strh	r3, [r7, #6]
 8008870:	4613      	mov	r3, r2
 8008872:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008874:	7979      	ldrb	r1, [r7, #5]
 8008876:	2300      	movs	r3, #0
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2301      	movs	r3, #1
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	2201      	movs	r2, #1
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb09 	bl	8008ea2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008890:	2300      	movs	r3, #0

}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af04      	add	r7, sp, #16
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4611      	mov	r1, r2
 80088a6:	461a      	mov	r2, r3
 80088a8:	460b      	mov	r3, r1
 80088aa:	80fb      	strh	r3, [r7, #6]
 80088ac:	4613      	mov	r3, r2
 80088ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088be:	7979      	ldrb	r1, [r7, #5]
 80088c0:	7e3b      	ldrb	r3, [r7, #24]
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	88fb      	ldrh	r3, [r7, #6]
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	2301      	movs	r3, #1
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2302      	movs	r3, #2
 80088d2:	2200      	movs	r2, #0
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 fae4 	bl	8008ea2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4611      	mov	r1, r2
 80088f0:	461a      	mov	r2, r3
 80088f2:	460b      	mov	r3, r1
 80088f4:	80fb      	strh	r3, [r7, #6]
 80088f6:	4613      	mov	r3, r2
 80088f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088fa:	7979      	ldrb	r1, [r7, #5]
 80088fc:	2300      	movs	r3, #0
 80088fe:	9303      	str	r3, [sp, #12]
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	9302      	str	r3, [sp, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	2301      	movs	r3, #1
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2302      	movs	r3, #2
 800890e:	2201      	movs	r2, #1
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fac6 	bl	8008ea2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af04      	add	r7, sp, #16
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	4608      	mov	r0, r1
 800892a:	4611      	mov	r1, r2
 800892c:	461a      	mov	r2, r3
 800892e:	4603      	mov	r3, r0
 8008930:	70fb      	strb	r3, [r7, #3]
 8008932:	460b      	mov	r3, r1
 8008934:	70bb      	strb	r3, [r7, #2]
 8008936:	4613      	mov	r3, r2
 8008938:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800893a:	7878      	ldrb	r0, [r7, #1]
 800893c:	78ba      	ldrb	r2, [r7, #2]
 800893e:	78f9      	ldrb	r1, [r7, #3]
 8008940:	8b3b      	ldrh	r3, [r7, #24]
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	7d3b      	ldrb	r3, [r7, #20]
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	7c3b      	ldrb	r3, [r7, #16]
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	4603      	mov	r3, r0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa59 	bl	8008e06 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa78 	bl	8008e64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f836 	bl	80089fc <USBH_GetFreePipe>
 8008990:	4603      	mov	r3, r0
 8008992:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008994:	89fb      	ldrh	r3, [r7, #14]
 8008996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800899a:	4293      	cmp	r3, r2
 800899c:	d00a      	beq.n	80089b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	89fb      	ldrh	r3, [r7, #14]
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	33e0      	adds	r3, #224	; 0xe0
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089b4:	89fb      	ldrh	r3, [r7, #14]
 80089b6:	b2db      	uxtb	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	2b0f      	cmp	r3, #15
 80089d0:	d80d      	bhi.n	80089ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	33e0      	adds	r3, #224	; 0xe0
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	33e0      	adds	r3, #224	; 0xe0
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	e00f      	b.n	8008a2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	33e0      	adds	r3, #224	; 0xe0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	e007      	b.n	8008a38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b0f      	cmp	r3, #15
 8008a32:	d9ec      	bls.n	8008a0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	490e      	ldr	r1, [pc, #56]	; (8008a84 <MX_USB_HOST_Init+0x40>)
 8008a4c:	480e      	ldr	r0, [pc, #56]	; (8008a88 <MX_USB_HOST_Init+0x44>)
 8008a4e:	f7fe fba7 	bl	80071a0 <USBH_Init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a58:	f7f8 f9d2 	bl	8000e00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8008a5c:	490b      	ldr	r1, [pc, #44]	; (8008a8c <MX_USB_HOST_Init+0x48>)
 8008a5e:	480a      	ldr	r0, [pc, #40]	; (8008a88 <MX_USB_HOST_Init+0x44>)
 8008a60:	f7fe fc2c 	bl	80072bc <USBH_RegisterClass>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a6a:	f7f8 f9c9 	bl	8000e00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8008a6e:	4806      	ldr	r0, [pc, #24]	; (8008a88 <MX_USB_HOST_Init+0x44>)
 8008a70:	f7fe fcb0 	bl	80073d4 <USBH_Start>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a7a:	f7f8 f9c1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a7e:	bf00      	nop
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	08008aa5 	.word	0x08008aa5
 8008a88:	200002c4 	.word	0x200002c4
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8008a94:	4802      	ldr	r0, [pc, #8]	; (8008aa0 <MX_USB_HOST_Process+0x10>)
 8008a96:	f7fe fcad 	bl	80073f4 <USBH_Process>
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200002c4 	.word	0x200002c4

08008aa4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	d819      	bhi.n	8008aec <USBH_UserProcess+0x48>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBH_UserProcess+0x1c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008aed 	.word	0x08008aed
 8008ac4:	08008add 	.word	0x08008add
 8008ac8:	08008aed 	.word	0x08008aed
 8008acc:	08008ae5 	.word	0x08008ae5
 8008ad0:	08008ad5 	.word	0x08008ad5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ad4:	4b09      	ldr	r3, [pc, #36]	; (8008afc <USBH_UserProcess+0x58>)
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	701a      	strb	r2, [r3, #0]
  break;
 8008ada:	e008      	b.n	8008aee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008adc:	4b07      	ldr	r3, [pc, #28]	; (8008afc <USBH_UserProcess+0x58>)
 8008ade:	2202      	movs	r2, #2
 8008ae0:	701a      	strb	r2, [r3, #0]
  break;
 8008ae2:	e004      	b.n	8008aee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <USBH_UserProcess+0x58>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	701a      	strb	r2, [r3, #0]
  break;
 8008aea:	e000      	b.n	8008aee <USBH_UserProcess+0x4a>

  default:
  break;
 8008aec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2000069c 	.word	0x2000069c

08008b00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b08:	f107 0314 	add.w	r3, r7, #20
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	609a      	str	r2, [r3, #8]
 8008b14:	60da      	str	r2, [r3, #12]
 8008b16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a24      	ldr	r2, [pc, #144]	; (8008bb0 <HAL_HCD_MspInit+0xb0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d141      	bne.n	8008ba6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	4a22      	ldr	r2, [pc, #136]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	6313      	str	r3, [r2, #48]	; 0x30
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8008b3e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8008b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b44:	2302      	movs	r3, #2
 8008b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008b50:	230c      	movs	r3, #12
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4817      	ldr	r0, [pc, #92]	; (8008bb8 <HAL_HCD_MspInit+0xb8>)
 8008b5c:	f7f8 ffc8 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8008b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8008b6e:	f107 0314 	add.w	r3, r7, #20
 8008b72:	4619      	mov	r1, r3
 8008b74:	4810      	ldr	r0, [pc, #64]	; (8008bb8 <HAL_HCD_MspInit+0xb8>)
 8008b76:	f7f8 ffbb 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b88:	6313      	str	r3, [r2, #48]	; 0x30
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <HAL_HCD_MspInit+0xb4>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008b96:	2200      	movs	r2, #0
 8008b98:	2100      	movs	r1, #0
 8008b9a:	204d      	movs	r0, #77	; 0x4d
 8008b9c:	f7f8 fd76 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008ba0:	204d      	movs	r0, #77	; 0x4d
 8008ba2:	f7f8 fd8f 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	3728      	adds	r7, #40	; 0x28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	40040000 	.word	0x40040000
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	40020400 	.word	0x40020400

08008bbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fff1 	bl	8007bb2 <USBH_LL_IncTimer>
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff f829 	bl	8007c3e <USBH_LL_Connect>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff f832 	bl	8007c6c <USBH_LL_Disconnect>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe ffe3 	bl	8007c06 <USBH_LL_PortEnabled>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe ffe3 	bl	8007c22 <USBH_LL_PortDisabled>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d132      	bne.n	8008cdc <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a19      	ldr	r2, [pc, #100]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c88:	4a18      	ldr	r2, [pc, #96]	; (8008cec <USBH_LL_Init+0x88>)
 8008c8a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c8e:	220c      	movs	r2, #12
 8008c90:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c94:	2201      	movs	r2, #1
 8008c96:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008ca4:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008caa:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008cb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8008cbc:	480a      	ldr	r0, [pc, #40]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008cbe:	f7f9 f8dc 	bl	8001e7a <HAL_HCD_Init>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8008cc8:	f7f8 f89a 	bl	8000e00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8008ccc:	4806      	ldr	r0, [pc, #24]	; (8008ce8 <USBH_LL_Init+0x84>)
 8008cce:	f7f9 fcc0 	bl	8002652 <HAL_HCD_GetCurrentFrame>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7fe ff5c 	bl	8007b94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	200006a0 	.word	0x200006a0
 8008cec:	40040000 	.word	0x40040000

08008cf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7f9 fc2d 	bl	8002566 <HAL_HCD_Start>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f95c 	bl	8008fd0 <USBH_Get_USB_Status>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f9 fc35 	bl	80025ac <HAL_HCD_Stop>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f941 	bl	8008fd0 <USBH_Get_USB_Status>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d64:	2301      	movs	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7f9 fc7d 	bl	800266e <HAL_HCD_GetCurrentSpeed>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d00c      	beq.n	8008d94 <USBH_LL_GetSpeed+0x38>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d80d      	bhi.n	8008d9a <USBH_LL_GetSpeed+0x3e>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <USBH_LL_GetSpeed+0x2c>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d003      	beq.n	8008d8e <USBH_LL_GetSpeed+0x32>
 8008d86:	e008      	b.n	8008d9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e008      	b.n	8008da0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e005      	b.n	8008da0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d94:	2302      	movs	r3, #2
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e002      	b.n	8008da0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	bf00      	nop
  }
  return  speed;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7f9 fc10 	bl	80025e6 <HAL_HCD_ResetPort>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f8ff 	bl	8008fd0 <USBH_Get_USB_Status>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f9 fc17 	bl	800262a <HAL_HCD_HC_GetXferCount>
 8008dfc:	4603      	mov	r3, r0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e06:	b590      	push	{r4, r7, lr}
 8008e08:	b089      	sub	sp, #36	; 0x24
 8008e0a:	af04      	add	r7, sp, #16
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4611      	mov	r1, r2
 8008e12:	461a      	mov	r2, r3
 8008e14:	4603      	mov	r3, r0
 8008e16:	70fb      	strb	r3, [r7, #3]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70bb      	strb	r3, [r7, #2]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e2e:	787c      	ldrb	r4, [r7, #1]
 8008e30:	78ba      	ldrb	r2, [r7, #2]
 8008e32:	78f9      	ldrb	r1, [r7, #3]
 8008e34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	4623      	mov	r3, r4
 8008e46:	f7f9 f87a 	bl	8001f3e <HAL_HCD_HC_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f8bd 	bl	8008fd0 <USBH_Get_USB_Status>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd90      	pop	{r4, r7, pc}

08008e64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f9 f8ea 	bl	800205c <HAL_HCD_HC_Halt>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f89e 	bl	8008fd0 <USBH_Get_USB_Status>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ea2:	b590      	push	{r4, r7, lr}
 8008ea4:	b089      	sub	sp, #36	; 0x24
 8008ea6:	af04      	add	r7, sp, #16
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	70fb      	strb	r3, [r7, #3]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70bb      	strb	r3, [r7, #2]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eca:	787c      	ldrb	r4, [r7, #1]
 8008ecc:	78ba      	ldrb	r2, [r7, #2]
 8008ece:	78f9      	ldrb	r1, [r7, #3]
 8008ed0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ed8:	9302      	str	r3, [sp, #8]
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	f7f9 f8dd 	bl	80020a4 <HAL_HCD_HC_SubmitRequest>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f86d 	bl	8008fd0 <USBH_Get_USB_Status>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd90      	pop	{r4, r7, pc}

08008f04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f9 fb71 	bl	8002602 <HAL_HCD_HC_GetURBState>
 8008f20:	4603      	mov	r3, r0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	460b      	mov	r3, r1
 8008f34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d103      	bne.n	8008f48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f870 	bl	8009028 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f48:	20c8      	movs	r0, #200	; 0xc8
 8008f4a:	f7f8 fac3 	bl	80014d4 <HAL_Delay>
  return USBH_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
 8008f64:	4613      	mov	r3, r2
 8008f66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	212c      	movs	r1, #44	; 0x2c
 8008f76:	fb01 f303 	mul.w	r3, r1, r3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	333b      	adds	r3, #59	; 0x3b
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d009      	beq.n	8008f98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	212c      	movs	r1, #44	; 0x2c
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	3354      	adds	r3, #84	; 0x54
 8008f92:	78ba      	ldrb	r2, [r7, #2]
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	e008      	b.n	8008faa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	212c      	movs	r1, #44	; 0x2c
 8008f9e:	fb01 f303 	mul.w	r3, r1, r3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3355      	adds	r3, #85	; 0x55
 8008fa6:	78ba      	ldrb	r2, [r7, #2]
 8008fa8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7f8 fa87 	bl	80014d4 <HAL_Delay>
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d817      	bhi.n	8009014 <USBH_Get_USB_Status+0x44>
 8008fe4:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <USBH_Get_USB_Status+0x1c>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	08009003 	.word	0x08009003
 8008ff4:	08009009 	.word	0x08009009
 8008ff8:	0800900f 	.word	0x0800900f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8009000:	e00b      	b.n	800901a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	73fb      	strb	r3, [r7, #15]
    break;
 8009006:	e008      	b.n	800901a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
    break;
 800900c:	e005      	b.n	800901a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800900e:	2302      	movs	r3, #2
 8009010:	73fb      	strb	r3, [r7, #15]
    break;
 8009012:	e002      	b.n	800901a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009014:	2302      	movs	r3, #2
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	bf00      	nop
  }
  return usb_status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e001      	b.n	8009046 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	461a      	mov	r2, r3
 800904a:	2110      	movs	r1, #16
 800904c:	4803      	ldr	r0, [pc, #12]	; (800905c <MX_DriverVbusHS+0x34>)
 800904e:	f7f8 fefb 	bl	8001e48 <HAL_GPIO_WritePin>
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40020800 	.word	0x40020800

08009060 <__errno>:
 8009060:	4b01      	ldr	r3, [pc, #4]	; (8009068 <__errno+0x8>)
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	2000002c 	.word	0x2000002c

0800906c <__libc_init_array>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	4d0d      	ldr	r5, [pc, #52]	; (80090a4 <__libc_init_array+0x38>)
 8009070:	4c0d      	ldr	r4, [pc, #52]	; (80090a8 <__libc_init_array+0x3c>)
 8009072:	1b64      	subs	r4, r4, r5
 8009074:	10a4      	asrs	r4, r4, #2
 8009076:	2600      	movs	r6, #0
 8009078:	42a6      	cmp	r6, r4
 800907a:	d109      	bne.n	8009090 <__libc_init_array+0x24>
 800907c:	4d0b      	ldr	r5, [pc, #44]	; (80090ac <__libc_init_array+0x40>)
 800907e:	4c0c      	ldr	r4, [pc, #48]	; (80090b0 <__libc_init_array+0x44>)
 8009080:	f000 f92e 	bl	80092e0 <_init>
 8009084:	1b64      	subs	r4, r4, r5
 8009086:	10a4      	asrs	r4, r4, #2
 8009088:	2600      	movs	r6, #0
 800908a:	42a6      	cmp	r6, r4
 800908c:	d105      	bne.n	800909a <__libc_init_array+0x2e>
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	f855 3b04 	ldr.w	r3, [r5], #4
 8009094:	4798      	blx	r3
 8009096:	3601      	adds	r6, #1
 8009098:	e7ee      	b.n	8009078 <__libc_init_array+0xc>
 800909a:	f855 3b04 	ldr.w	r3, [r5], #4
 800909e:	4798      	blx	r3
 80090a0:	3601      	adds	r6, #1
 80090a2:	e7f2      	b.n	800908a <__libc_init_array+0x1e>
 80090a4:	0800931c 	.word	0x0800931c
 80090a8:	0800931c 	.word	0x0800931c
 80090ac:	0800931c 	.word	0x0800931c
 80090b0:	08009320 	.word	0x08009320

080090b4 <malloc>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <malloc+0xc>)
 80090b6:	4601      	mov	r1, r0
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f000 b87f 	b.w	80091bc <_malloc_r>
 80090be:	bf00      	nop
 80090c0:	2000002c 	.word	0x2000002c

080090c4 <free>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	; (80090d0 <free+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b80b 	b.w	80090e4 <_free_r>
 80090ce:	bf00      	nop
 80090d0:	2000002c 	.word	0x2000002c

080090d4 <memset>:
 80090d4:	4402      	add	r2, r0
 80090d6:	4603      	mov	r3, r0
 80090d8:	4293      	cmp	r3, r2
 80090da:	d100      	bne.n	80090de <memset+0xa>
 80090dc:	4770      	bx	lr
 80090de:	f803 1b01 	strb.w	r1, [r3], #1
 80090e2:	e7f9      	b.n	80090d8 <memset+0x4>

080090e4 <_free_r>:
 80090e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d044      	beq.n	8009174 <_free_r+0x90>
 80090ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ee:	9001      	str	r0, [sp, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f1a1 0404 	sub.w	r4, r1, #4
 80090f6:	bfb8      	it	lt
 80090f8:	18e4      	addlt	r4, r4, r3
 80090fa:	f000 f8e3 	bl	80092c4 <__malloc_lock>
 80090fe:	4a1e      	ldr	r2, [pc, #120]	; (8009178 <_free_r+0x94>)
 8009100:	9801      	ldr	r0, [sp, #4]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	b933      	cbnz	r3, 8009114 <_free_r+0x30>
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	6014      	str	r4, [r2, #0]
 800910a:	b003      	add	sp, #12
 800910c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009110:	f000 b8de 	b.w	80092d0 <__malloc_unlock>
 8009114:	42a3      	cmp	r3, r4
 8009116:	d908      	bls.n	800912a <_free_r+0x46>
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	1961      	adds	r1, r4, r5
 800911c:	428b      	cmp	r3, r1
 800911e:	bf01      	itttt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	1949      	addeq	r1, r1, r5
 8009126:	6021      	streq	r1, [r4, #0]
 8009128:	e7ed      	b.n	8009106 <_free_r+0x22>
 800912a:	461a      	mov	r2, r3
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	b10b      	cbz	r3, 8009134 <_free_r+0x50>
 8009130:	42a3      	cmp	r3, r4
 8009132:	d9fa      	bls.n	800912a <_free_r+0x46>
 8009134:	6811      	ldr	r1, [r2, #0]
 8009136:	1855      	adds	r5, r2, r1
 8009138:	42a5      	cmp	r5, r4
 800913a:	d10b      	bne.n	8009154 <_free_r+0x70>
 800913c:	6824      	ldr	r4, [r4, #0]
 800913e:	4421      	add	r1, r4
 8009140:	1854      	adds	r4, r2, r1
 8009142:	42a3      	cmp	r3, r4
 8009144:	6011      	str	r1, [r2, #0]
 8009146:	d1e0      	bne.n	800910a <_free_r+0x26>
 8009148:	681c      	ldr	r4, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	6053      	str	r3, [r2, #4]
 800914e:	4421      	add	r1, r4
 8009150:	6011      	str	r1, [r2, #0]
 8009152:	e7da      	b.n	800910a <_free_r+0x26>
 8009154:	d902      	bls.n	800915c <_free_r+0x78>
 8009156:	230c      	movs	r3, #12
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	e7d6      	b.n	800910a <_free_r+0x26>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf04      	itt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	bf04      	itt	eq
 800916c:	1949      	addeq	r1, r1, r5
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	6054      	str	r4, [r2, #4]
 8009172:	e7ca      	b.n	800910a <_free_r+0x26>
 8009174:	b003      	add	sp, #12
 8009176:	bd30      	pop	{r4, r5, pc}
 8009178:	200009a4 	.word	0x200009a4

0800917c <sbrk_aligned>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	4e0e      	ldr	r6, [pc, #56]	; (80091b8 <sbrk_aligned+0x3c>)
 8009180:	460c      	mov	r4, r1
 8009182:	6831      	ldr	r1, [r6, #0]
 8009184:	4605      	mov	r5, r0
 8009186:	b911      	cbnz	r1, 800918e <sbrk_aligned+0x12>
 8009188:	f000 f88c 	bl	80092a4 <_sbrk_r>
 800918c:	6030      	str	r0, [r6, #0]
 800918e:	4621      	mov	r1, r4
 8009190:	4628      	mov	r0, r5
 8009192:	f000 f887 	bl	80092a4 <_sbrk_r>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d00a      	beq.n	80091b0 <sbrk_aligned+0x34>
 800919a:	1cc4      	adds	r4, r0, #3
 800919c:	f024 0403 	bic.w	r4, r4, #3
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d007      	beq.n	80091b4 <sbrk_aligned+0x38>
 80091a4:	1a21      	subs	r1, r4, r0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f000 f87c 	bl	80092a4 <_sbrk_r>
 80091ac:	3001      	adds	r0, #1
 80091ae:	d101      	bne.n	80091b4 <sbrk_aligned+0x38>
 80091b0:	f04f 34ff 	mov.w	r4, #4294967295
 80091b4:	4620      	mov	r0, r4
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	200009a8 	.word	0x200009a8

080091bc <_malloc_r>:
 80091bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	1ccd      	adds	r5, r1, #3
 80091c2:	f025 0503 	bic.w	r5, r5, #3
 80091c6:	3508      	adds	r5, #8
 80091c8:	2d0c      	cmp	r5, #12
 80091ca:	bf38      	it	cc
 80091cc:	250c      	movcc	r5, #12
 80091ce:	2d00      	cmp	r5, #0
 80091d0:	4607      	mov	r7, r0
 80091d2:	db01      	blt.n	80091d8 <_malloc_r+0x1c>
 80091d4:	42a9      	cmp	r1, r5
 80091d6:	d905      	bls.n	80091e4 <_malloc_r+0x28>
 80091d8:	230c      	movs	r3, #12
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	2600      	movs	r6, #0
 80091de:	4630      	mov	r0, r6
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e4:	4e2e      	ldr	r6, [pc, #184]	; (80092a0 <_malloc_r+0xe4>)
 80091e6:	f000 f86d 	bl	80092c4 <__malloc_lock>
 80091ea:	6833      	ldr	r3, [r6, #0]
 80091ec:	461c      	mov	r4, r3
 80091ee:	bb34      	cbnz	r4, 800923e <_malloc_r+0x82>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4638      	mov	r0, r7
 80091f4:	f7ff ffc2 	bl	800917c <sbrk_aligned>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	4604      	mov	r4, r0
 80091fc:	d14d      	bne.n	800929a <_malloc_r+0xde>
 80091fe:	6834      	ldr	r4, [r6, #0]
 8009200:	4626      	mov	r6, r4
 8009202:	2e00      	cmp	r6, #0
 8009204:	d140      	bne.n	8009288 <_malloc_r+0xcc>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	4631      	mov	r1, r6
 800920a:	4638      	mov	r0, r7
 800920c:	eb04 0803 	add.w	r8, r4, r3
 8009210:	f000 f848 	bl	80092a4 <_sbrk_r>
 8009214:	4580      	cmp	r8, r0
 8009216:	d13a      	bne.n	800928e <_malloc_r+0xd2>
 8009218:	6821      	ldr	r1, [r4, #0]
 800921a:	3503      	adds	r5, #3
 800921c:	1a6d      	subs	r5, r5, r1
 800921e:	f025 0503 	bic.w	r5, r5, #3
 8009222:	3508      	adds	r5, #8
 8009224:	2d0c      	cmp	r5, #12
 8009226:	bf38      	it	cc
 8009228:	250c      	movcc	r5, #12
 800922a:	4629      	mov	r1, r5
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff ffa5 	bl	800917c <sbrk_aligned>
 8009232:	3001      	adds	r0, #1
 8009234:	d02b      	beq.n	800928e <_malloc_r+0xd2>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	442b      	add	r3, r5
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	e00e      	b.n	800925c <_malloc_r+0xa0>
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	1b52      	subs	r2, r2, r5
 8009242:	d41e      	bmi.n	8009282 <_malloc_r+0xc6>
 8009244:	2a0b      	cmp	r2, #11
 8009246:	d916      	bls.n	8009276 <_malloc_r+0xba>
 8009248:	1961      	adds	r1, r4, r5
 800924a:	42a3      	cmp	r3, r4
 800924c:	6025      	str	r5, [r4, #0]
 800924e:	bf18      	it	ne
 8009250:	6059      	strne	r1, [r3, #4]
 8009252:	6863      	ldr	r3, [r4, #4]
 8009254:	bf08      	it	eq
 8009256:	6031      	streq	r1, [r6, #0]
 8009258:	5162      	str	r2, [r4, r5]
 800925a:	604b      	str	r3, [r1, #4]
 800925c:	4638      	mov	r0, r7
 800925e:	f104 060b 	add.w	r6, r4, #11
 8009262:	f000 f835 	bl	80092d0 <__malloc_unlock>
 8009266:	f026 0607 	bic.w	r6, r6, #7
 800926a:	1d23      	adds	r3, r4, #4
 800926c:	1af2      	subs	r2, r6, r3
 800926e:	d0b6      	beq.n	80091de <_malloc_r+0x22>
 8009270:	1b9b      	subs	r3, r3, r6
 8009272:	50a3      	str	r3, [r4, r2]
 8009274:	e7b3      	b.n	80091de <_malloc_r+0x22>
 8009276:	6862      	ldr	r2, [r4, #4]
 8009278:	42a3      	cmp	r3, r4
 800927a:	bf0c      	ite	eq
 800927c:	6032      	streq	r2, [r6, #0]
 800927e:	605a      	strne	r2, [r3, #4]
 8009280:	e7ec      	b.n	800925c <_malloc_r+0xa0>
 8009282:	4623      	mov	r3, r4
 8009284:	6864      	ldr	r4, [r4, #4]
 8009286:	e7b2      	b.n	80091ee <_malloc_r+0x32>
 8009288:	4634      	mov	r4, r6
 800928a:	6876      	ldr	r6, [r6, #4]
 800928c:	e7b9      	b.n	8009202 <_malloc_r+0x46>
 800928e:	230c      	movs	r3, #12
 8009290:	603b      	str	r3, [r7, #0]
 8009292:	4638      	mov	r0, r7
 8009294:	f000 f81c 	bl	80092d0 <__malloc_unlock>
 8009298:	e7a1      	b.n	80091de <_malloc_r+0x22>
 800929a:	6025      	str	r5, [r4, #0]
 800929c:	e7de      	b.n	800925c <_malloc_r+0xa0>
 800929e:	bf00      	nop
 80092a0:	200009a4 	.word	0x200009a4

080092a4 <_sbrk_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d06      	ldr	r5, [pc, #24]	; (80092c0 <_sbrk_r+0x1c>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7f8 f85c 	bl	800136c <_sbrk>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_sbrk_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_sbrk_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	200009ac 	.word	0x200009ac

080092c4 <__malloc_lock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__malloc_lock+0x8>)
 80092c6:	f000 b809 	b.w	80092dc <__retarget_lock_acquire_recursive>
 80092ca:	bf00      	nop
 80092cc:	200009b0 	.word	0x200009b0

080092d0 <__malloc_unlock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__malloc_unlock+0x8>)
 80092d2:	f000 b804 	b.w	80092de <__retarget_lock_release_recursive>
 80092d6:	bf00      	nop
 80092d8:	200009b0 	.word	0x200009b0

080092dc <__retarget_lock_acquire_recursive>:
 80092dc:	4770      	bx	lr

080092de <__retarget_lock_release_recursive>:
 80092de:	4770      	bx	lr

080092e0 <_init>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	bf00      	nop
 80092e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e6:	bc08      	pop	{r3}
 80092e8:	469e      	mov	lr, r3
 80092ea:	4770      	bx	lr

080092ec <_fini>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr
